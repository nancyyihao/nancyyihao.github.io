<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>利用Python加Selenium下载音视频</title>
      <link href="/2023/04/08/Crawl-Video-Audio-With-Python-And-Selenium/"/>
      <url>/2023/04/08/Crawl-Video-Audio-With-Python-And-Selenium/</url>
      
        <content type="html"><![CDATA[<hr><style>img{    width: 50%;      height: 50%;    padding-left: 20%;}</style><h3 id="0x00-目标"><a href="#0x00-目标" class="headerlink" title="0x00 目标"></a>0x00 目标</h3><p>有个好朋友买了该课程，希望将内容下载下来随时听，问我有没有办法，经过几天探索，终于将该课程的内容下载到了本地。</p><span id="more"></span><p><img src="/2023/04/08/Crawl-Video-Audio-With-Python-And-Selenium/p1.png"></p><h3 id="0x01-获取链接"><a href="#0x01-获取链接" class="headerlink" title="0x01 获取链接"></a>0x01 获取链接</h3><p><img src="/2023/04/08/Crawl-Video-Audio-With-Python-And-Selenium/p2.png"></p><p><img src="/2023/04/08/Crawl-Video-Audio-With-Python-And-Selenium/p3.png"></p><p>去微信PC端，关注千聊公众号，点我的—&gt;我的课程，选中相应课程，打开之后，点击右上角的复制链接，以伯庸智库为例，对应的课程链接就是：<a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000007225767060">https://m.qlchat.com/wechat/page/channel-intro?channelId=2000007225767060</a></p><h3 id="0x02-在Chrome中打开页面"><a href="#0x02-在Chrome中打开页面" class="headerlink" title="0x02 在Chrome中打开页面"></a>0x02 在Chrome中打开页面</h3><p><img src="/2023/04/08/Crawl-Video-Audio-With-Python-And-Selenium/p4.png"></p><p><img src="/2023/04/08/Crawl-Video-Audio-With-Python-And-Selenium/p5.png"></p><p>使用Chrome浏览器打开上述链接：<a href="https://m.qlchat.com/wechat/page/channel-intro?channelId=2000007225767060%EF%BC%8C%E4%B8%8D%E5%87%BA%E6%84%8F%E5%A4%96%E4%BC%9A%E5%91%8A%E8%AF%89%E4%BD%A0%E6%97%A0%E6%9D%83%E9%99%90%E8%AE%BF%E9%97%AE%E3%80%82%E5%85%88%E5%88%AB%E7%9D%80%E6%80%A5%EF%BC%8C%E5%8E%BB%E8%BF%99%E9%87%8C%E4%B8%8B%E8%BD%BD%EF%BC%9Ahttps://proxyman.io/">https://m.qlchat.com/wechat/page/channel-intro?channelId=2000007225767060，不出意外会告诉你无权限访问。先别着急，去这里下载：https://proxyman.io/</a> Proxyman软件，安装成功后，回到微信PC端，重新刷新一下该课程的页面，会看到有相应请求，而且请求信息里有最关键的cookie。我们把cookie复制下来。</p><p><img src="/2023/04/08/Crawl-Video-Audio-With-Python-And-Selenium/p6.png"></p><p>回到Chrome浏览器上，打开开发者工具（Mac直接按option+command+I），点到console这个tab，然后输入document.cookie&#x3D;”刚刚复制的Cookie”，点回车，刷新一下页面，神奇的事情发生了。你现在已经登录成功了，可以正常在Chrome里浏览相应的内容了。</p><p><img src="/2023/04/08/Crawl-Video-Audio-With-Python-And-Selenium/p7.png"></p><p>举一反三，你也可以用类似的方式，在PC端的Chrome浏览器打开微信公众号的文章，而且是带有评论的。链接通过抓包可以看到，这里就不再多赘述。</p><p><img src="/2023/04/08/Crawl-Video-Audio-With-Python-And-Selenium/p8.png"></p><p><img src="/2023/04/08/Crawl-Video-Audio-With-Python-And-Selenium/p9.png"></p><h3 id="0x03-提取关键信息"><a href="#0x03-提取关键信息" class="headerlink" title="0x03 提取关键信息"></a>0x03 提取关键信息</h3><p>正常进入到页面之后，就可以通过Chrome提供的开发者工具分析网络请求信息了。通过逐个请求分析，发现getCourseList接口返回的就是课程的信息。</p><p><img src="/2023/04/08/Crawl-Video-Audio-With-Python-And-Selenium/p10.png"></p><p>通过对返回信息进行分析发现几个关键信息</p><ol><li>其中id就是章节id，章节的唯一标识</li><li>topic就是标题名称</li><li>style标识不同类型的内容，如果是视频则为videoGraphic，如果是音频则为videoGraphic</li></ol><p><img src="/2023/04/08/Crawl-Video-Audio-With-Python-And-Selenium/p11.png"></p><p>继续点进任意一节课，查看对应的请求信息。</p><h4 id="提取视频链接"><a href="#提取视频链接" class="headerlink" title="提取视频链接"></a>提取视频链接</h4><p>从中找到m3u8的请求，这就是我们想要的链接。真正的播放的视频是.ts的请求，但是我们可以通过m3u8链接拼接出所有的ts文件链接，从而得到所有的ts视频链接，把ts文件全部下载下来，拼接到一起即可。我们可以通过<a href="https://m.qlchat.com/wechat/page/topic-simple-video?topicId=%E6%8B%BC%E6%8E%A5%E4%B8%8A%E5%AF%B9%E5%BA%94%E7%9A%84%E7%AB%A0%E8%8A%82id%E5%8D%B3%E5%8F%AF%E6%89%93%E5%BC%80%E6%89%80%E6%9C%89%E7%9A%84%E8%A7%86%E9%A2%91%E9%A1%B5%E9%9D%A2%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E8%8E%B7%E5%8F%96%E5%88%B0%E6%89%80%E6%9C%89%E7%9A%84m3u8%E9%93%BE%E6%8E%A5%E4%BA%86%E3%80%82">https://m.qlchat.com/wechat/page/topic-simple-video?topicId=拼接上对应的章节id即可打开所有的视频页面，也可以获取到所有的m3u8链接了。</a></p><p><img src="/2023/04/08/Crawl-Video-Audio-With-Python-And-Selenium/p12.png"></p><h4 id="提取音频链接"><a href="#提取音频链接" class="headerlink" title="提取音频链接"></a>提取音频链接</h4><p>音频要比视频简单得多，任意打开一个音频课，请求列表里可以看到mp3的请求链接，直接用下载下来就可以播放了。</p><p><img src="/2023/04/08/Crawl-Video-Audio-With-Python-And-Selenium/p13.png"></p><h3 id="0x04-自动化"><a href="#0x04-自动化" class="headerlink" title="0x04 自动化"></a>0x04 自动化</h3><p>分三步走：</p><ol><li>先通过getCourseList请求拿到所有的章节id</li><li>如果是视频，通过Python + Selenium模拟打开<a href="https://m.qlchat.com/wechat/page/topic-simple-video?topicId=id%EF%BC%9B%E5%A6%82%E6%9E%9C%E9%9F%B3%E9%A2%91%EF%BC%8C%E5%88%99%E6%8B%BC%E6%8E%A5%E9%93%BE%E6%8E%A5%E4%B8%BA%EF%BC%9A%5Bhttps://m.qlchat.com/topic/details-listening?topicId=id%5D(https://m.qlchat.com/topic/details-listening?topicId=2000019378323799)">https://m.qlchat.com/wechat/page/topic-simple-video?topicId=id；如果音频，则拼接链接为：[https://m.qlchat.com/topic/details-listening?topicId=id](https://m.qlchat.com/topic/details-listening?topicId=2000019378323799)</a></li><li>通过Python + Selenium模拟打开对应的页面，获取到页面的所有请求信息，过滤出相应的请求链接（m3u8&#x2F;mp3），然后去下载即可。</li></ol><h4 id="获取所有章节id"><a href="#获取所有章节id" class="headerlink" title="获取所有章节id"></a>获取所有章节id</h4><p><img src="/2023/04/08/Crawl-Video-Audio-With-Python-And-Selenium/p14.png"></p><p>通过Chrome开发者工具，把请求复制出来，如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;https://m.qlchat.com/api/wechat/transfer/h5/interact/getCourseList&quot;</span>, &#123;</span><br><span class="line">  <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;accept-language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9,en;q=0.8,zh-TW;q=0.7&quot;</span>,</span><br><span class="line">    <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;application/json;charset=UTF-8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sec-ch-ua&quot;</span>: <span class="string">&quot;\&quot;Google Chrome\&quot;;v=\&quot;111\&quot;, \&quot;Not(A:Brand\&quot;;v=\&quot;8\&quot;, \&quot;Chromium\&quot;;v=\&quot;111\&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sec-ch-ua-mobile&quot;</span>: <span class="string">&quot;?1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sec-ch-ua-platform&quot;</span>: <span class="string">&quot;\&quot;Android\&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sec-fetch-dest&quot;</span>: <span class="string">&quot;empty&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sec-fetch-mode&quot;</span>: <span class="string">&quot;cors&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sec-fetch-site&quot;</span>: <span class="string">&quot;same-origin&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;referrer&quot;</span>: <span class="string">&quot;https://m.qlchat.com/wechat/page/channel-intro?channelId=2000007225767060&quot;</span>,</span><br><span class="line">  <span class="string">&quot;referrerPolicy&quot;</span>: <span class="string">&quot;strict-origin-when-cross-origin&quot;</span>,</span><br><span class="line">  <span class="string">&quot;body&quot;</span>: <span class="string">&quot;&#123;\&quot;channelId\&quot;:\&quot;2000007225767060\&quot;,\&quot;sort\&quot;:\&quot;asc\&quot;,\&quot;page\&quot;:&#123;\&quot;page\&quot;:1,\&quot;size\&quot;:20&#125;&#125;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;method&quot;</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">  <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;cors&quot;</span>,</span><br><span class="line">  <span class="string">&quot;credentials&quot;</span>: <span class="string">&quot;include&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>里面有个关键信息，page可以控制分页，size默认是20，你当然也可以改成100或者其他数值。配合page字段，就可以把所有章节的信息抓出来了。当然也可以用copy as cURL，然后通过Python去请求cURL的命令，同样也可以把所有的章节信息抓到。<em><strong>获取章节信息是不需要登录的</strong></em>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">&#x27;https://m.qlchat.com/api/wechat/transfer/h5/interact/getCourseList&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;authority: m.qlchat.com&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;accept: */*&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;accept-language: zh-CN,zh;q=0.9,en;q=0.8,zh-TW;q=0.7&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;content-type: application/json;charset=UTF-8&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;dnt: 1&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;origin: https://m.qlchat.com&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;referer: https://m.qlchat.com/wechat/page/channel-intro?channelId=2000007225767060&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;sec-ch-ua: &quot;Google Chrome&quot;;v=&quot;111&quot;, &quot;Not(A:Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;111&quot;&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;sec-ch-ua-mobile: ?1&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;sec-ch-ua-platform: &quot;Android&quot;&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;sec-fetch-dest: empty&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;sec-fetch-mode: cors&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;sec-fetch-site: same-origin&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;user-agent: Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Mobile Safari/537.36&#x27;</span> \</span><br><span class="line">  --data-raw <span class="string">&#x27;&#123;&quot;channelId&quot;:&quot;2000007225767060&quot;,&quot;businessId&quot;:&quot;&quot;,&quot;liveId&quot;:&quot;2000007225766924&quot;,&quot;sort&quot;:&quot;asc&quot;,&quot;page&quot;:&#123;&quot;page&quot;:1,&quot;size&quot;:20&#125;&#125;&#x27;</span> \</span><br><span class="line">  --compressed</span><br></pre></td></tr></table></figure><h4 id="自动获取音视频链接"><a href="#自动获取音视频链接" class="headerlink" title="自动获取音视频链接"></a>自动获取音视频链接</h4><p>这是最关键的一步。因为如果手工打开网页一个一个去下载，那就太麻烦了。所幸有个很强大的工具叫Selenium，它是一个自动化web测试工具，可以模拟打开任何一个链接，并能记录下所有的日志信息，Chrome dev tools能拿到的日志，它也能拿到。废话不多说，直接上代码，<em><strong>先拿到登录cookie</strong></em>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">save_cookie</span>(<span class="params">url</span>):</span><br><span class="line">    chrome_options = Options()</span><br><span class="line">    <span class="comment"># headless 表示不会启动 Chrome 窗口，但是内存是有数据的    </span></span><br><span class="line">    <span class="comment"># chrome_options.add_argument(&#x27;--headless&#x27;)    </span></span><br><span class="line">    caps = &#123;</span><br><span class="line">        <span class="string">&#x27;goog:loggingPrefs&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;performance&#x27;</span>: <span class="string">&#x27;ALL&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    driver = webdriver.Chrome(desired_capabilities=caps, options=chrome_options)</span><br><span class="line">    <span class="comment"># 用浏览器打开 url，然后将cookie注入    </span></span><br><span class="line">    driver.get(url)</span><br><span class="line">    <span class="comment"># 停留30秒，等登录成功后，将cookie保存到文件中，下次直接用cookie登录    </span></span><br><span class="line">    time.sleep(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存cookie</span></span><br><span class="line">    cookies = driver.get_cookies()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;cookie.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(json.dumps(cookies))</span><br></pre></td></tr></table></figure><p>之后再通过Python+Selenium打开网页，自动带上Cookie就可以了。下方是获取音频链接的关键代码，得到章节id列表后，依次遍历，拼接URL：<a href="https://m.qlchat.com/topic/details-listening?topicId=2000019378323799">https://m.qlchat.com/topic/details-listening?topicId=章节id。 </a>即可获取所有的音频链接，视频也是同样的道理，这里就不再赘述了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">def get_mp3_url(url):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">        获取mp3下载链接</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    chrome_options = Options()</span><br><span class="line">    # headless 表示不会启动 Chrome 窗口，但是内存是有数据的    </span><br><span class="line">    chrome_options.add_argument(&#x27;--headless&#x27;)</span><br><span class="line">    # chrome_options.add_experimental_option(&#x27;w3c&#x27;, False)    </span><br><span class="line">    caps = &#123;</span><br><span class="line">        &#x27;goog:loggingPrefs&#x27;: &#123;</span><br><span class="line">            &#x27;performance&#x27;: &#x27;ALL&#x27;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    driver = webdriver.Chrome(desired_capabilities=caps, options=chrome_options)</span><br><span class="line">    # 用浏览器打开 url    </span><br><span class="line">    driver.get(url)</span><br><span class="line">    # 停留1秒，如果是第一次登录，可以改成30秒，等登录成功后，将cookie保存到文件中，下次直接用cookie登录    </span><br><span class="line">    time.sleep(1)</span><br><span class="line"></span><br><span class="line">    # 删除所有cookie信息    </span><br><span class="line">    driver.delete_all_cookies()</span><br><span class="line">    </span><br><span class="line">    # 把之前保存的cookie读出来</span><br><span class="line">    with open(&#x27;cookie.json&#x27;, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;) as f:</span><br><span class="line">    cookie_list = json.loads(f.read())</span><br><span class="line"></span><br><span class="line">    # 将cookie添加到当前 chrome 页面中    </span><br><span class="line">    for cookie in cookie_list:</span><br><span class="line">        driver.add_cookie(cookie)</span><br><span class="line"></span><br><span class="line">    # 重新打开 URL，此时的URL已经是登录后的了    </span><br><span class="line">    driver.get(url)</span><br><span class="line"></span><br><span class="line">    # 停留三秒，页面大概率已经加载完毕了    </span><br><span class="line">    time.sleep(3)</span><br><span class="line"></span><br><span class="line">    # 读取 Chrome 里的 Log 信息，筛选出我们需要的链接    </span><br><span class="line">    for log in driver.get_log(&#x27;performance&#x27;):</span><br><span class="line">        x = json.loads(log[&#x27;message&#x27;])[&#x27;message&#x27;]</span><br><span class="line">        if x[&quot;method&quot;] == &quot;Network.requestWillBeSent&quot;:</span><br><span class="line">            download_url = x[&quot;params&quot;][&quot;request&quot;][&quot;url&quot;]</span><br><span class="line">            if &quot;.mp3&quot; in download_url:</span><br><span class="line">                driver.close()</span><br><span class="line">                driver.quit()</span><br><span class="line">                return download_url</span><br><span class="line">        else:</span><br><span class="line">            pass    </span><br><span class="line">    driver.close()</span><br><span class="line">    driver.quit()</span><br><span class="line">    return &quot;&quot;</span><br></pre></td></tr></table></figure><p>经过上述操作，就可以把文件全部下载下来了。</p><p><img src="/2023/04/08/Crawl-Video-Audio-With-Python-And-Selenium/p15.png"></p><p>这里需要注意的是视频是ts文件，需要全部下载下来之后，再拼接起来。Mac上拼接ts文件不是什么难事，用下方命令可将ts文件拼接起来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> 1.ts 2.ts 3.ts 4.ts &gt; 001.ts</span><br></pre></td></tr></table></figure><p><img src="/2023/04/08/Crawl-Video-Audio-With-Python-And-Selenium/p16.png"></p><p>当然，如果想把ts文件转成mp3也是比较轻松的，直接用brew 安装好ffmpeg（brew install ffpmeg），然后执行如下指令即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单个 ts 文件转 mp3：</span></span><br><span class="line">ffmpeg -i source.ts -f mp3 target.mp3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量转 mp3</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> *.ts; <span class="keyword">do</span> <span class="built_in">echo</span><span class="string">&quot;<span class="variable">$&#123;i%.*&#125;</span>.mp3&quot;</span>; ffmpeg -i <span class="string">&quot;<span class="variable">$i</span>&quot;</span> <span class="string">&quot;<span class="variable">$&#123;i%.*&#125;</span>.mp3&quot;</span>;<span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="0x05-踩坑"><a href="#0x05-踩坑" class="headerlink" title="0x05 踩坑"></a>0x05 踩坑</h3><h4 id="错误1"><a href="#错误1" class="headerlink" title="错误1"></a>错误1</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python invalid argument: log type &#x27;performance&#x27; not found</span><br></pre></td></tr></table></figure><p>解决：把参数<font color="red">loggingPrefs</font>改成<font color="red">goog:loggingPrefs</font>即可。</p><p><a href="https://stackoverflow.com/questions/56507652/selenium-chrome-cant-see-browser-logs-invalidargumentexception">https://stackoverflow.com/questions/56507652/selenium-chrome-cant-see-browser-logs-invalidargumentexception</a></p><h4 id="错误2"><a href="#错误2" class="headerlink" title="错误2"></a>错误2</h4><p>一开始思路错了，想通过js去做爬虫，因为能够直接Chrome登录，没有cookie的问题。但是始终没法在js代码里获取到所有的请求链接，最终只能作罢。换Python模拟登录的方案。</p><h3 id="0x06-总结"><a href="#0x06-总结" class="headerlink" title="0x06 总结"></a>0x06 总结</h3><p><img src="/2023/04/08/Crawl-Video-Audio-With-Python-And-Selenium/p17.png"></p><p>经过一番折腾，终于把所有课程都下载下来了。这里面还是有不少坑的，比如音频文件链接请求返回206，不完整，需要改请求range参数，或者先发一次请求获取文件完整大小，再去分段下载；视频文件是ts文件，需要将所有的ts分片下载，然后拼接到一块等等。以及开发过程中的各种错误，都需要一点一点克服。</p><h3 id="0x07-参考"><a href="#0x07-参考" class="headerlink" title="0x07 参考"></a>0x07 参考</h3><ul><li><p><a href="https://blog.51cto.com/u_15060551/4393179">https://blog.51cto.com/u_15060551/4393179</a></p></li><li><p><a href="https://juejin.cn/post/6956430571157340196">https://juejin.cn/post/6956430571157340196</a></p></li><li><p><a href="https://www.runoob.com/js/js-chrome.html">https://www.runoob.com/js/js-chrome.html</a></p></li><li><p><a href="https://blog.csdn.net/qq_31772441/article/details/105826787">https://blog.csdn.net/qq_31772441/article/details/105826787</a></p></li><li><p><a href="https://github.com/nieheyong/blog/issues/1">https://github.com/nieheyong/blog/issues/1</a></p></li><li><p><a href="https://cnodejs.org/topic/5aa5293719b2e3db18959c96">https://cnodejs.org/topic/5aa5293719b2e3db18959c96</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020总结</title>
      <link href="/2020/12/31/2020-sumary/"/>
      <url>/2020/12/31/2020-sumary/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>坎坷的2020终于要过去了，不管是好是坏，都值得停下来反思一下这一年的得与失。</p><span id="more"></span><h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><ul><li>职级升到了T9，过程艰辛，结果不错</li><li>成为公司面试官，面试50+场，招到4人。角色的转变也开始让我思考，怎么样才算一个优秀的Android开发工程师？</li><li>作为新人导师，带新人的同时，逐渐总结形成自己的知识体系</li><li>沟通能力上有较大提升，做事情能从全局角度去考量，而不是局限于自己那一亩三分地</li></ul><p>好的地方：有较强的时间意识，每个时间点该交付什么东西都会和老大沟通，并按时、高质量交付</p><p>不好的地方：平时工作没有注意沉淀，撰写文档，导致很多新同学入职都抱怨没有文档</p><h3 id="投资"><a href="#投资" class="headerlink" title="投资"></a>投资</h3><p>今年可以说是投资上收获颇丰的一年，不是因为赚了很多钱，而是思想上、认知水平上有了较大的提升。今年对我影响最大的几本书：</p><ul><li>《彼得林奇的成功投资》，这本书让我对基金如何运作有了初步的了解，以及如何对公司进行估值，同时教你怎么去做投资决策。</li><li>《投资中最重要的事》，马克斯的这本书更注重的是心理层面的修炼。其中让我印象最深刻的观点是如果你的行为电话i常规性的，你很可能就会得到常规的结果—无论好坏，只有当你的行为是非常规的时候，你的表现才有可能是非常规的，而只有你的判断高人一等时，你的表现才会高于平均表现。这也是今年大跌中我果断抄底的信心来源之一。</li><li>《投资中最简单的事》，邱国鹭试图为投资者讲述那些投资中普遍的规律。里面的一个观点是大多数时候，市场是对的，而往往在牛市的初期和末期，只有少数人是对的，这个时候买入和卖出才有超额收益，学会”人弃我取、逆向投资”。</li><li>《文明、现代化、价值投资与中国》从宏观角度去看待投资，李录认为未来20年是中国的黄金时代，坚定做多中国，这让我有了更多的底气投入更多钱到核心资产中。</li></ul><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p>今年技术上看了不少的书，对程序的本质有了更深的了解。</p><ul><li>《程序员的自我修养-链接装载与库》这本书写得太好了，每个程序员都应该看的书。讲了程序如何编译、链接、执行。同时介绍了elf的内部结构以及so如何进行加载，符号如何重定向，最后还手动写了一个简易版的libc库。</li><li>《深入理解计算机系统》，程序员必读书籍，程序本质上就是一个长数组，通过不断从数组中读取指令去执行。从硬件角度去解释一个程序如何真正执行起来。</li><li>《操作系统的基本原理和实现》，学习了陈渝老师的操作系统课，配套有ucore的实验，虽然没有把实验做完，但是对操作系统如何进行多线程切换有了一定的了解（保存寄存器、线程上下文）、同时对锁在操作系统层面的实现也有了一定的了解（本质是基于硬件提供的原子指令TAS或者CAS）。</li><li>调研小程序引擎框架，了解小程序跨平台开发的基本原理。但是规划的基本的demo还没写完，这是今年技术上的一个遗憾。</li></ul><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p>今年看了很多纪录片，让我对生活有了更多感性的思考。</p><ul><li>《华尔街》讲述华尔街的历史，最初竟然是一堵墙。对钱就是债有了更深刻的理解。</li><li>《大国崛起》盘点了从大航海时代开始到如今的大国崛起之路，荷兰、葡萄牙、西班牙、英国、法国、德国，再到美国崛起，整个世界连为一体。看完之后，相信你能理解如今为什么欧洲、俄罗斯、美国、中国等都在积极探索外太空。</li><li>《超级工程》，讲述中国那些高难度的工程，比如港珠澳大桥、上海中心大厦等，看完后不禁感叹，我们国家真的是在变强大。</li><li>《河西走廊》纵观整个中国的版图，河西走廊北邻蒙古，西挨新疆，南靠西藏，这块战略要地一丢，大半个中国版图都不保，这也是汉武帝苦心耕耘，不惜花血本也要拿下的原因。</li><li>《创新中国》、《大国重器》祖国真的是在猥琐发育，很多技术成就已经走在世界前列。</li><li>《苏东坡》大爱苏东坡，活在当下，与民为乐这种精神值得我们学习。</li><li>《人生七年》人生能有几个七年，也许人的命运早就在7岁以前就已经决定了。</li><li>《城市梦》讲述摆摊小贩如何与城管斗智斗勇的故事，不赞同大爷的做法，感叹在大城市扎根何其不容易。</li><li>《成为巴菲特》十年如一日的工作和投入学习，其实还是要专注，做自己喜欢并且擅长的事情。</li><li>《航拍中国》了解祖国大好河山的纪录片。</li><li>《大明宫》可以说是世界上最辉煌的宫殿，代表了中国古代最高的建筑成就，可惜被烧了。</li><li>《十三邀》很好的思辨类节目，能够引起我们思考自身存在的意义。</li></ul><h3 id="展望未来"><a href="#展望未来" class="headerlink" title="展望未来"></a>展望未来</h3><p>2020，总的来说，收获不少。2021年整体方向主要有几个：</p><ul><li>把小程序引擎框架demo搭建起来，加深对小程序引擎的理解，同时学习js技术栈。</li><li>完成微信读书上的20本书阅读，并写评语。</li><li>多花点时间去思考未来，了解未来的趋势，不断调整自己的目标，随机应变。</li></ul><p>2021，加油！</p>]]></content>
      
      
      <categories>
          
          <category> Thinking </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thinking </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解Android的启动过程</title>
      <link href="/2020/05/19/Understand-Android-Boot-Process/"/>
      <url>/2020/05/19/Understand-Android-Boot-Process/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在上篇文章中我们大致介绍了关于Linux启动的过程，基本上都会经历几个流程：</p><ol><li>加电自检</li><li>启动bootloader</li><li>bootloader启动kernel</li></ol><p>kernel启动完之后，会执行第一个程序init，之后init进程会继续fork出许多系统核心进程来提供相应的服务。其中跟Android关系最密切的zygote进程也是由init进程直接fork出来，如下图所示：</p><p><img src="/2020/05/19/Understand-Android-Boot-Process/android_boot_flow_simple.png" alt="image"></p><p>之后再由zygote进程孵化出Android核心进程systemserver，Android很多核心服务如ActivityManagerService、WindowManagerService都是直接以线程的方式驻留在systemserver进程为app（客户端）提供服务，如下图所示：<br><img src="/2020/05/19/Understand-Android-Boot-Process/android_boot_flow.gif" alt="image"></p><p>从上面两张图中我们可以看到，Linux就是Android系统的基石，没有Linux提供的基础服务（内存管理、进程调度、文件系统等），Android就无从谈起。从这个意义上来说，Android运行在Linux的一个应用程序而已。当然，Android只是基于Linux，而不是Linux，Android基于Linux，创建了一套完全与Linux应用不一样的开发”语言”，让开发者可以使用Java就能做出有趣的应用，间接地降低了开发的门槛（C++因为内存泄露和野指针的问题饱受诟病）。这套”语言”里包含了很多概念比如Activity、Service、Broadcast、ContentProvider、Window、Surface、View等，后续我们会一一说明。今天我们先从代码角度来看Android的启动过程。本文源码基于Android 2.3.7_r1。</p><span id="more"></span><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><h4 id="zygote进程的创建"><a href="#zygote进程的创建" class="headerlink" title="zygote进程的创建"></a>zygote进程的创建</h4><p>init.rc的main，里面先解析rc文件，把service保存在一个list里，之后会调用service_start方法，用fork开启新的进程。然后有个死循环不停地poll事件，通过event和内核进行交互。</p><p>system&#x2F;core&#x2F;rootdir&#x2F;init.rc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">on early-init</span><br><span class="line">    start ueventd</span><br><span class="line"></span><br><span class="line">on init</span><br><span class="line"></span><br><span class="line">sysclktz 0</span><br><span class="line"></span><br><span class="line">loglevel 3</span><br><span class="line"></span><br><span class="line"># setup the global environment</span><br><span class="line">    export PATH /sbin:/vendor/bin:/system/sbin:/system/bin:/system/xbin</span><br><span class="line">    export LD_LIBRARY_PATH /vendor/lib:/system/lib</span><br><span class="line">    export ANDROID_BOOTLOGO 1</span><br><span class="line">    export ANDROID_ROOT /system</span><br><span class="line">    export ANDROID_ASSETS /system/app</span><br><span class="line">    export ANDROID_DATA /data</span><br><span class="line">    export EXTERNAL_STORAGE /mnt/sdcard</span><br><span class="line">    export ASEC_MOUNTPOINT /mnt/asec</span><br><span class="line">    export LOOP_MOUNTPOINT /mnt/obb</span><br><span class="line">    export BOOTCLASSPATH /system/framework/core.jar:/system/framework/bouncycastle.jar:/system/framework/ext.jar:/system/framework/framework.jar:/system/framework/android.policy.jar:/system/framework/services.jar:/system/framework/core-junit.jar</span><br><span class="line"></span><br><span class="line"># 省略部分源码</span><br><span class="line"></span><br><span class="line">on boot</span><br><span class="line"># basic network init</span><br><span class="line">    ifup lo</span><br><span class="line">    hostname localhost</span><br><span class="line">    domainname localdomain</span><br><span class="line"></span><br><span class="line"># 省略部分源码</span><br><span class="line">service ril-daemon /system/bin/rild</span><br><span class="line">    socket rild stream 660 root radio</span><br><span class="line">    socket rild-debug stream 660 radio system</span><br><span class="line">    user root</span><br><span class="line">    group radio cache inet misc audio sdcard_rw</span><br><span class="line"></span><br><span class="line">service zygote /system/bin/app_process -Xzygote /system/bin --zygote --start-system-server</span><br><span class="line">    socket zygote stream 666</span><br><span class="line">    onrestart write /sys/android_power/request_state wake</span><br><span class="line">    onrestart write /sys/power/state on</span><br><span class="line">    onrestart restart media</span><br><span class="line">    onrestart restart netd</span><br><span class="line"></span><br><span class="line">service media /system/bin/mediaserver</span><br><span class="line">    user media</span><br><span class="line">    group system audio camera graphics inet net_bt net_bt_admin net_raw</span><br><span class="line">    ioprio rt 4</span><br><span class="line"># 省略部分源码</span><br></pre></td></tr></table></figure><p>system&#x2F;core&#x2F;init&#x2F;init.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 启动一个service，是通过fork的方式启动的</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">service_start</span><span class="params">(<span class="keyword">struct</span> service *svc, <span class="type">const</span> <span class="type">char</span> *dynamic_args)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">s</span>;</span></span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    <span class="type">int</span> needs_console;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="comment">// 省略部分源码</span></span><br><span class="line">    NOTICE(<span class="string">&quot;starting &#x27;%s&#x27;\n&quot;</span>, svc-&gt;name);</span><br><span class="line"></span><br><span class="line">    pid = fork();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">socketinfo</span> *<span class="title">si</span>;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">svcenvinfo</span> *<span class="title">ei</span>;</span></span><br><span class="line">        <span class="type">char</span> tmp[<span class="number">32</span>];</span><br><span class="line">        <span class="type">int</span> fd, sz;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (properties_inited()) &#123;</span><br><span class="line">            get_property_workspace(&amp;fd, &amp;sz);</span><br><span class="line">            <span class="built_in">sprintf</span>(tmp, <span class="string">&quot;%d,%d&quot;</span>, dup(fd), sz);</span><br><span class="line">            add_environment(<span class="string">&quot;ANDROID_PROPERTY_WORKSPACE&quot;</span>, tmp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (ei = svc-&gt;envvars; ei; ei = ei-&gt;next)</span><br><span class="line">            add_environment(ei-&gt;name, ei-&gt;value);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (si = svc-&gt;sockets; si; si = si-&gt;next) &#123;</span><br><span class="line">            <span class="type">int</span> socket_type = (</span><br><span class="line">                    !<span class="built_in">strcmp</span>(si-&gt;type, <span class="string">&quot;stream&quot;</span>) ? SOCK_STREAM :</span><br><span class="line">                        (!<span class="built_in">strcmp</span>(si-&gt;type, <span class="string">&quot;dgram&quot;</span>) ? SOCK_DGRAM : SOCK_SEQPACKET));</span><br><span class="line">            <span class="type">int</span> s = create_socket(si-&gt;name, socket_type,</span><br><span class="line">                                  si-&gt;perm, si-&gt;uid, si-&gt;gid);</span><br><span class="line">            <span class="keyword">if</span> (s &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                publish_socket(si-&gt;name, s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (svc-&gt;ioprio_class != IoSchedClass_NONE) &#123;</span><br><span class="line">            <span class="keyword">if</span> (android_set_ioprio(getpid(), svc-&gt;ioprio_class, svc-&gt;ioprio_pri)) &#123;</span><br><span class="line">                ERROR(<span class="string">&quot;Failed to set pid %d ioprio = %d,%d: %s\n&quot;</span>,</span><br><span class="line">                      getpid(), svc-&gt;ioprio_class, svc-&gt;ioprio_pri, strerror(errno));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 省略部分源码</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ERROR(<span class="string">&quot;failed to start &#x27;%s&#x27;\n&quot;</span>, svc-&gt;name);</span><br><span class="line">        svc-&gt;pid = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    svc-&gt;time_started = gettime();</span><br><span class="line">    svc-&gt;pid = pid;</span><br><span class="line">    svc-&gt;flags |= SVC_RUNNING;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (properties_inited())</span><br><span class="line">        notify_service_state(svc-&gt;name, <span class="string">&quot;running&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> fd_count = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">ufds</span>[4];</span></span><br><span class="line">    <span class="type">char</span> *tmpdev;</span><br><span class="line">    <span class="type">char</span>* debuggable;</span><br><span class="line">    <span class="type">char</span> tmp[<span class="number">32</span>];</span><br><span class="line">    <span class="type">int</span> property_set_fd_init = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> signal_fd_init = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> keychord_fd_init = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(basename(argv[<span class="number">0</span>]), <span class="string">&quot;ueventd&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span> ueventd_main(argc, argv);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* clear the umask */</span></span><br><span class="line">    umask(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Get the basic filesystem setup we need put</span></span><br><span class="line"><span class="comment">         * together in the initramdisk on / and then we&#x27;ll</span></span><br><span class="line"><span class="comment">         * let the rc file figure out the rest.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    mkdir(<span class="string">&quot;/dev&quot;</span>, <span class="number">0755</span>);</span><br><span class="line">    mkdir(<span class="string">&quot;/proc&quot;</span>, <span class="number">0755</span>);</span><br><span class="line">    mkdir(<span class="string">&quot;/sys&quot;</span>, <span class="number">0755</span>);</span><br><span class="line"></span><br><span class="line">    mount(<span class="string">&quot;tmpfs&quot;</span>, <span class="string">&quot;/dev&quot;</span>, <span class="string">&quot;tmpfs&quot;</span>, <span class="number">0</span>, <span class="string">&quot;mode=0755&quot;</span>);</span><br><span class="line">    mkdir(<span class="string">&quot;/dev/pts&quot;</span>, <span class="number">0755</span>);</span><br><span class="line">    mkdir(<span class="string">&quot;/dev/socket&quot;</span>, <span class="number">0755</span>);</span><br><span class="line">    mount(<span class="string">&quot;devpts&quot;</span>, <span class="string">&quot;/dev/pts&quot;</span>, <span class="string">&quot;devpts&quot;</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    mount(<span class="string">&quot;proc&quot;</span>, <span class="string">&quot;/proc&quot;</span>, <span class="string">&quot;proc&quot;</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    mount(<span class="string">&quot;sysfs&quot;</span>, <span class="string">&quot;/sys&quot;</span>, <span class="string">&quot;sysfs&quot;</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* We must have some place other than / to create the</span></span><br><span class="line"><span class="comment">         * device nodes for kmsg and null, otherwise we won&#x27;t</span></span><br><span class="line"><span class="comment">         * be able to remount / read-only later on.</span></span><br><span class="line"><span class="comment">         * Now that tmpfs is mounted on /dev, we can actually</span></span><br><span class="line"><span class="comment">         * talk to the outside world.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    open_devnull_stdio();</span><br><span class="line">    log_init();</span><br><span class="line">    </span><br><span class="line">    INFO(<span class="string">&quot;reading config file\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这里开始解析init.rc文件，方法实现在同级目录的init_parser.c里</span></span><br><span class="line">    init_parse_config_file(<span class="string">&quot;/init.rc&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* pull the kernel commandline and ramdisk properties file in */</span></span><br><span class="line">    import_kernel_cmdline(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    get_hardware_name(hardware, &amp;revision);</span><br><span class="line">    <span class="built_in">snprintf</span>(tmp, <span class="keyword">sizeof</span>(tmp), <span class="string">&quot;/init.%s.rc&quot;</span>, hardware);</span><br><span class="line">    init_parse_config_file(tmp);</span><br><span class="line">    <span class="comment">// 省略部分源码</span></span><br><span class="line">    <span class="comment">/* execute all the boot actions to get us started */</span></span><br><span class="line">    action_for_each_trigger(<span class="string">&quot;early-boot&quot;</span>, action_add_queue_tail);</span><br><span class="line">    <span class="comment">// 这个阶段对应init.rc 里的 on boot，会把 zygote进程启动起来</span></span><br><span class="line">    action_for_each_trigger(<span class="string">&quot;boot&quot;</span>, action_add_queue_tail);</span><br><span class="line">    <span class="comment">/* run all property triggers based on current state of the properties */</span></span><br><span class="line">    queue_builtin_action(queue_property_triggers_action, <span class="string">&quot;queue_propety_triggers&quot;</span>);</span><br><span class="line">    <span class="comment">// 省略部分源码</span></span><br><span class="line">    <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">        <span class="type">int</span> nr, i, timeout = <span class="number">-1</span>;</span><br><span class="line">        <span class="comment">// 省略部分源码</span></span><br><span class="line">        nr = poll(ufds, fd_count, timeout);</span><br><span class="line">        <span class="keyword">if</span> (nr &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; fd_count; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ufds[i].revents == POLLIN) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ufds[i].fd == get_property_set_fd())</span><br><span class="line">                    handle_property_set_fd();</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ufds[i].fd == get_keychord_fd())</span><br><span class="line">                    handle_keychord();</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ufds[i].fd == get_signal_fd())</span><br><span class="line">                    handle_signal();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>init_parser.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">parse_config</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *fn, <span class="type">char</span> *s)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">parse_state</span> <span class="title">state</span>;</span></span><br><span class="line">    <span class="type">char</span> *args[INIT_PARSER_MAXARGS];</span><br><span class="line">    <span class="type">int</span> nargs;</span><br><span class="line"></span><br><span class="line">    nargs = <span class="number">0</span>;</span><br><span class="line">    state.filename = fn;</span><br><span class="line">    state.line = <span class="number">1</span>;</span><br><span class="line">    state.ptr = s;</span><br><span class="line">    state.nexttoken = <span class="number">0</span>;</span><br><span class="line">    state.parse_line = parse_line_no_op;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (next_token(&amp;state)) &#123;</span><br><span class="line">        <span class="keyword">case</span> T_EOF:</span><br><span class="line">            state.parse_line(&amp;state, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">case</span> T_NEWLINE:</span><br><span class="line">            <span class="keyword">if</span> (nargs) &#123;</span><br><span class="line">                <span class="type">int</span> kw = lookup_keyword(args[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">if</span> (kw_is(kw, SECTION)) &#123;</span><br><span class="line">                    state.parse_line(&amp;state, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                    <span class="comment">// 我们再看这里做了什么</span></span><br><span class="line">                    parse_new_section(&amp;state, kw, nargs, args);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    state.parse_line(&amp;state, nargs, args);</span><br><span class="line">                &#125;</span><br><span class="line">                nargs = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> T_TEXT:</span><br><span class="line">            <span class="keyword">if</span> (nargs &lt; INIT_PARSER_MAXARGS) &#123;</span><br><span class="line">                args[nargs++] = state.text;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">parse_new_section</span><span class="params">(<span class="keyword">struct</span> parse_state *state, <span class="type">int</span> kw,</span></span><br><span class="line"><span class="params">                       <span class="type">int</span> nargs, <span class="type">char</span> **args)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[ %s %s ]\n&quot;</span>, args[<span class="number">0</span>],</span><br><span class="line">           nargs &gt; <span class="number">1</span> ? args[<span class="number">1</span>] : <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">switch</span>(kw) &#123;</span><br><span class="line">    <span class="keyword">case</span> K_service:</span><br><span class="line">        <span class="comment">// 我们继续看parse_service做了什么</span></span><br><span class="line">        state-&gt;context = parse_service(state, nargs, args);</span><br><span class="line">        <span class="keyword">if</span> (state-&gt;context) &#123;</span><br><span class="line">            state-&gt;parse_line = parse_line_service;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> K_on:</span><br><span class="line">        state-&gt;context = parse_action(state, nargs, args);</span><br><span class="line">        <span class="keyword">if</span> (state-&gt;context) &#123;</span><br><span class="line">            state-&gt;parse_line = parse_line_action;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    state-&gt;parse_line = parse_line_no_op;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//其实很简单，就是把service解析出来，放到一个全局的service_list中</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">parse_service</span><span class="params">(<span class="keyword">struct</span> parse_state *state, <span class="type">int</span> nargs, <span class="type">char</span> **args)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">service</span> *<span class="title">svc</span>;</span></span><br><span class="line">    <span class="keyword">if</span> (nargs &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        parse_error(state, <span class="string">&quot;services must have a name and a program\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!valid_name(args[<span class="number">1</span>])) &#123;</span><br><span class="line">        parse_error(state, <span class="string">&quot;invalid service name &#x27;%s&#x27;\n&quot;</span>, args[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    svc = service_find_by_name(args[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (svc) &#123;</span><br><span class="line">        parse_error(state, <span class="string">&quot;ignored duplicate definition of service &#x27;%s&#x27;\n&quot;</span>, args[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    nargs -= <span class="number">2</span>;</span><br><span class="line">    svc = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span>(*svc) + <span class="keyword">sizeof</span>(<span class="type">char</span>*) * nargs);</span><br><span class="line">    <span class="keyword">if</span> (!svc) &#123;</span><br><span class="line">        parse_error(state, <span class="string">&quot;out of memory\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    svc-&gt;name = args[<span class="number">1</span>];</span><br><span class="line">    svc-&gt;classname = <span class="string">&quot;default&quot;</span>;</span><br><span class="line">    <span class="built_in">memcpy</span>(svc-&gt;args, args + <span class="number">2</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>*) * nargs);</span><br><span class="line">    svc-&gt;args[nargs] = <span class="number">0</span>;</span><br><span class="line">    svc-&gt;nargs = nargs;</span><br><span class="line">    svc-&gt;onrestart.name = <span class="string">&quot;onrestart&quot;</span>;</span><br><span class="line">    list_init(&amp;svc-&gt;onrestart.commands);</span><br><span class="line">    list_add_tail(&amp;service_list, &amp;svc-&gt;slist);</span><br><span class="line">    <span class="keyword">return</span> svc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过init_parser.c文件我们可以看到init.rc的service被放到了service_list中，那这些service什么时候被启动的呢？答案就在init.c文件的main函数里。执行到on boot阶段会把init.rc解析出来的服务全部启动起来。</p><p>init.c 的 main方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/* execute all the boot actions to get us started */</span><br><span class="line">action_for_each_trigger(&quot;early-boot&quot;, action_add_queue_tail);</span><br><span class="line">action_for_each_trigger(&quot;boot&quot;, action_add_queue_tail);</span><br><span class="line">/* run all property triggers based on current state of the properties */</span><br><span class="line">queue_builtin_action(queue_property_triggers_action, &quot;queue_propety_triggers&quot;);</span><br></pre></td></tr></table></figure><p>从init.rc文件我们可以看到，Android系统中很重要的几个服务zygote, servicemanager, media都是从init进程fork出来的，它们都以进程的方式存在。</p><h4 id="从C世界进入到C-世界"><a href="#从C世界进入到C-世界" class="headerlink" title="从C世界进入到C++世界"></a>从C世界进入到C++世界</h4><p>上面我们讲到init进程通过fork调用启动了zygote进程，最终是通过execve函数启动了system&#x2F;bin&#x2F;app_process程序（启动之后会通过pctrl将自己进程名改成zygote）。<br>而<strong>app_process</strong> 程序所对应的文件入口是 <strong>frameworks&#x2F;base&#x2F;cmd&#x2F;app_process&#x2F;app_main.cpp</strong>，接下里我们开始分析app_main.cpp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> * Main entry of app process.</span><br><span class="line"> * </span><br><span class="line"> * Starts the interpreted runtime, then starts up the application.</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">#define LOG_TAG &quot;appproc&quot;</span><br><span class="line"></span><br><span class="line">#include &lt;binder/IPCThreadState.h&gt;</span><br><span class="line">#include &lt;binder/ProcessState.h&gt;</span><br><span class="line">#include &lt;utils/Log.h&gt;</span><br><span class="line">#include &lt;cutils/process_name.h&gt;</span><br><span class="line">#include &lt;cutils/memory.h&gt;</span><br><span class="line">#include &lt;android_runtime/AndroidRuntime.h&gt;</span><br><span class="line"></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line"></span><br><span class="line">namespace android &#123;</span><br><span class="line"></span><br><span class="line">void app_usage()</span><br><span class="line">&#123;</span><br><span class="line">    fprintf(stderr,</span><br><span class="line">        &quot;Usage: app_process [java-options] cmd-dir start-class-name [options]\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">status_t app_init(const char* className, int argc, const char* const argv[])</span><br><span class="line">&#123;</span><br><span class="line">    LOGV(&quot;Entered app_init()!\n&quot;);</span><br><span class="line"></span><br><span class="line">    AndroidRuntime* jr = AndroidRuntime::getRuntime();</span><br><span class="line">    // 核心逻辑，加载了com.android.internal.os.ZygoteInit类的main方法</span><br><span class="line">    jr-&gt;callMain(className, argc, argv);</span><br><span class="line">    </span><br><span class="line">    LOGV(&quot;Exiting app_init()!\n&quot;);</span><br><span class="line">    return NO_ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class AppRuntime : public AndroidRuntime</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    AppRuntime()</span><br><span class="line">        : mParentDir(NULL)</span><br><span class="line">        , mClassName(NULL)</span><br><span class="line">        , mArgC(0)</span><br><span class="line">        , mArgV(NULL)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //省略部分源码</span><br><span class="line">    virtual void onStarted()</span><br><span class="line">    &#123;</span><br><span class="line">        sp&lt;ProcessState&gt; proc = ProcessState::self();</span><br><span class="line">        if (proc-&gt;supportsProcesses()) &#123;</span><br><span class="line">            LOGV(&quot;App process: starting thread pool.\n&quot;);</span><br><span class="line">            proc-&gt;startThreadPool();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //核心逻辑，这里的mClassName就是 com.android.internal.os.ZygoteInit</span><br><span class="line">        app_init(mClassName, mArgC, mArgV);</span><br><span class="line"></span><br><span class="line">        if (ProcessState::self()-&gt;supportsProcesses()) &#123;</span><br><span class="line">            IPCThreadState::self()-&gt;stopProcess();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //省略部分源码</span><br><span class="line">    const char* mParentDir;</span><br><span class="line">    const char* mClassName;</span><br><span class="line">    int mArgC;</span><br><span class="line">    const char* const* mArgV;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">using namespace android;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * sets argv0 to as much of newArgv0 as will fit</span><br><span class="line"> */</span><br><span class="line">static void setArgv0(const char *argv0, const char *newArgv0)</span><br><span class="line">&#123;</span><br><span class="line">    strlcpy(const_cast&lt;char *&gt;(argv0), newArgv0, strlen(argv0));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, const char* const argv[])</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    // 省略部分源码</span><br><span class="line">    AppRuntime runtime;</span><br><span class="line">    const char *arg;</span><br><span class="line">    const char *argv0;</span><br><span class="line">    // Everything up to &#x27;--&#x27; or first non &#x27;-&#x27; arg goes to the vm</span><br><span class="line">    int i = runtime.addVmArguments(argc, argv);</span><br><span class="line">    // Next arg is startup classname or &quot;--zygote&quot;</span><br><span class="line">    if (i &lt; argc) &#123;</span><br><span class="line">        arg = argv[i++];</span><br><span class="line">        if (0 == strcmp(&quot;--zygote&quot;, arg)) &#123;</span><br><span class="line">            bool startSystemServer = (i &lt; argc) ? </span><br><span class="line">                    strcmp(argv[i], &quot;--start-system-server&quot;) == 0 : false;</span><br><span class="line">            setArgv0(argv0, &quot;zygote&quot;);</span><br><span class="line">            </span><br><span class="line">            //将进程名设置成zygote</span><br><span class="line">            set_process_name(&quot;zygote&quot;);</span><br><span class="line">            </span><br><span class="line">            // 核心逻辑，开始调用了ZygoteInit类方法，会走到AppRuntime.onStarted</span><br><span class="line">            runtime.start(&quot;com.android.internal.os.ZygoteInit&quot;,</span><br><span class="line">                startSystemServer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    //省略部分源码</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从代码中我们可以清楚地看到main方法里直接调用runtime.start方法去启动Java核心类ZygoteInit，然后再继续调用ZygoteInit的main方法。于是程序便由C++世界转向了Java世界。</p><h4 id="从C-到Java世界"><a href="#从C-到Java世界" class="headerlink" title="从C++到Java世界"></a>从C++到Java世界</h4><p>你可能会好奇，runtime.start方法到底做了什么就能够让程序顺利进入Java世界了？接下来我们继续分析runtime.start方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> * Start the Android runtime.  This involves starting the virtual machine</span><br><span class="line"> * and calling the &quot;static void main(String[] args)&quot; method in the class</span><br><span class="line"> * named by &quot;className&quot;.</span><br><span class="line"> */</span><br><span class="line">void AndroidRuntime::start(const char* className, const bool startSystemServer)</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    // 省略部分逻辑</span><br><span class="line">    // 核心逻辑第一步：启动VM虚拟机</span><br><span class="line">    /* start the virtual machine */</span><br><span class="line">    if (startVm(&amp;mJavaVM, &amp;env) != 0)</span><br><span class="line">        goto bail;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * Register android functions.</span><br><span class="line">     */</span><br><span class="line">    // 核心逻辑第二步：为很多Android中的Java类注册相应的jni方法</span><br><span class="line">    if (startReg(env) &lt; 0) &#123;</span><br><span class="line">        LOGE(&quot;Unable to register all android natives\n&quot;);</span><br><span class="line">        goto bail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * We want to call main() with a String array with arguments in it.</span><br><span class="line">     * At present we only have one argument, the class name.  Create an</span><br><span class="line">     * array to hold it.</span><br><span class="line">     */</span><br><span class="line">    jclass stringClass;</span><br><span class="line">    jobjectArray strArray;</span><br><span class="line">    jstring classNameStr;</span><br><span class="line">    jstring startSystemServerStr;</span><br><span class="line"></span><br><span class="line">    // 核心逻辑第三步：已经创建好了env，就可以通过env来加载Java类了</span><br><span class="line">    stringClass = env-&gt;FindClass(&quot;java/lang/String&quot;);</span><br><span class="line">    assert(stringClass != NULL);</span><br><span class="line">    strArray = env-&gt;NewObjectArray(2, stringClass, NULL);</span><br><span class="line">    assert(strArray != NULL);</span><br><span class="line">    classNameStr = env-&gt;NewStringUTF(className);</span><br><span class="line">    assert(classNameStr != NULL);</span><br><span class="line">    env-&gt;SetObjectArrayElement(strArray, 0, classNameStr);</span><br><span class="line">    startSystemServerStr = env-&gt;NewStringUTF(startSystemServer ? </span><br><span class="line">                                                 &quot;true&quot; : &quot;false&quot;);</span><br><span class="line">    env-&gt;SetObjectArrayElement(strArray, 1, startSystemServerStr);</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * Start VM.  This thread becomes the main thread of the VM, and will</span><br><span class="line">     * not return until the VM exits.</span><br><span class="line">     */</span><br><span class="line">    jclass startClass;</span><br><span class="line">    jmethodID startMeth;</span><br><span class="line"></span><br><span class="line">    slashClassName = strdup(className);</span><br><span class="line">    for (cp = slashClassName; *cp != &#x27;\0&#x27;; cp++)</span><br><span class="line">        if (*cp == &#x27;.&#x27;)</span><br><span class="line">            *cp = &#x27;/&#x27;;</span><br><span class="line"></span><br><span class="line">    startClass = env-&gt;FindClass(slashClassName);</span><br><span class="line">    if (startClass == NULL) &#123;</span><br><span class="line">        LOGE(&quot;JavaVM unable to locate class &#x27;%s&#x27;\n&quot;, slashClassName);</span><br><span class="line">        /* keep going */</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        startMeth = env-&gt;GetStaticMethodID(startClass, &quot;main&quot;,</span><br><span class="line">            &quot;([Ljava/lang/String;)V&quot;);</span><br><span class="line">        if (startMeth == NULL) &#123;</span><br><span class="line">            LOGE(&quot;JavaVM unable to find main() in &#x27;%s&#x27;\n&quot;, className);</span><br><span class="line">            /* keep going */</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            env-&gt;CallStaticVoidMethod(startClass, startMeth, strArray);</span><br><span class="line"></span><br><span class="line">#if 0</span><br><span class="line">            if (env-&gt;ExceptionCheck())</span><br><span class="line">                threadExitUncaughtException(env);</span><br><span class="line">#endif</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //省略部分源码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们发现start方法核心逻辑主要有两步：startVM和startReg，之后就可以开始调用class类的main方法了。这里有个疑惑点：就是start方法本身也调用了一次main方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">startMeth = env-&gt;GetStaticMethodID(startClass, &quot;main&quot;,</span><br><span class="line">            &quot;([Ljava/lang/String;)V&quot;);</span><br></pre></td></tr></table></figure><p>而在我们之前分析的AppRuntime.onStarted()方法里也调用了一次main方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">status_t app_init(const char* className, int argc, const char* const argv[])</span><br><span class="line">&#123;</span><br><span class="line">    LOGV(&quot;Entered app_init()!\n&quot;);</span><br><span class="line"></span><br><span class="line">    AndroidRuntime* jr = AndroidRuntime::getRuntime();</span><br><span class="line">    // 核心逻辑，加载了com.android.internal.os.ZygoteInit类的main方法</span><br><span class="line">    jr-&gt;callMain(className, argc, argv);</span><br><span class="line">    </span><br><span class="line">    LOGV(&quot;Exiting app_init()!\n&quot;);</span><br><span class="line">    return NO_ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到底是哪个先调用呢？会不会调用两次呢？留给你思考。调用了ZygoteInit的main方法之后，程序便由C++世界转换到了Java世界！</p><h4 id="ZygoteInit-main-方法分析"><a href="#ZygoteInit-main-方法分析" class="headerlink" title="ZygoteInit.main 方法分析"></a>ZygoteInit.main 方法分析</h4><p>ZygoteInit.main方法开起来很简单，但是做的事情可不简单。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String argv[])</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        VMRuntime.getRuntime().setMinimumHeapSize(<span class="number">5</span> * <span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start profiling the zygote initialization.</span></span><br><span class="line">        SamplingProfilerIntegration.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 核心步骤1：创建一个socket</span></span><br><span class="line">        registerZygoteSocket();</span><br><span class="line">        EventLog.writeEvent(LOG_BOOT_PROGRESS_PRELOAD_START,</span><br><span class="line">            SystemClock.uptimeMillis());</span><br><span class="line">            </span><br><span class="line">        <span class="comment">// 核心步骤2：预加载Java类，主要是Framework.jar中的类，是通过Class.forName()的方式预加载的</span></span><br><span class="line">        preloadClasses();</span><br><span class="line">        <span class="comment">//cacheRegisterMaps();</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 核心步骤3：预加载资源文件包括R.string.xxx/R.color.xxx等，这样我们才能在应用程序中用到Android的资源文件</span></span><br><span class="line">        preloadResources();</span><br><span class="line">        EventLog.writeEvent(LOG_BOOT_PROGRESS_PRELOAD_END,</span><br><span class="line">            SystemClock.uptimeMillis());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Finish profiling the zygote initialization.</span></span><br><span class="line">        SamplingProfilerIntegration.writeZygoteSnapshot();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do an initial gc to clean up after startup</span></span><br><span class="line">        gc();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If requested, start system server directly from Zygote</span></span><br><span class="line">        <span class="keyword">if</span> (argv.length != <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(argv[<span class="number">0</span>] + USAGE_STRING);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (argv[<span class="number">1</span>].equals(<span class="string">&quot;true&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// 核心步骤4：启动SystemServer，有了这个，我们调用Context.getSystemService才能正常功能</span></span><br><span class="line">            startSystemServer();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!argv[<span class="number">1</span>].equals(<span class="string">&quot;false&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(argv[<span class="number">0</span>] + USAGE_STRING);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Log.i(TAG, <span class="string">&quot;Accepting command socket connections&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ZYGOTE_FORK_MODE) &#123;</span><br><span class="line">            runForkMode();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 核心步骤5：等待新进程创建，每当一个新app启动时，需要和Zygote进程通过socket进行交互</span></span><br><span class="line">            runSelectLoopMode();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        closeServerSocket();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (MethodAndArgsCaller caller) &#123;</span><br><span class="line">        caller.run();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;Zygote died with exception&quot;</span>, ex);</span><br><span class="line">        closeServerSocket();</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了预加载Class文件之外，还预加载了Android的资源，因为客户端都是从zygote进程fork出来的，所以客户端进程可以轻松地获取到对应的Android资源和预加载的类，从而减少客户端启动时间，这点在设计上很有想法。在main函数中，还启动了SystemServer进程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Finish remaining work for the newly forked system server process.</span><br><span class="line"> */</span><br><span class="line">private static void handleSystemServerProcess(</span><br><span class="line">        ZygoteConnection.Arguments parsedArgs)</span><br><span class="line">        throws ZygoteInit.MethodAndArgsCaller &#123;</span><br><span class="line"></span><br><span class="line">    closeServerSocket();</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * Pass the remaining arguments to SystemServer.</span><br><span class="line">     * &quot;--nice-name=system_server com.android.server.SystemServer&quot;</span><br><span class="line">     */</span><br><span class="line">    RuntimeInit.zygoteInit(parsedArgs.remainingArgs);</span><br><span class="line">    /* should never reach here */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Prepare the arguments and fork for the system server process.</span><br><span class="line"> */</span><br><span class="line">private static boolean startSystemServer()</span><br><span class="line">        throws MethodAndArgsCaller, RuntimeException &#123;</span><br><span class="line">    /* Hardcoded command line to start the system server */</span><br><span class="line">    String args[] = &#123;</span><br><span class="line">        &quot;--setuid=1000&quot;,</span><br><span class="line">        &quot;--setgid=1000&quot;,</span><br><span class="line">        &quot;--setgroups=1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1018,3001,3002,3003&quot;,</span><br><span class="line">        &quot;--capabilities=130104352,130104352&quot;,</span><br><span class="line">        &quot;--runtime-init&quot;,</span><br><span class="line">        &quot;--nice-name=system_server&quot;,</span><br><span class="line">        &quot;com.android.server.SystemServer&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">    ZygoteConnection.Arguments parsedArgs = null;</span><br><span class="line"></span><br><span class="line">    int pid;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        parsedArgs = new ZygoteConnection.Arguments(args);</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">         * Enable debugging of the system process if *either* the command line flags</span><br><span class="line">         * indicate it should be debuggable or the ro.debuggable system property</span><br><span class="line">         * is set to &quot;1&quot;</span><br><span class="line">         */</span><br><span class="line">        int debugFlags = parsedArgs.debugFlags;</span><br><span class="line">        if (&quot;1&quot;.equals(SystemProperties.get(&quot;ro.debuggable&quot;)))</span><br><span class="line">            debugFlags |= Zygote.DEBUG_ENABLE_DEBUGGER;</span><br><span class="line"></span><br><span class="line">        /* Request to fork the system server process */</span><br><span class="line">        pid = Zygote.forkSystemServer(</span><br><span class="line">                parsedArgs.uid, parsedArgs.gid,</span><br><span class="line">                parsedArgs.gids, debugFlags, null,</span><br><span class="line">                parsedArgs.permittedCapabilities,</span><br><span class="line">                parsedArgs.effectiveCapabilities);</span><br><span class="line">    &#125; catch (IllegalArgumentException ex) &#123;</span><br><span class="line">        throw new RuntimeException(ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* For child process */</span><br><span class="line">    if (pid == 0) &#123;</span><br><span class="line">        handleSystemServerProcess(parsedArgs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>zygote进程fork出了system_server进程，system_server进程先把自己的soeckt关掉，因为它不负责接收socket消息启动新应用。然后又调用了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RuntimeInit.zygoteInit(parsedArgs.remainingArgs);</span><br></pre></td></tr></table></figure><p>注意：这里调用的zygoteInit其实已经在SystemServer进程里了。我们再继续看zygoteInit方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public static final void zygoteInit(String[] argv)</span><br><span class="line">        throws ZygoteInit.MethodAndArgsCaller &#123;</span><br><span class="line">   </span><br><span class="line">    // 省略部分代码    </span><br><span class="line">    // Remaining arguments are passed to the start class&#x27;s static main</span><br><span class="line"></span><br><span class="line">    //注意：我们传进来的是com.android.server.SystemServer</span><br><span class="line">    String startClass = argv[curArg++];</span><br><span class="line">    String[] startArgs = new String[argv.length - curArg];</span><br><span class="line"></span><br><span class="line">    System.arraycopy(argv, curArg, startArgs, 0, startArgs.length);</span><br><span class="line">    invokeStaticMain(startClass, startArgs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码我们可以看到调用了SystemServer的main方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    // 省略部分代码</span><br><span class="line">    System.loadLibrary(&quot;android_servers&quot;);</span><br><span class="line">    init1(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SystemServer.main代码也十分简单，就是加载了一下libandroid_servers.so库，其对应代码放在frameworks&#x2F;base&#x2F;services&#x2F;jni目录下，然后我们看init1，其实是Native调用，代码在<strong>com_android_server_SystemServer.cpp</strong>里</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">namespace android &#123;</span><br><span class="line"></span><br><span class="line">extern &quot;C&quot; int system_init();</span><br><span class="line"></span><br><span class="line">static void android_server_SystemServer_init1(JNIEnv* env, jobject clazz)</span><br><span class="line">&#123;</span><br><span class="line">    system_init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * JNI registration.</span><br><span class="line"> */</span><br><span class="line">static JNINativeMethod gMethods[] = &#123;</span><br><span class="line">    /* name, signature, funcPtr */</span><br><span class="line">    &#123; &quot;init1&quot;, &quot;([Ljava/lang/String;)V&quot;, (void*) android_server_SystemServer_init1 &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int register_android_server_SystemServer(JNIEnv* env)</span><br><span class="line">&#123;</span><br><span class="line">    return jniRegisterNativeMethods(env, &quot;com/android/server/SystemServer&quot;,</span><br><span class="line">            gMethods, NELEM(gMethods));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;; // namespace android</span><br></pre></td></tr></table></figure><p>绕了一圈，继续调用system_init，代码在frameworks&#x2F;base&#x2F;cmds&#x2F;system_server&#x2F;library&#x2F;system_init.cpp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">extern &quot;C&quot; status_t system_init()</span><br><span class="line">&#123;</span><br><span class="line">    LOGI(&quot;Entered system_init()&quot;);</span><br><span class="line">    </span><br><span class="line">    sp&lt;ProcessState&gt; proc(ProcessState::self());</span><br><span class="line">    </span><br><span class="line">    sp&lt;IServiceManager&gt; sm = defaultServiceManager();</span><br><span class="line">    LOGI(&quot;ServiceManager: %p\n&quot;, sm.get());</span><br><span class="line">    //省略部分代码</span><br><span class="line">    AndroidRuntime* runtime = AndroidRuntime::getRuntime();</span><br><span class="line"></span><br><span class="line">    LOGI(&quot;System server: starting Android services.\n&quot;);</span><br><span class="line">    runtime-&gt;callStatic(&quot;com/android/server/SystemServer&quot;, &quot;init2&quot;);</span><br><span class="line">        </span><br><span class="line">    // If running in our own process, just go into the thread</span><br><span class="line">    // pool.  Otherwise, call the initialization finished</span><br><span class="line">    // func to let this process continue its initilization.</span><br><span class="line">    if (proc-&gt;supportsProcesses()) &#123;</span><br><span class="line">        LOGI(&quot;System server: entering thread pool.\n&quot;);</span><br><span class="line">        ProcessState::self()-&gt;startThreadPool();</span><br><span class="line">        IPCThreadState::self()-&gt;joinThreadPool();</span><br><span class="line">        LOGI(&quot;System server: exiting thread pool.\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return NO_ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现绕了一圈，又调回来了SystemServer的init2方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static final void init2() &#123;</span><br><span class="line">    Slog.i(TAG, &quot;Entered the Android system server!&quot;);</span><br><span class="line">    Thread thr = new ServerThread();</span><br><span class="line">    thr.setName(&quot;android.server.ServerThread&quot;);</span><br><span class="line">    thr.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码虽短，确实系统服务的核心，在这个ServerThread里，初始化了很多系统服务，我们来仔细看看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_SYSTEM_RUN,</span><br><span class="line">            SystemClock.uptimeMillis());</span><br><span class="line"></span><br><span class="line">        Looper.prepare();</span><br><span class="line"></span><br><span class="line">        // 省略部分代码</span><br><span class="line">        LightsService lights = null;</span><br><span class="line">        PowerManagerService power = null;</span><br><span class="line">        BatteryService battery = null;</span><br><span class="line">        ConnectivityService connectivity = null;</span><br><span class="line">        IPackageManager pm = null;</span><br><span class="line">        Context context = null;</span><br><span class="line">        WindowManagerService wm = null;</span><br><span class="line">        BluetoothService bluetooth = null;</span><br><span class="line">        BluetoothA2dpService bluetoothA2dp = null;</span><br><span class="line">        HeadsetObserver headset = null;</span><br><span class="line">        DockObserver dock = null;</span><br><span class="line">        UsbService usb = null;</span><br><span class="line">        UiModeManagerService uiMode = null;</span><br><span class="line">        RecognitionManagerService recognition = null;</span><br><span class="line">        ThrottleService throttle = null;</span><br><span class="line"></span><br><span class="line">        // Critical services...</span><br><span class="line">        try &#123;</span><br><span class="line">            Slog.i(TAG, &quot;Entropy Service&quot;);</span><br><span class="line">            ServiceManager.addService(&quot;entropy&quot;, new EntropyService());</span><br><span class="line"></span><br><span class="line">            Slog.i(TAG, &quot;Power Manager&quot;);</span><br><span class="line">            power = new PowerManagerService();</span><br><span class="line">            ServiceManager.addService(Context.POWER_SERVICE, power);</span><br><span class="line"></span><br><span class="line">            Slog.i(TAG, &quot;Activity Manager&quot;);</span><br><span class="line">            context = ActivityManagerService.main(factoryTest);</span><br><span class="line"></span><br><span class="line">            Slog.i(TAG, &quot;Telephony Registry&quot;);</span><br><span class="line">            ServiceManager.addService(&quot;telephony.registry&quot;, new TelephonyRegistry(context));</span><br><span class="line"></span><br><span class="line">            AttributeCache.init(context);</span><br><span class="line"></span><br><span class="line">            Slog.i(TAG, &quot;Package Manager&quot;);</span><br><span class="line">            pm = PackageManagerService.main(context,</span><br><span class="line">                    factoryTest != SystemServer.FACTORY_TEST_OFF);</span><br><span class="line"></span><br><span class="line">            ActivityManagerService.setSystemProcess();</span><br><span class="line"></span><br><span class="line">            mContentResolver = context.getContentResolver();</span><br><span class="line"></span><br><span class="line">            // The AccountManager must come before the ContentService</span><br><span class="line">            try &#123;</span><br><span class="line">                Slog.i(TAG, &quot;Account Manager&quot;);</span><br><span class="line">                ServiceManager.addService(Context.ACCOUNT_SERVICE,</span><br><span class="line">                        new AccountManagerService(context));</span><br><span class="line">            &#125; catch (Throwable e) &#123;</span><br><span class="line">                Slog.e(TAG, &quot;Failure starting Account Manager&quot;, e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Slog.i(TAG, &quot;Content Manager&quot;);</span><br><span class="line">            ContentService.main(context,</span><br><span class="line">                    factoryTest == SystemServer.FACTORY_TEST_LOW_LEVEL);</span><br><span class="line"></span><br><span class="line">            Slog.i(TAG, &quot;System Content Providers&quot;);</span><br><span class="line">            ActivityManagerService.installSystemProviders();</span><br><span class="line"></span><br><span class="line">            Slog.i(TAG, &quot;Battery Service&quot;);</span><br><span class="line">            battery = new BatteryService(context);</span><br><span class="line">            ServiceManager.addService(&quot;battery&quot;, battery);</span><br><span class="line"></span><br><span class="line">            Slog.i(TAG, &quot;Lights Service&quot;);</span><br><span class="line">            lights = new LightsService(context);</span><br><span class="line"></span><br><span class="line">            Slog.i(TAG, &quot;Vibrator Service&quot;);</span><br><span class="line">            ServiceManager.addService(&quot;vibrator&quot;, new VibratorService(context));</span><br><span class="line"></span><br><span class="line">            // only initialize the power service after we have started the</span><br><span class="line">            // lights service, content providers and the battery service.</span><br><span class="line">            power.init(context, lights, ActivityManagerService.getDefault(), battery);</span><br><span class="line"></span><br><span class="line">            Slog.i(TAG, &quot;Alarm Manager&quot;);</span><br><span class="line">            AlarmManagerService alarm = new AlarmManagerService(context);</span><br><span class="line">            ServiceManager.addService(Context.ALARM_SERVICE, alarm);</span><br><span class="line"></span><br><span class="line">            Slog.i(TAG, &quot;Init Watchdog&quot;);</span><br><span class="line">            Watchdog.getInstance().init(context, battery, power, alarm,</span><br><span class="line">                    ActivityManagerService.self());</span><br><span class="line"></span><br><span class="line">            Slog.i(TAG, &quot;Window Manager&quot;);</span><br><span class="line">            wm = WindowManagerService.main(context, power,</span><br><span class="line">                    factoryTest != SystemServer.FACTORY_TEST_LOW_LEVEL);</span><br><span class="line">            ServiceManager.addService(Context.WINDOW_SERVICE, wm);</span><br><span class="line"></span><br><span class="line">            ((ActivityManagerService)ServiceManager.getService(&quot;activity&quot;))</span><br><span class="line">                    .setWindowManager(wm);</span><br><span class="line"></span><br><span class="line">            // 省略部分代码</span><br><span class="line"></span><br><span class="line">        &#125; catch (RuntimeException e) &#123;</span><br><span class="line">            Slog.e(&quot;System&quot;, &quot;Failure starting core service&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        DevicePolicyManagerService devicePolicy = null;</span><br><span class="line">        StatusBarManagerService statusBar = null;</span><br><span class="line">        InputMethodManagerService imm = null;</span><br><span class="line">        AppWidgetService appWidget = null;</span><br><span class="line">        NotificationManagerService notification = null;</span><br><span class="line">        WallpaperManagerService wallpaper = null;</span><br><span class="line">        LocationManagerService location = null;</span><br><span class="line"></span><br><span class="line">       //省略部分代码</span><br><span class="line"></span><br><span class="line">        Looper.loop();</span><br><span class="line">        Slog.d(TAG, &quot;System ServerThread is exiting!&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>基本上你能想到的重要服务包括ActivityManagerService、WindowManagerService、PowerManagerService、PackageManagerService、BatteryService等服务都会在这里初始化，并且通过binder向servicemanager进程注册，这样客户端就能通过binder获取到这些服务啦。那么一个客户端程序又是如何启动的呢？</p><h4 id="客户端启动"><a href="#客户端启动" class="headerlink" title="客户端启动"></a>客户端启动</h4><p>我们知道Context.startActivity最终都会调用到ActivityManagerService来处理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">private final void startProcessLocked(ProcessRecord app,</span><br><span class="line">        String hostingType, String hostingNameStr) &#123;</span><br><span class="line">    </span><br><span class="line">    // 省略部分代码</span><br><span class="line">    try &#123;</span><br><span class="line">        // 省略部分代码</span><br><span class="line">        // 注意我们传进来的类是:ActivityThread</span><br><span class="line">        int pid = Process.start(&quot;android.app.ActivityThread&quot;,</span><br><span class="line">                mSimpleProcessManagement ? app.processName : null, uid, uid,</span><br><span class="line">                gids, debugFlags, null);</span><br><span class="line">        // 省略部分代码</span><br><span class="line">        </span><br><span class="line">    &#125; catch (RuntimeException e) &#123;</span><br><span class="line">        // XXX do better error recovery.</span><br><span class="line">        app.pid = 0;</span><br><span class="line">        Slog.e(TAG, &quot;Failure starting process &quot; + app.processName, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续看android.os.Process.start方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">public static final int start(final String processClass,</span><br><span class="line">                                  final String niceName,</span><br><span class="line">                                  int uid, int gid, int[] gids,</span><br><span class="line">                                  int debugFlags,</span><br><span class="line">                                  String[] zygoteArgs)&#123;</span><br><span class="line">        //去掉部分代码</span><br><span class="line">        return startViaZygote(processClass, niceName, uid, gid, gids,</span><br><span class="line">                        debugFlags, zygoteArgs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private static int startViaZygote(final String processClass,</span><br><span class="line">                                  final String niceName,</span><br><span class="line">                                  final int uid, final int gid,</span><br><span class="line">                                  final int[] gids,</span><br><span class="line">                                  int debugFlags,</span><br><span class="line">                                  String[] extraArgs)</span><br><span class="line">                                  throws ZygoteStartFailedEx &#123;</span><br><span class="line">        int pid;</span><br><span class="line">        //去掉部分代码</span><br><span class="line">        synchronized(Process.class) &#123;</span><br><span class="line">            ArrayList&lt;String&gt; argsForZygote = new ArrayList&lt;String&gt;();</span><br><span class="line">            // --runtime-init, --setuid=, --setgid=,</span><br><span class="line">            // and --setgroups= must go first</span><br><span class="line">            argsForZygote.add(&quot;--runtime-init&quot;);</span><br><span class="line">            argsForZygote.add(&quot;--setuid=&quot; + uid);</span><br><span class="line">            argsForZygote.add(&quot;--setgid=&quot; + gid);</span><br><span class="line">            //注意我们传进来的processClass是android.app.ActivityThread</span><br><span class="line">            argsForZygote.add(processClass);</span><br><span class="line"></span><br><span class="line">            if (extraArgs != null) &#123;</span><br><span class="line">                for (String arg : extraArgs) &#123;</span><br><span class="line">                    argsForZygote.add(arg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            pid = zygoteSendArgsAndGetPid(argsForZygote);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return pid;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //直接打开socket和zygote进程通信</span><br><span class="line">    private static int zygoteSendArgsAndGetPid(ArrayList&lt;String&gt; args)</span><br><span class="line">            throws ZygoteStartFailedEx &#123;</span><br><span class="line">        int pid;</span><br><span class="line">        openZygoteSocketIfNeeded();</span><br><span class="line">        //省略部分代码</span><br><span class="line">        return pid;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>最终会启动socket和zygote进程进行通信</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * Tries to open socket to Zygote process if not already open. If</span><br><span class="line">     * already open, does nothing.  May block and retry.</span><br><span class="line">     */</span><br><span class="line">    private static void openZygoteSocketIfNeeded() </span><br><span class="line">            throws ZygoteStartFailedEx &#123;</span><br><span class="line"></span><br><span class="line">        int retryCount;</span><br><span class="line"></span><br><span class="line">        if (sPreviousZygoteOpenFailed) &#123;</span><br><span class="line">            /*</span><br><span class="line">             * If we&#x27;ve failed before, expect that we&#x27;ll fail again and</span><br><span class="line">             * don&#x27;t pause for retries.</span><br><span class="line">             */</span><br><span class="line">            retryCount = 0;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            retryCount = 10;            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">         * See bug #811181: Sometimes runtime can make it up before zygote.</span><br><span class="line">         * Really, we&#x27;d like to do something better to avoid this condition,</span><br><span class="line">         * but for now just wait a bit...</span><br><span class="line">         */</span><br><span class="line">        for (int retry = 0</span><br><span class="line">                ; (sZygoteSocket == null) &amp;&amp; (retry &lt; (retryCount + 1))</span><br><span class="line">                ; retry++ ) &#123;</span><br><span class="line"></span><br><span class="line">            //省略部分代码</span><br><span class="line">            ZygoteSocket = new LocalSocket();</span><br><span class="line"></span><br><span class="line">            //核心逻辑：直接和zygote_socket进行通信，把processClass等参数传递进来了</span><br><span class="line">            sZygoteSocket.connect(new LocalSocketAddress(ZYGOTE_SOCKET, </span><br><span class="line">                        LocalSocketAddress.Namespace.RESERVED));</span><br><span class="line"></span><br><span class="line">            sZygoteInputStream</span><br><span class="line">                        = new DataInputStream(sZygoteSocket.getInputStream());</span><br><span class="line"></span><br><span class="line">            sZygoteWriter =</span><br><span class="line">                    new BufferedWriter(</span><br><span class="line">                            new OutputStreamWriter(</span><br><span class="line">                                    sZygoteSocket.getOutputStream()),</span><br><span class="line">                            256);</span><br><span class="line"></span><br><span class="line">                Log.i(&quot;Zygote&quot;, &quot;Process: zygote socket opened&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //省略部分代码</span><br><span class="line">        if (sZygoteSocket == null) &#123;</span><br><span class="line">            sPreviousZygoteOpenFailed = true;</span><br><span class="line">            throw new ZygoteStartFailedEx(&quot;connect failed&quot;);                 </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>而在zygote进程我们继续看zygote进程是怎么处理ActivityManagerService传递过来的消息的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Runs the zygote process&#x27;s select loop. Accepts new connections as</span><br><span class="line"> * they happen, and reads commands from connections one spawn-request&#x27;s</span><br><span class="line"> * worth at a time.</span><br><span class="line"> *</span><br><span class="line"> * @throws MethodAndArgsCaller in a child process when a main() should</span><br><span class="line"> * be executed.</span><br><span class="line"> */</span><br><span class="line">private static void runSelectLoopMode() throws MethodAndArgsCaller &#123;</span><br><span class="line">    ArrayList&lt;FileDescriptor&gt; fds = new ArrayList();</span><br><span class="line">    ArrayList&lt;ZygoteConnection&gt; peers = new ArrayList();</span><br><span class="line">    FileDescriptor[] fdArray = new FileDescriptor[4];</span><br><span class="line"></span><br><span class="line">    fds.add(sServerSocket.getFileDescriptor());</span><br><span class="line">    peers.add(null);</span><br><span class="line"></span><br><span class="line">    int loopCount = GC_LOOP_COUNT;</span><br><span class="line">    while (true) &#123;</span><br><span class="line">        int index;</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">         * Call gc() before we block in select().</span><br><span class="line">         * It&#x27;s work that has to be done anyway, and it&#x27;s better</span><br><span class="line">         * to avoid making every child do it.  It will also</span><br><span class="line">         * madvise() any free memory as a side-effect.</span><br><span class="line">         *</span><br><span class="line">         * Don&#x27;t call it every time, because walking the entire</span><br><span class="line">         * heap is a lot of overhead to free a few hundred bytes.</span><br><span class="line">         */</span><br><span class="line">        if (loopCount &lt;= 0) &#123;</span><br><span class="line">            gc();</span><br><span class="line">            loopCount = GC_LOOP_COUNT;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            loopCount--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            fdArray = fds.toArray(fdArray);</span><br><span class="line">            index = selectReadable(fdArray);</span><br><span class="line">        &#125; catch (IOException ex) &#123;</span><br><span class="line">            throw new RuntimeException(&quot;Error in select()&quot;, ex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (index &lt; 0) &#123;</span><br><span class="line">            throw new RuntimeException(&quot;Error in select()&quot;);</span><br><span class="line">        &#125; else if (index == 0) &#123;</span><br><span class="line">            ZygoteConnection newPeer = acceptCommandPeer();</span><br><span class="line">            peers.add(newPeer);</span><br><span class="line">            fds.add(newPeer.getFileDesciptor());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            boolean done;</span><br><span class="line">            //核心逻辑</span><br><span class="line">            done = peers.get(index).runOnce();</span><br><span class="line"></span><br><span class="line">            if (done) &#123;</span><br><span class="line">                peers.remove(index);</span><br><span class="line">                fds.remove(index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心逻辑在runOnce方法，我们继续看runOnce方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Reads one start command from the command socket. If successful,</span><br><span class="line"> * a child is forked and a &#123;@link ZygoteInit.MethodAndArgsCaller&#125;</span><br><span class="line"> * exception is thrown in that child while in the parent process,</span><br><span class="line"> * the method returns normally. On failure, the child is not</span><br><span class="line"> * spawned and messages are printed to the log and stderr. Returns</span><br><span class="line"> * a boolean status value indicating whether an end-of-file on the command</span><br><span class="line"> * socket has been encountered.</span><br><span class="line"> *</span><br><span class="line"> * @return false if command socket should continue to be read from, or</span><br><span class="line"> * true if an end-of-file has been encountered.</span><br><span class="line"> * @throws ZygoteInit.MethodAndArgsCaller trampoline to invoke main()</span><br><span class="line"> * method in child process</span><br><span class="line"> */</span><br><span class="line">boolean runOnce() throws ZygoteInit.MethodAndArgsCaller &#123;</span><br><span class="line"></span><br><span class="line">    // 省略了一些代码</span><br><span class="line">    parsedArgs = new Arguments(args);</span><br><span class="line">        pid = Zygote.forkAndSpecialize(parsedArgs.uid, parsedArgs.gid,</span><br><span class="line">                parsedArgs.gids, parsedArgs.debugFlags, rlimits);</span><br><span class="line"></span><br><span class="line">    if (pid == 0) &#123;</span><br><span class="line">        // in child</span><br><span class="line">        handleChildProc(parsedArgs, descriptors, newStderr);</span><br><span class="line">        // should never happen</span><br><span class="line">        return true;</span><br><span class="line">    &#125; else &#123; /* pid != 0 */</span><br><span class="line">        // in parent...pid of &lt; 0 means failure</span><br><span class="line">        return handleParentProc(pid, descriptors, parsedArgs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要是fork出来了一个子进程，注意：我们的args里是包含android.app.ActivityThread的。继续往下看直接调用了RuntimeInit.zygoteInit，我们已经快接近尾声了！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">private void handleChildProc(Arguments parsedArgs,</span><br><span class="line">        FileDescriptor[] descriptors, PrintStream newStderr)</span><br><span class="line">        throws ZygoteInit.MethodAndArgsCaller &#123;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * Close the socket, unless we&#x27;re in &quot;peer wait&quot; mode, in which</span><br><span class="line">     * case it&#x27;s used to track the liveness of this process.</span><br><span class="line">     */</span><br><span class="line">    if (parsedArgs.peerWait) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            ZygoteInit.setCloseOnExec(mSocket.getFileDescriptor(), true);</span><br><span class="line">            sPeerWaitSocket = mSocket;</span><br><span class="line">        &#125; catch (IOException ex) &#123;</span><br><span class="line">            Log.e(TAG, &quot;Zygote Child: error setting peer wait &quot;</span><br><span class="line">                    + &quot;socket to be close-on-exec&quot;, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        closeSocket();</span><br><span class="line">        ZygoteInit.closeServerSocket();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 省略部分代码</span><br><span class="line">    // 注意：我们传进来的runtimeInit为true，所以会走到RuntimeInit.zygoteInit</span><br><span class="line">    if (parsedArgs.runtimeInit) &#123;</span><br><span class="line">        RuntimeInit.zygoteInit(parsedArgs.remainingArgs);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //省略部分代码</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接调用了ActivityThread的main方法，这个其实就是应用程序的入口！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public static final void zygoteInit(String[] argv)</span><br><span class="line">        throws ZygoteInit.MethodAndArgsCaller &#123;</span><br><span class="line">    </span><br><span class="line">    // 省略部分代码</span><br><span class="line">    String startClass = argv[curArg++];</span><br><span class="line">    String[] startArgs = new String[argv.length - curArg];</span><br><span class="line"></span><br><span class="line">    System.arraycopy(argv, curArg, startArgs, 0, startArgs.length);</span><br><span class="line"></span><br><span class="line">    // 之前已经分析过，startClass就是android.app.ActivityThread</span><br><span class="line">    // 直接调用了ActivityThread的main方法，over</span><br><span class="line">    invokeStaticMain(startClass, startArgs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，分析完毕。整体流程可以用下图来表示（图片来自《深入理解Android卷1》88页）<br><img src="/2020/05/19/Understand-Android-Boot-Process/start_app_process.png" alt="image"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Android的启动过程往简单了说就是Linux启动过程和Java环境启动过程。我们见证了从加电到bootloader，bootloader启动kernel，kernel启动init进程，init进程启动C++程序，C++程序再启动Java程序，最终由zygoteInit.main方法启动了所有Android-Java世界的历程。本文是我学习Android启动过程的总结和思考，希望能对你有帮助。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li>《深入理解Android卷1》第4章</li><li>《Android内核剖析》</li><li>《深入理解Android内核设计思想》</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【译】Linux启动过程分析</title>
      <link href="/2020/04/10/Linux-Boot-Process/"/>
      <url>/2020/04/10/Linux-Boot-Process/</url>
      
        <content type="html"><![CDATA[<h3 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h3><p>一直想写一篇Linux启动过程的文章，看到这篇讲得不错，于是打算翻译出来。水平有限，不足之处欢迎指正。原文在此：<a href="https://www.crybit.com/linux-boot-process/">https://www.crybit.com/linux-boot-process/</a></p><span id="more"></span><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>你曾经想了解过系统启动的流程吗？做一个系统管理员，了解机器的启动每一个步骤和流程事非常重要的。如果你是一个系统管理员，你应该对启动流程有更好的了解。这篇文章将一步一步讲解Linux的启动流程。我向你保证，你读完这篇文章之后，你会对linux的启动流程有更好的了解。我把Linux启动流程分成了5步：<br><img src="/2020/04/10/Linux-Boot-Process/Linux-booting-process_2.png" alt="image"><br>从加电到登录界面，我们可以大致把Linux启动流程分成五部分：BIOS, Boot Loader第一阶段，BootLoader第二阶段，内核和初始化，这些都是启动过程的重要流程，让我们从Linux的BIOS阶段开始吧。</p><h3 id="第一步-BIOS"><a href="#第一步-BIOS" class="headerlink" title="第一步 BIOS"></a>第一步 BIOS</h3><p>在这篇文章里，我把BIOS（而不是UEFI）作为Linux启动过程分析的第一步。UEFI和BIOS都是启动操作系统之前的低层软件，UEFI是更现代化的方案，支持更大的硬盘，更快的启动时间，更安全的特性和更方便的图形鼠标。至于BIOS，这个一个预先安装在主板上的固件，BIOS控制计算机硬件。BIOS在启动过程中的主要工作是硬件初始化，最主要的工作是POST(Power On Self Test，硬件自检)。POST测试主要是检查一些硬件的读写是否正常。POST 主要不是用来做硬件诊断，它只是检查系统硬件是否存在并且加载一个BootLoader。POST过程中主要有两类错误：1.致命错误，主要是硬件原因；2.非致命错误，主要是软件原因。</p><h4 id="POST的主要职责"><a href="#POST的主要职责" class="headerlink" title="POST的主要职责"></a>POST的主要职责</h4><ol><li>检查CPU寄存器</li><li>检查BIOS代码的完整性</li><li>检查基本组件如DMA，计时器，中断控制器</li><li>搜寻，确定系统主存大小</li><li>初始化BIOS</li><li>识别，组织，选择出哪些设备是可以启动的</li></ol><p>POST之后会有Beep声表示POST检查结果。一声简短的beep声意味着系统是OK的。两声beep则表示检查失败，错误码会显示在屏幕上。想看更多详细信息参考POST手册。BIOS工作在CPU和IO设备之间，因此他总是能知道计算机的所有硬件信息。如果任何的硬盘或IO设备发生变化，只需更新BIOS即可。BIOS被存储在RRPROM&#x2F;FLASH内存中，BIOS不能存储在硬盘或者其他设备中，因为BIOS是管理这些设备的。BIOS使用汇编语言编写。</p><p><img src="/2020/04/10/Linux-Boot-Process/bios.jpg" alt="image"></p><p>请记住，POST是BIOS启动阶段的主要事情，接下来我们把目光转移到boot loader的第一阶段，MBR阶段</p><h3 id="第二步-boot-load第一阶段-MBR"><a href="#第二步-boot-load第一阶段-MBR" class="headerlink" title="第二步 boot load第一阶段(MBR)"></a>第二步 boot load第一阶段(MBR)</h3><p>Master Boot Record, 是boot loader启动的起始位置。MBR是磁盘上第一个扇区，占512字节。MBR包含程序代码和分区表信息，请看下方图片：<br><img src="/2020/04/10/Linux-Boot-Process/Linux-booting-process-MBR.png" alt="image"><br>当我们给硬盘分区时，每个分区的第一个扇区或者数据单元总是保留下来存放一些启动代码，硬盘的第一个分区则叫MBR，也是因为一样的原因保留下来，比如机械硬盘的1扇区，0柱面，0磁道。<br><img src="/2020/04/10/Linux-Boot-Process/mbr.png" alt="image"><br>MBR的前446字节是主要的boot loader包含可执行代码和错误信息，接下来的64字节包含四个分区表信息，如上图所示，P1表示分区1，P2表示分区2，等等。<br>4 * 16 bytes &#x3D; 64 bytes，最后两个字节就是众所周知的魔法数(0xAA55)，主要用来检查MBR的合法性。</p><p>当我们从硬盘开始启动时，BIOS开始加载并执行boot loader里面的代码，MBR容量太小，有时候没法执行完整的boot loader代码，所以启动要转移到另外的阶段进行。这些阶段在不同的boot loader上不一样，是时候转移到boot loader的第二阶段了。</p><h3 id="第三步-boot-loader第二阶段"><a href="#第三步-boot-loader第二阶段" class="headerlink" title="第三步 boot loader第二阶段"></a>第三步 boot loader第二阶段</h3><p>也叫内核加载阶段，这个阶段的主要任务是加载Linux 内核。<br>有不同类型的 boot loader </p><ul><li>LILO: Linux Loader</li><li>GRUB: Grand Unified Boot Loader<br>我们这里主要用GRUB，因为LILO有些缺点。GRUB的一个好处是它能识别Linux文件系统，GRUB能从格式为ext2&#x2F;ext3的文件系统中加载内核。</li></ul><p>就像我们之前提到，boot loader代码执行在不同的阶段，因为MBR容量限制。当前阶段执行的代码因GRUB版本不同而不同。下面是主要的阶段：</p><ol><li>阶段1和阶段2：这两个阶段是必要的</li><li>阶段1.5: 可选的</li></ol><p>阶段1是一个启动Linux机器的必要必要镜像。通常这部分代码会被嵌入到MBR中，或者启动分区的第一个扇区。这个镜像大小不能超过512字节，因为这是MBR的限制。在阶段1，没法识别文件系统，阶段1从磁盘中加载阶段1.5或者阶段2，此时能识别Linux文件系统细节。<br><img src="/2020/04/10/Linux-Boot-Process/boot-stages.png" alt="image"></p><p>阶段2是GRUB的主要镜像。通常你能在文件系统中找到这个镜像。阶段1.5则是连接阶段1和阶段2的桥梁，阶段1.5会被安装到MBR的右边。</p><p>Boot Loaders主要是从阶段2开始加载，所以你需要知道Linux boot loader的一些细节。通用的Linux中的Boot Loader主要有：</p><ol><li>LILO (Linux Loader)</li><li>GRUB (Grand Unified Boot Loader)</li></ol><p>现在几乎所有的Linux发行版本都用GRUB作为boot loader. 最新的GRUB版本为 GRUB v2.</p><p>LILO和GRUB都能作为MBR上的首要boot loader，或者第二个boot loadeer（分区上），都用来支持引导Linux、FreeBSD、NetBSD这样的操作系统，也可以引导Windows。<br>LILO配置文件存放在&#x2F;etc&#x2F;lilo.conf，Demo如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">boot=/dev/hda</span><br><span class="line">map=/boot/map</span><br><span class="line">install=/boot/boot.b</span><br><span class="line">prompt</span><br><span class="line">timeout=50</span><br><span class="line">message=/boot/message</span><br><span class="line">lba32</span><br><span class="line">default=linux</span><br><span class="line"></span><br><span class="line">image=/boot/vmlinuz-2.4.0-0.43.6</span><br><span class="line">label=linux</span><br><span class="line">initrd=/boot/initrd-2.4.0-0.43.6.img</span><br><span class="line">read-only</span><br><span class="line">root=/dev/hda5</span><br><span class="line"></span><br><span class="line">other=/dev/hda1</span><br><span class="line">label=dos</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通常像GRUB这样的boot loader配置文件也放在etc目录下。<br>GRUB有两个版本，v1和v2.</p><h4 id="GRUB-v1"><a href="#GRUB-v1" class="headerlink" title="GRUB v1"></a>GRUB v1</h4><p>GRUB v1存放在&#x2F;etc&#x2F;grub.conf，目录下，它其实事&#x2F;boot&#x2F;grub&#x2F;grub.conf的一个软链接。Demo如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># grub.conf generated by anaconda</span><br><span class="line">#</span><br><span class="line"># Note that you do not have to rerun grub after making changes to this file</span><br><span class="line"># NOTICE: You have a /boot partition. This means that</span><br><span class="line"># all kernel and initrd paths are relative to /boot/, eg.</span><br><span class="line"># root (hd0,0)</span><br><span class="line"># kernel /vmlinuz-version ro root=/dev/sda3</span><br><span class="line"># initrd /initrd-[generic-]version.img</span><br><span class="line">#boot=/dev/sda</span><br><span class="line">default=0</span><br><span class="line">timeout=5</span><br><span class="line">splashimage=(hd0,0)/grub/splash.xpm.gz</span><br><span class="line">hiddenmenu</span><br><span class="line">title CloudLinux Server (2.6.32-673.26.1.lve1.4.27.el6.x86_64)</span><br><span class="line">root (hd0,0)</span><br><span class="line">kernel /vmlinuz-2.6.32-673.26.1.lve1.4.27.el6.x86_64 ro root=UUID=15f2bf27-2e16-4b6f-bc86-fa74314aa8d5 rd_NO_LUKS rd_NO_LVM LANG=en_US.UTF-8 rd_NO_MD SYSFONT=latarcyrheb-sun16 crashkernel=auto KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet nohz=off</span><br><span class="line">initrd /initramfs-2.6.32-673.26.1.lve1.4.27.el6.x86_64.img</span><br></pre></td></tr></table></figure><h4 id="GRUB-v2"><a href="#GRUB-v2" class="headerlink" title="GRUB v2"></a>GRUB v2</h4><p>grub v2存放在&#x2F;etc&#x2F;grub2.cfg，它其实是&#x2F;boot&#x2F;grub2&#x2F;grub.cfg的软链接。<br>v2和v1主要的不同是，我们不能修改配置文件和其他配置。然而，你可以使用不同的grub2-*命令来修改GRUB配置。<br>一个v2的Demo如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">terminal_output console</span><br><span class="line">if [ x$feature_timeout_style = xy ] ; then</span><br><span class="line">set timeout_style=menu</span><br><span class="line">set timeout=5</span><br><span class="line"># Fallback normal timeout code in case the timeout_style feature is</span><br><span class="line"># unavailable.</span><br><span class="line">else</span><br><span class="line">set timeout=5</span><br><span class="line">fi</span><br><span class="line">### END /etc/grub.d/00_header ###</span><br><span class="line">BEGIN /etc/grub.d/10_linux ###</span><br><span class="line">menuentry &#x27;CentOS Linux (3.10.0-123.4.2.el7.x86_64) 7 (Core)&#x27; --class centos --class gnu-linux --class gnu --class os --unrestricted $menuentry_id_option &#x27;gnulinux-3.10.0-123.el7.x86_64-advanced-fe0109f2-6f34-48ae-b51e-1f5fa78305b5&#x27; &#123;</span><br><span class="line">load_video</span><br><span class="line">set gfxpayload=keep</span><br><span class="line">insmod gzio</span><br><span class="line">insmod part_msdos</span><br><span class="line">insmod ext2</span><br><span class="line">set root=&#x27;hd0,msdos1&#x27;</span><br></pre></td></tr></table></figure><p>以”menuentry”开始的行来定义内核。这比v1要复杂一些，但是我们可以从命令行修改它。我们会在另外一篇文章讨论GRUB配置。</p><p>不要忘记我们现在在Linux启动过程的第二阶段，在阶段二，会把GRUB从一个已知的位置加载进来(&#x2F;boot&#x2F;grub)，同时在读GRUB配置文件和展示启动入口之前，会把其他必要的驱动和内核模块加载进来。下图就是熟悉的GRUB配置页面，你可以从下方选择加载不同的内核。<br><img src="/2020/04/10/Linux-Boot-Process/select-linux-kernel-in-grub2-boot-loader-on-ubuntu-14.04.png" alt="image"></p><h3 id="第四步-内核阶段"><a href="#第四步-内核阶段" class="headerlink" title="第四步 内核阶段"></a>第四步 内核阶段</h3><p>终于到了内核阶段，内核镜像是压缩的，我们可以从GRUB入口选择不同的内核，如果没有选择，GRUB会自动选择默认的那个去加载，我们当然也可以修改默认配置。</p><p>你选择的内核会先加载到内存中，一个镜像文件会包含基本的根文件系统以及内核的所有模块，之后都会被加载到内存中。这个镜像文件的位置是&#x2F;boot，也即我们所知道的initramfs.</p><p>initramfs，是”initial RAM file sytem”的简写，它的前身是initrd “initial ramdisk”. 这个镜像文件包含原始的文件系统。GRUB加载内核的时候会告诉内核这个镜像文件的内存地址，然后内核会挂载这个镜像文件到内存中作为Linux的根文件系统。</p><p>之后内核会开始检测系统硬件。启动流程开始根据配置启动INIT(SYSTEMD)进程和对应的DAEMONS进程。这会在下一个阶段完成。</p><h3 id="第五步-INIT"><a href="#第五步-INIT" class="headerlink" title="第五步 INIT"></a>第五步 INIT</h3><p>内核一但加载到第四步，会自动执行sbin(sbin&#x2F;init)下面的init程序。[在 RHEL&#x2F;CENTOS 7中，&#x2F;sbin&#x2F;init被链接到 ..&#x2F;lib&#x2F;systemd&#x2F;systemd下]，当init进程启动，它就成为了你Linux机器的第一个进程。</p><p>init进程做的第一件事是读取配置文件, &#x2F;etc&#x2F;inittab，这会指引init进程去读初始化配置脚本去配置环境、设置PATH，开启swapping，检查文件系统等等。从&#x2F;etc&#x2F;inittab里，系统会根据rc文件开启对应的服务。</p><p>这只是一篇Linux启动过程的介绍，关于这个话题，有很多东西都可以继续展开。</p><p>接下来会有更详细的文章介绍具体每一步骤，希望你能享受启动过程。</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://blog.csdn.net/u014587123/article/details/80965398">https://blog.csdn.net/u014587123/article/details/80965398</a></li><li><a href="https://www.cnblogs.com/alantu2018/p/8991088.html">https://www.cnblogs.com/alantu2018/p/8991088.html</a></li><li><a href="https://chendongqi.me/2017/02/20/pm_boot_flow/">https://chendongqi.me/2017/02/20/pm_boot_flow/</a></li><li><a href="https://www.crybit.com/linux-boot-process/">https://www.crybit.com/linux-boot-process/</a></li><li><a href="https://opensource.com/article/18/1/analyzing-linux-boot-process">https://opensource.com/article/18/1/analyzing-linux-boot-process</a></li><li><a href="http://huaqianlee.github.io/2015/08/23/Android/%E9%AB%98%E9%80%9AAndroid%E8%AE%BE%E5%A4%87%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90-%E4%BB%8Epower-on%E4%B8%8A%E7%94%B5%E5%88%B0Home-Lanucher%E5%90%AF%E5%8A%A8/">http://huaqianlee.github.io/2015/08/23/Android/%E9%AB%98%E9%80%9AAndroid%E8%AE%BE%E5%A4%87%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90-%E4%BB%8Epower-on%E4%B8%8A%E7%94%B5%E5%88%B0Home-Lanucher%E5%90%AF%E5%8A%A8/</a></li><li><a href="http://huaqianlee.github.io/2015/08/21/Linux/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Linux%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/">http://huaqianlee.github.io/2015/08/21/Linux/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Linux%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解Android的Framework层服务</title>
      <link href="/2020/03/26/Unserstand-Android-Framework-Services/"/>
      <url>/2020/03/26/Unserstand-Android-Framework-Services/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>做为一个Android开发，Context.getSystemService是非常常用的API，但你有了解过这个API是如何实现的吗？今天，让我们一起从源码角度分析一下这个API的具体实现吧。本文源码基于Android 2.3.7_r1。</p><span id="more"></span><h3 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h3><p>ContextImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getSystemService</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="comment">// 省略部分代码</span></span><br><span class="line">    <span class="keyword">if</span> (WINDOW_SERVICE.equals(name)) &#123;</span><br><span class="line">        <span class="keyword">return</span> WindowManagerImpl.getDefault();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ACTIVITY_SERVICE.equals(name)) &#123;</span><br><span class="line">        <span class="keyword">return</span> getActivityManager();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ALARM_SERVICE.equals(name)) &#123;</span><br><span class="line">        <span class="keyword">return</span> getAlarmManager();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ACCOUNT_SERVICE.equals(name)) &#123;</span><br><span class="line">        <span class="keyword">return</span> getAccountManager();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> AccountManager <span class="title function_">getAccountManager</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mSync) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mAccountManager == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">IBinder</span> <span class="variable">b</span> <span class="operator">=</span> ServiceManager.getService(ACCOUNT_SERVICE);</span><br><span class="line">            <span class="type">IAccountManager</span> <span class="variable">service</span> <span class="operator">=</span> IAccountManager.Stub.asInterface(b);</span><br><span class="line">            mAccountManager = <span class="keyword">new</span> <span class="title class_">AccountManager</span>(<span class="built_in">this</span>, service);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mAccountManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ActivityManager <span class="title function_">getActivityManager</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mSync) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mActivityManager == <span class="literal">null</span>) &#123;</span><br><span class="line">            mActivityManager = <span class="keyword">new</span> <span class="title class_">ActivityManager</span>(getOuterContext(),</span><br><span class="line">                    mMainThread.getHandler());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mActivityManager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> AlarmManager <span class="title function_">getAlarmManager</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (sSync) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sAlarmManager == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">IBinder</span> <span class="variable">b</span> <span class="operator">=</span> ServiceManager.getService(ALARM_SERVICE);</span><br><span class="line">            <span class="type">IAlarmManager</span> <span class="variable">service</span> <span class="operator">=</span> IAlarmManager.Stub.asInterface(b);</span><br><span class="line">            sAlarmManager = <span class="keyword">new</span> <span class="title class_">AlarmManager</span>(service);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sAlarmManager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ActivityManager <span class="title function_">getActivityManager</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mSync) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mActivityManager == <span class="literal">null</span>) &#123;</span><br><span class="line">            mActivityManager = <span class="keyword">new</span> <span class="title class_">ActivityManager</span>(getOuterContext(),</span><br><span class="line">                    mMainThread.getHandler());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mActivityManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ActivityManager.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;RunningAppProcessInfo&gt; getRunningAppProcesses() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        return ActivityManagerNative.getDefault().getRunningAppProcesses();</span><br><span class="line">    &#125; catch (RemoteException e) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们发现ActivityManager做了一层转发，把请求转移到ActivityManagerNative去了，我们再来看下ActivityManagerNative具体做了哪些逻辑</p><p>ActivityManagerNative.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ActivityManagerNative</span> <span class="keyword">extends</span> <span class="title class_">Binder</span> <span class="keyword">implements</span> <span class="title class_">IActivityManager</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Cast a Binder object into an activity manager interface, generating</span></span><br><span class="line"><span class="comment">     * a proxy if needed.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">public</span> IActivityManager <span class="title function_">asInterface</span><span class="params">(IBinder obj)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">IActivityManager</span> <span class="variable">in</span> <span class="operator">=</span></span><br><span class="line">            (IActivityManager)obj.queryLocalInterface(descriptor);</span><br><span class="line">        <span class="keyword">if</span> (in != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> in;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ActivityManagerProxy</span>(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Retrieve the system&#x27;s default/global activity manager.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">public</span> IActivityManager <span class="title function_">getDefault</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (gDefault != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//if (Config.LOGV) Log.v(</span></span><br><span class="line">            <span class="comment">//    &quot;ActivityManager&quot;, &quot;returning cur default = &quot; + gDefault);</span></span><br><span class="line">            <span class="keyword">return</span> gDefault;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">IBinder</span> <span class="variable">b</span> <span class="operator">=</span> ServiceManager.getService(<span class="string">&quot;activity&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (Config.LOGV) Log.v(</span><br><span class="line">            <span class="string">&quot;ActivityManager&quot;</span>, <span class="string">&quot;default service binder = &quot;</span> + b);</span><br><span class="line">        gDefault = asInterface(b);</span><br><span class="line">        <span class="keyword">if</span> (Config.LOGV) Log.v(</span><br><span class="line">            <span class="string">&quot;ActivityManager&quot;</span>, <span class="string">&quot;default service = &quot;</span> + gDefault);</span><br><span class="line">        <span class="keyword">return</span> gDefault;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> List&lt;ActivityManager.RunningAppProcessInfo&gt; getRunningAppProcesses()</span><br><span class="line">            <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="type">Parcel</span> <span class="variable">data</span> <span class="operator">=</span> Parcel.obtain();</span><br><span class="line">        <span class="type">Parcel</span> <span class="variable">reply</span> <span class="operator">=</span> Parcel.obtain();</span><br><span class="line">        data.writeInterfaceToken(IActivityManager.descriptor);</span><br><span class="line">        mRemote.transact(GET_RUNNING_APP_PROCESSES_TRANSACTION, data, reply, <span class="number">0</span>);</span><br><span class="line">        reply.readException();</span><br><span class="line">        ArrayList&lt;ActivityManager.RunningAppProcessInfo&gt; list</span><br><span class="line">        = reply.createTypedArrayList(ActivityManager.RunningAppProcessInfo.CREATOR);</span><br><span class="line">        data.recycle();</span><br><span class="line">        reply.recycle();</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们发现getDefault()方法先去ServiceManager查询到”activity”服务的句柄，然后通过asInterface方法生成一个本地代理类ActivityManagerProxy，最后该代理类再用ServiceManager查询出来的句柄去做真正的binder通信。所以当第一次去请求的时候，会有触发两次binder通信，一次是具体的业务逻辑请求，一次是ServiceManager去请求对应服务的binder，请求回来之后会保存在一个map中，所以第二次再调用getRunningAppProcesses()，只会有一次binder通信。</p><p>ServiceManager.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ServiceManager</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> <span class="string">&quot;ServiceManager&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> IServiceManager sServiceManager;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HashMap&lt;String, IBinder&gt; sCache = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, IBinder&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> IServiceManager <span class="title function_">getIServiceManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sServiceManager != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> sServiceManager;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Find the service manager</span></span><br><span class="line">        sServiceManager = ServiceManagerNative.asInterface(BinderInternal.getContextObject());</span><br><span class="line">        <span class="keyword">return</span> sServiceManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IBinder <span class="title function_">getService</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">IBinder</span> <span class="variable">service</span> <span class="operator">=</span> sCache.get(name);</span><br><span class="line">            <span class="keyword">if</span> (service != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> service;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> getIServiceManager().getService(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;error in getService&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Stub&#x2F;Proxy&#x2F;Service&#x2F;ServiceManager组成了整个Framework通信框架。分析系统服务之前，找到对应的Stub&#x2F;Proxy&#x2F;Service，不管是ActivityManager，AccountManager, AlarmManager，亦或是WindowManager等等，都是一样的套路，通过这样的方式，举一反三，触类旁通，去分析理解其他的Manager就会快很多。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://stackoverflow.com/questions/15137247/how-does-getsystemservice-work-exactly">https://stackoverflow.com/questions/15137247/how-does-getsystemservice-work-exactly</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解Android的AIDL</title>
      <link href="/2020/02/19/Understand-Android-AIDL/"/>
      <url>/2020/02/19/Understand-Android-AIDL/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>AIDL是Android提供的方便应用层进行进程间通信的描述语言，同时也提供了AIDL语言转成Java语言的工具，方便客户端开发，下面我们通过一个简单的例子来说明AIDL是怎么使用的，以及这样设计背后的意义。</p><span id="more"></span><h3 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h3><h4 id="定义aidl"><a href="#定义aidl" class="headerlink" title="定义aidl"></a>定义aidl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IBookManager</span> &#123;</span><br><span class="line">List&lt;Book&gt; <span class="title function_">getBookList</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addBook</span><span class="params">(Book book)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对这样一个AIDL文件，编译之后，生成一个IBookManager.java文件，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Declare any non-default types here with import statements</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IBookManager</span> <span class="keyword">extends</span> <span class="title class_">android</span>.os.IInterface &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Local-side IPC implementation stub class.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Stub</span> <span class="keyword">extends</span> <span class="title class_">android</span>.os.Binder <span class="keyword">implements</span> <span class="title class_">com</span>.nancyyihao.aidlserver.IBookManager &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> java.lang.<span class="type">String</span> <span class="variable">DESCRIPTOR</span> <span class="operator">=</span> <span class="string">&quot;com.nancyyihao.aidlserver.IBookManager&quot;</span>; <span class="comment">// Binder Indentifier</span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Stub</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.attachInterface(<span class="built_in">this</span>, DESCRIPTOR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Cast an IBinder object into an com.nancyyihao.aidlserver.IBookManager interface,</span></span><br><span class="line"><span class="comment">         * generating a proxy if needed.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> com.nancyyihao.aidlserver.IBookManager <span class="title function_">asInterface</span><span class="params">(android.os.IBinder obj)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ((obj == <span class="literal">null</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            android.os.<span class="type">IInterface</span> <span class="variable">iin</span> <span class="operator">=</span> obj.queryLocalInterface(DESCRIPTOR);</span><br><span class="line">            <span class="keyword">if</span> (((iin != <span class="literal">null</span>) &amp;&amp; (iin <span class="keyword">instanceof</span> com.nancyyihao.aidlserver.IBookManager))) &#123;</span><br><span class="line">                <span class="keyword">return</span> ((com.nancyyihao.aidlserver.IBookManager) iin);  <span class="comment">// local Binder</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">com</span>.nancyyihao.aidlserver.IBookManager.Stub.Proxy(obj);  <span class="comment">// remote Binder</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> android.os.IBinder <span class="title function_">asBinder</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onTransact</span><span class="params">(<span class="type">int</span> code, android.os.Parcel data, android.os.Parcel reply, <span class="type">int</span> flags)</span> <span class="keyword">throws</span> android.os.RemoteException &#123;</span><br><span class="line">            <span class="keyword">switch</span> (code) &#123;</span><br><span class="line">                <span class="keyword">case</span> INTERFACE_TRANSACTION: &#123;</span><br><span class="line">                    reply.writeString(DESCRIPTOR);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> TRANSACTION_getBookList: &#123;</span><br><span class="line">                    data.enforceInterface(DESCRIPTOR);</span><br><span class="line">                    java.util.List&lt;com.nancyyihao.aidlserver.Book&gt; _result = <span class="built_in">this</span>.getBookList();</span><br><span class="line">                    reply.writeNoException();</span><br><span class="line">                    reply.writeTypedList(_result);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> TRANSACTION_addBook: &#123;</span><br><span class="line">                    data.enforceInterface(DESCRIPTOR);</span><br><span class="line">                    com.nancyyihao.aidlserver.Book _arg0;</span><br><span class="line">                    <span class="keyword">if</span> ((<span class="number">0</span> != data.readInt())) &#123;</span><br><span class="line">                        _arg0 = com.nancyyihao.aidlserver.Book.CREATOR.createFromParcel(data);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        _arg0 = <span class="literal">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">this</span>.addBook(_arg0);</span><br><span class="line">                    reply.writeNoException();</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.onTransact(code, data, reply, flags);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">com</span>.nancyyihao.aidlserver.IBookManager &#123;</span><br><span class="line">            <span class="keyword">private</span> android.os.IBinder mRemote;</span><br><span class="line">            Proxy(android.os.IBinder remote) &#123;</span><br><span class="line">                mRemote = remote;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">public</span> android.os.IBinder <span class="title function_">asBinder</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> mRemote;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> java.lang.String <span class="title function_">getInterfaceDescriptor</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> DESCRIPTOR;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">public</span> java.util.List&lt;com.nancyyihao.aidlserver.Book&gt; getBookList() <span class="keyword">throws</span> android.os.RemoteException &#123;</span><br><span class="line">                android.os.<span class="type">Parcel</span> <span class="variable">_data</span> <span class="operator">=</span> android.os.Parcel.obtain();</span><br><span class="line">                android.os.<span class="type">Parcel</span> <span class="variable">_reply</span> <span class="operator">=</span> android.os.Parcel.obtain();</span><br><span class="line">                java.util.List&lt;com.nancyyihao.aidlserver.Book&gt; _result;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    _data.writeInterfaceToken(DESCRIPTOR);</span><br><span class="line">                    mRemote.transact(Stub.TRANSACTION_getBookList, _data, _reply, <span class="number">0</span>);</span><br><span class="line">                    _reply.readException();</span><br><span class="line">                    _result = _reply.createTypedArrayList(com.nancyyihao.aidlserver.Book.CREATOR);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    _reply.recycle();</span><br><span class="line">                    _data.recycle();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> _result;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBook</span><span class="params">(com.nancyyihao.aidlserver.Book book)</span> <span class="keyword">throws</span> android.os.RemoteException &#123;</span><br><span class="line">                android.os.<span class="type">Parcel</span> <span class="variable">_data</span> <span class="operator">=</span> android.os.Parcel.obtain();</span><br><span class="line">                android.os.<span class="type">Parcel</span> <span class="variable">_reply</span> <span class="operator">=</span> android.os.Parcel.obtain();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    _data.writeInterfaceToken(DESCRIPTOR);</span><br><span class="line">                    <span class="keyword">if</span> ((book != <span class="literal">null</span>)) &#123;</span><br><span class="line">                        _data.writeInt(<span class="number">1</span>);</span><br><span class="line">                        book.writeToParcel(_data, <span class="number">0</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        _data.writeInt(<span class="number">0</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    mRemote.transact(Stub.TRANSACTION_addBook, _data, _reply, <span class="number">0</span>);</span><br><span class="line">                    _reply.readException();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    _reply.recycle();</span><br><span class="line">                    _data.recycle();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TRANSACTION_getBookList</span> <span class="operator">=</span> (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TRANSACTION_addBook</span> <span class="operator">=</span> (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> java.util.List&lt;com.nancyyihao.aidlserver.Book&gt; getBookList() <span class="keyword">throws</span> android.os.RemoteException;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBook</span><span class="params">(com.nancyyihao.aidlserver.Book book)</span> <span class="keyword">throws</span> android.os.RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h4><p>生成的代码主要有三部分，如下图所示</p><ul><li>第一部分：IBookManager的Java接口，其实就是把AIDL语言转成了Java语言</li><li>第二部分：Stub抽象类，留给服务端实现，主要包含两个方法，一个是asInterface方法，该方法会返回一个实现了IBookManager的一个实例；另外一个onTransact方法，该方法会根据不同的transact code调用执行相应的业务逻辑，这个业务逻辑由Stub子类去实现</li><li>第三部分：Proxy类，工作在客户端侧，实现了对Binder数据请求的封装，会调用mRemote.transact方法进行binder请求。</li></ul><p><img src="/2020/02/19/Understand-Android-AIDL/aidl.png" alt="image"></p><p>对于服务端，只需要写一个类实现具体的业务了逻辑就可以了；比如BookManagerService，而对于客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">IBookManager</span> <span class="variable">manager</span> <span class="operator">=</span> IBookManager.Stub.asInterface(IBinder);</span><br><span class="line">manager.getBookList();</span><br></pre></td></tr></table></figure><p>也只需要调用Stub.asInterface()拿到相应的实例，然后就直接调用相应的方法即可。这样设计的好处首先是完全屏蔽了底层的Binder通信，IPC就相当于一个普通的方法调用，其次是服务端也不用关心数据接收和组装（当然服务端要做好同步），只需要实现好对应的业务逻辑，不得不说这样的设计思路值得我们学习。</p><p>通过上面的例子我们也可以知道，想要使用Binder通信，当然也可以不用AIDL，完全可以自己写对应的Stub&#x2F;Proxy&#x2F;IBookManager接口类，核心是要根据接口封装出对应的数据接口，然后调用mRemote.transact方法就可以和服务端进行通信，不过既然有工具帮你做好，干嘛不用呢？</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过查看Android源码之后，我们可以看到Framework层绝大部分系统服务都遵循这样的设计模式，先定义一个接口（服务），然后实现对应的Stub&#x2F;Proxy&#x2F;Service(Service驻留在system_server进程，Proxy都是给app侧使用的)，最后客户端就可以通过ServiceManager.getService拿到系统提供的服务，IPC就相当于一个简单方法调用，下一篇文章我们会以ActivityManager为例，分析系统调用过程，敬请期待。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018总结</title>
      <link href="/2018/12/31/2018-summary/"/>
      <url>/2018/12/31/2018-summary/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>忙碌了一年，花点时间来反思自己这一年来的得与失。</p><span id="more"></span><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​ 说实话，如果要按照2017年定下的目标作为打分标准的话，自己在2018年的分数就是0。因为2017年立下的所有flag都没有实现。技术文章？一篇都没有写，投资？今年上证3000点左右进场，亏了百分之十几，看书？倒是零零碎碎看了不少，很少有坚持看完的，就算坚持看完了，也没有整理成笔记，相当于没看。可以说2018对我来说是失败的一年，不仅没有实现自己心中的目标，还让自己变得更加懒惰了。</p><p>​ 目前的状态是：对自己有清醒的认知，知道自己的优点也了解自己的缺点，不过分骄傲也不妄自菲薄，合理平衡。柯式发现某些事自己做起来真的很困难的时候，又觉得这样的自己很差劲，也不知道怎么改进。虽不至于因此自卑，但也很懊恼。</p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><ul><li>1月份到3月份，恍恍惚惚，只顾着做需求，并没有深入去了解api背后的原理。对自己的工作更加自信了，但总感觉缺了点什么。</li><li>4月份开始尝试寻找其他工作机会，虽说目前过得很舒服，但是感觉自己太过安逸了，想尝试看下其他机会，顺便看看自己的水平在市场中能够得到怎样的offer，检验自己这一年半以来是否有长进。此时刚好在脉脉上有个腾讯HR联系我，便把简历发过去，没想到面试十分顺利，轻松得到了offer。当时也由于自己想回深圳，便想都没想就接下了。现在回想过来，自己其实不应该这么着急，只面了一家就决定了，谈薪资的时候也没有跟HR去争取，结果给了一个很普通的offer，导致来到这边以后经常加班自己就心里过意不去。一样的钱，为啥我好好的正常上下班的工作不做，要跳过来填坑？另外一点是自己也不应该这么快就跳槽。如果在新闻这边好好工作一年，那么就是三年工作经验，面试结果好点就能给到2-3甚至是3-1，目前就一年多的经验，跳槽过去很难给到比较好的职级和薪资。当时另外一个让我想离开的导火索是北京租金蹭蹭上涨，原来我住的地方是2.2k，今年竟然涨到了3k，而且好多地方都是大涨，找房子又很麻烦。不过如果再给一次选择的机会，我会选择留在新闻。</li><li>6月份入职新公司，说实话，团队技术、氛围都没有上家好。代码非常烂，没有codereview流程，真是应了那句话，大公司的边缘部门比不上二线的核心部门。</li><li>12月份入职新公司进半年，印象最深的只有加班，原来7点钟正常下班，现在基本都要10点以后。比较好的一点是中午有两个半小时左右的休息时间，而这段时间除了吃饭，自己把大部分都贡献给了王者荣耀。反思这半年来自己确实花在游戏的时间增加了太多，坚持了一年的读书习惯也在8月底中断。当然也把太多的时间都贡献给了加班，这也是导致没有写技术文章的直接原因之一。</li></ul><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p>技术方面今年没有太大的进展，感觉自己到了一个瓶颈期。API都会用，也能根据当前业务需求写出比较漂亮的代码，但是总感觉自己没法深入了解背后的原理。另一个意外收获是自己开始跳出Android一端的限制，开始尝试了解iOS和web端相关的东西，这在原来新闻团队可能是没有机会去做的。技术视野有了不少提升。而看过《代码整洁之道》和《重构》的部分章节之后，对写代码也有了更深刻的认识。比较遗憾的是自己一直希望深入学习linux内核、操作系统底层相关知识，苦于没有人引路，不知从何学起。</p><h3 id="心态"><a href="#心态" class="headerlink" title="心态"></a>心态</h3><p>随着生活阅历的丰富，自己的心态也趋于平和。工作中生活中都能遇到各种各样的人，帮助过的自己人有，恶心过的人自己也有，开始尝试从别人的角度去理解别人为何会做出这样或那样的行为。开始用更开放的心态去接触自己之前不会接触的东西，比如学钢琴（虽然最终没学成）、滑冰。</p><h3 id="关于成长"><a href="#关于成长" class="headerlink" title="关于成长"></a>关于成长</h3><p>今年最大的受过应该是沟通能力的提升。在新闻，很少有机会去定方案、跟产品pk，大部分时间都在写代码，好处是不用关心那么多糟心事，领导去pk就好了，坏处是没有机会去锻炼自己沟通说服别人的能力。来到新公司，很多事都得自己去推，发消息又不及时，所以自己只能硬着头皮打电话沟通，一来二去，便慢慢把沟通能力锻炼出来了。基本上已经具备了独当一面的能力，当老板把事情分下来之后，会自己去推动完成，而不是像之前等待领导帮忙把其他琐事搞定，自己写代码就行。</p><h3 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h3><p>回想起自己毕业的前一年半时间，基本上已经达到了自己想要的目标—中级工程师。而今年不得不说是失败的一年，这一年来自己在向高级工程师探索，探索是失败的，因为目标不明确，导致迷迷糊糊地过了一年。今年，要以更加进取的姿态前进。</p><h4 id="工作上"><a href="#工作上" class="headerlink" title="工作上"></a>工作上</h4><ul><li>升级到2-3</li><li>继续提高沟通能力，电话要用起来</li><li>不再抱怨，一切以结果说话</li><li>小心说话，不该说的话不要乱说</li></ul><h4 id="技术上"><a href="#技术上" class="headerlink" title="技术上"></a>技术上</h4><ul><li>学会iOS开发</li><li>了解前端相关知识，了解跨平台开发框架的原理</li><li>深入Android，对网络框架（OkHttp）、图片加载框架（Gilde）、插件化框架（replugin）输出源码分析文章（不能再拖了）</li><li>了解Android databinding+livedata+viewmodel框架背后机制</li></ul><h4 id="读书上"><a href="#读书上" class="headerlink" title="读书上"></a>读书上</h4><p>至少要读20本书，读完后要写读书笔记</p><h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3><p>2019，更上一层楼！</p>]]></content>
      
      
      <categories>
          
          <category> Thinking </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thinking </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈近况</title>
      <link href="/2018/11/11/Talk-About-My-Current-Status/"/>
      <url>/2018/11/11/Talk-About-My-Current-Status/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>博客已经停更将近半年时间，除了4月份开始准备面试到6月份正式离职没有写新文章之外，来到鹅厂就没有再更新，这点实在是惭愧。工作繁忙是一个原因，另外一个更主要的原因是自己变懒了。在这个技术更新日新月异的年代，懒惰是一件很可怕的事情。35岁是个坎，太过安逸，没有危机意识到最终可能就会陷入中年危机。毕竟这个行业每年都有新鲜血液涌入，不进取则被淘汰。</p><span id="more"></span><h3 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h3><p>没有思考就没有进步，这句话大体来说是正确的。可以用一句话来形容目前的状态：间歇性努力，持续性混吃等死。细细想来，归根结底还是因为自己没有长远的规划，也没有强大的执行力。每年总结的时候，都给自己立了很多flag，说要干这干那，结果到年末了一件都没有干成。来了鹅厂4个多月，除了做些边边角角的工作外，时间大部分都花费在开会和对数据查问题这种不太重要的事情上，导致自己无法从工作中获得成就感，于是逐渐丧失了对工作的热情。工作效率的低下又进一步降低了这种热情。经常来了公司一天，发现自己啥都没干就已经到晚上十点了。我一直相信，想要学习在哪里都可以做到。因此就算公司要求加班到九点十点都没有关系，上有政策下有对策，工作做完了，研究自己想研究的东西就好了。但是现在这种动不动就开会、动不动就要帮其他同事查问题的状态花费掉了太多时间，根本就没有时间去研究。好不容易有了一小段时间之后，想要研究点自己感兴趣的东西，研究到一半后，又被其他同事打断，在此回去研究的时候，发现需要重新回头去看，因为上下文信息已经没了。我十分厌恶这样的状态，但是又感觉掉在里边无法自拔。</p><p>发现自己成长最快的时期在毕业前一年，每天都有学新东西，每周都会做总结，虽然文章质量可能不太高，但是通过写作这种方式可以检验自己是否真的把这个知识点搞懂了。那时自己想法也比较简单，没有那么多的欲望。而现在的自己像是野心上的巨人，行动上的矮人。现在处于职业生涯的迷茫期，确实也看不清前方的路应该怎样走。当务之急是如何才能燃起对技术的热情，找到自己的技术方向，重新或者成就感。现在这段时间和大三那会有点像，那会是不清楚要考研还是直接出来工作，自己内心并不排斥读研，当然也希望在工业界学习到最新的技术，向左还是向右，当时自己并没有给出答案，看了很多书，也没有找到答案。车到山前必有路，柳暗花明又一村，生活没有过不去的坎，随着时间的推移，答案便自己浮现了出来。</p><p>干技术这一行，安全感主要来自对技术的掌握，自己这段时间也努力学习iOS开发和前端相关知识，希望能够尽快度过这段迷茫的时期，找到自己喜欢的技术方向，深入下去吧。</p>]]></content>
      
      
      <categories>
          
          <category> Thinking </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thinking </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈这次跳槽</title>
      <link href="/2018/10/13/Talk-About-Hopping-To-Tencent/"/>
      <url>/2018/10/13/Talk-About-Hopping-To-Tencent/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>年初时，给自己立了个flag：至少写20篇技术文章。然而，半年过去了，自己竟然还一篇还没有写，实在是惭愧。想想最近这段时间过得确实有点安逸，该看的书没看，该写的文章没写。孔圣人曾说：每日三省吾身。圣人每天都要反省自己。我作为一个普通人，也应该偶尔反省一下自己。自己跳槽来深圳已过三个月，太忙，没时间写文章。趁着今天周末，就找个时间谈谈这次跳槽吧。（伟大源于日复一日的坚持）</p><span id="more"></span><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>曾在去年十月份左右的时候，就已经给自己立了个flag：明年6月份无论如何都要回深圳。之后就进入了漫长的准备阶段。看了大牛任玉刚分享的Android学习路线指南，给自己跳槽的定位是中级Android开发工程师。因为大厂要不就招聘应届生，要不就招3年以上工作经验的高级工程师。由于准备跳槽的时间点是6月，自己也就不到2年左右工作经验，这个时候跳槽大厂是有点尴尬的。既然决心已定，就全力以赴吧。</p><p>口头说准备容易，行动起来真的太难。加上那段时间公司新项目(milk)，根本就没有时间去准备面试相关知识。恰恰是那段忙碌的时间，让我的技术能力，代码设计能力有了很大的提高，自己的一些新想法也在新项目上得到实践，最重要的是自己的工作也慢慢得到了同事和老大的认可，这让我渐渐打消的要跳槽的念头。但是也一直在刻意积累自己想要学的东西。包括自定义view、热修复、网络层框架和客户端整体架构在2月初时，我基本已经摸清楚了。</p><p>转眼时间来到3月份，老大给我晋升加薪，这个时候就更加犹豫了。口口声声说要回深圳（当然没跟其他人说跳槽的事），但是内心已经松口了，觉得明年再回去也没问题。毕竟刚晋升就走确实对不起老大。</p><p>事情转机出现在4月份。一个HR在脉脉上联系我，问我要不要去试试看。当时招聘JD写的也是要求3年以上的工作经验，在HR盛情邀请之下，我还是决定试一试，毕竟就算失败了，我也不亏，为明年做准备。</p><h3 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h3><p>4月中旬把简历写好发给了HR，也没太在意。一天组内团建去爬山，累得半死半活，8点多洗完澡，准备睡觉。在晚上9点左右就收到了一面面试官的电话面试，答得并不好，有不少基础的题目，该答出来的都没答上来。不想找借口，确实是因为太累了。之后就没抱希望，第二天就直接跟HR说面试应该挂了。没想到竟然过了，让我十分意外。</p><p>流程很快，一面之后紧接着就是约二面时间，当然是希望能越往后越好，为自己多争取一点复习时间。面试官说最晚一周后，我想着反正无所谓（就没想着会过），就又把时间提前了两天。二面是视频面试，问题比一面更有深度，都是问很深入的东西，比如叫你设计一个网络架构你会怎么设计，需要考虑什么问题？为什么要这样设计？都是很开放的问题，要是平时没有深入了解其中原理，基本上就跪了。最后还问了一个算法题，大意是给定一篇文章，文章中有很多的过滤词，用什么方法能快速找出这些过滤词并替换掉？到最后其实是有点蒙的，一开始只能想到最普通的遍历，这样的算法的自己也是不满意的，当然面试官也不满意，我就跟面试官说给我5分钟，喝了口水冷静下来，想到了建立字典树的方案先把所有的过滤词放到树中，再用文章一遍扫描，这个方法是n+m的复杂度，相比第一个n*m好很多。当时也没看面试官反应，貌似也不是最优解。最后就问还有什么想问的，这些都是套路话，问了一些团队工作方式，氛围等几个泛泛的问题之后就结束面试了，时间不到一个小时。</p><p>二面之后立马约三面，三面是个总经理级别的人物。面试过程也比较轻松，主要是聊聊我现在的工作、跳槽的目的和对未来的规划。问题不大，半个多小时就结束了。</p><p>几天过去后，HR通知我面试全部通过了。整个流程下来，不到半个月，然而我并没有狂喜。等待我的是一个很艰难的抉择。</p><h3 id="抉择"><a href="#抉择" class="headerlink" title="抉择"></a>抉择</h3><p>从入职到现在，leader对我都很好，从一开始啥都不会到现在能够独当一面，很大程度都是leader的功劳，自己在一年多时间里也成长了很多，而且今年刚刚提了晋升和加薪，这个点走确实有点不太合适。几番衡量之下，发现自己回深圳的念头更加强烈，而深圳相对来说鹅厂应该算是不错的去处，便最终决定接受鹅厂的offer，准备南下。决定之后便立马跟leader说了，leader表示理解，很快就通过了离职申请。离职的最后一天，整个组的同事一起出来请我吃饭，为我送行，大公司中有这样好氛围的组并不多。猪厂扁平化的管理风格也让我很怀念，我们总监是和我们做在一起的，还经常一起吃饭，来到鹅厂三个月，总监几乎见不到面。</p><h3 id="南下"><a href="#南下" class="headerlink" title="南下"></a>南下</h3><p>6月4日办完离职手续之后，6月5日就匆匆赶往深圳了。深圳给我的第一印象是空气特别好，有活力，年轻人特别多。虽然来的第一个星期天天下雨，但心情舒畅了许多，感觉和北京相比，自己还是比较喜欢这种气候。在北京眼里全部只有工作、工作、工作，至少在这边还能跟同学撸撸串、聊聊人生。</p><h3 id="入职"><a href="#入职" class="headerlink" title="入职"></a>入职</h3><p>入职之后，和自己想象完全不一样。没有代码规范、没有code review，代码质量也不高，版本管理用的竟然还是svn！经过一段艰难的适应期之后，还是告诉自己，既来之则安之，改变自己能改变的，接受自己不能改变的。第一天进来刚把环境装好，第二天就马上改bug了。这种快节奏我还真第一次遇到。原来猪场新同事入职，一般都有两周的缓冲时间来熟悉环境，后面才是慢慢接触新bug，新需求。第一个需求很快就到来了，就是把普通全屏h5改成播放器加h5的形式，凭借这一年多的工作经验，做这么个需求自然不在话下，但是自己还是不停测试并优化自己的代码，快速并很好的完成了任务。令自己比较欣慰的是，一起合作的同事一开始也不太重视代码质量，在我的影响之下，也开始重视代码质量了。</p><h3 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h3><p>从8月份至今，每周上六天班，国庆因为要发版，也来加了五天班，忙得晕头转向，也经常问自己：自己到底想要在这份工作中得到什么？本来以为这么成熟的app，不会有太多的变动，会有更多的时间去钻研技术，然而现实的需求并没有排期，boss拍定一个时间，就需要在那个时间点完成，压力可想而知，代码质量就更不用说了。晚上十点多回去是常有的事，自己计划要做的事（Android源码系列分析文章）只能往后放了。因为工作中有时候也要用到iOS开发相关知识，学习iOS开发的计划便提前了，国庆回来之后，OC语法基本学完，后面还是得抽时间去学学iOS-app开发的设计架构和理念。有了Android基础，学起来快了很多。等这段时间忙完，希望能够抽身去学习自己感兴趣的linux底层相关的技术，还是要注意工作的积累，不然天天做业务，几年后技术就荒废了。</p>]]></content>
      
      
      <categories>
          
          <category> Thinking </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thinking </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《重构-改善既有代码设计》读书笔记</title>
      <link href="/2018/04/16/Refactoring-Review/"/>
      <url>/2018/04/16/Refactoring-Review/</url>
      
        <content type="html"><![CDATA[<h3 id="1-为何重构"><a href="#1-为何重构" class="headerlink" title="1. 为何重构"></a>1. 为何重构</h3><ul><li>重构改善软件设计，让代码易于理解</li><li>重构帮助找到bug</li><li>重构提高编程速度</li></ul><span id="more"></span><h3 id="2-何时重构"><a href="#2-何时重构" class="headerlink" title="2. 何时重构"></a>2. 何时重构</h3><ul><li>三次法则，事不过三，三则重构</li><li>添加新功能时重构</li><li>修补错误时重构</li><li>review代码时重构</li></ul><h3 id="3-坏代码"><a href="#3-坏代码" class="headerlink" title="3. 坏代码"></a>3. 坏代码</h3><ul><li>Duplicated Code(重复代码)</li><li>Long Method(函数过长)</li><li>Large Class(大类)</li><li>Long Parameter List(参数过多)</li><li>So on</li></ul><h3 id="4-准备工作"><a href="#4-准备工作" class="headerlink" title="4. 准备工作"></a>4. 准备工作</h3><h4 id="4-1-构建测试环境（重要）"><a href="#4-1-构建测试环境（重要）" class="headerlink" title="4.1 构建测试环境（重要）"></a>4.1 构建测试环境（重要）</h4><h3 id="5-重构方法"><a href="#5-重构方法" class="headerlink" title="5. 重构方法"></a>5. 重构方法</h3><h4 id="5-1-重新组织函数"><a href="#5-1-重新组织函数" class="headerlink" title="5.1 重新组织函数"></a>5.1 重新组织函数</h4><h5 id="5-1-1-例子1：-提炼函数"><a href="#5-1-1-例子1：-提炼函数" class="headerlink" title="5.1.1 例子1：(提炼函数)"></a>5.1.1 例子1：(提炼函数)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">printOwing</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">    printBanner();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// print detail</span></span><br><span class="line">    System.out.println(<span class="string">&quot;name:&quot;</span> + _name);</span><br><span class="line">    System.out.println(<span class="string">&quot;amount:&quot;</span> + _amount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">printOwing</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">    printBanner();</span><br><span class="line">    printDetails(amount);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">printDetails</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;name:&quot;</span> + _name);</span><br><span class="line">    System.out.println(<span class="string">&quot;amount:&quot;</span> + _amount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-1-2-例子2：-以查询代替临时变量"><a href="#5-1-2-例子2：-以查询代替临时变量" class="headerlink" title="5.1.2 例子2：(以查询代替临时变量)"></a>5.1.2 例子2：(以查询代替临时变量)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="type">int</span> <span class="variable">basePrice</span> <span class="operator">=</span> _quantity * _itemPrice;</span><br><span class="line">     <span class="type">double</span> discountFactor;</span><br><span class="line">     <span class="keyword">if</span> (basePrice &gt; <span class="number">1000</span>) discountFactor = <span class="number">0.95</span>;</span><br><span class="line">     <span class="keyword">else</span> discountFactor = <span class="number">0.98</span>;</span><br><span class="line">     <span class="keyword">return</span> basePrice * discountFactor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">basePrice</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> _quantity * _itemPrice;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> <span class="title function_">discountFactor</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (basePrice() &gt; <span class="number">1000</span>) <span class="keyword">return</span> <span class="number">0.95</span>;</span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0.98</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> basePrice() * discountFactor();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h5 id="5-1-3-例子3：（引入解释性变量"><a href="#5-1-3-例子3：（引入解释性变量" class="headerlink" title="5.1.3 例子3：（引入解释性变量)"></a>5.1.3 例子3：（引入解释性变量)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( (platform.toUpperCase().indexOf(<span class="string">&quot;MAC&quot;</span>) &gt; -<span class="number">1</span>) &amp;&amp;</span><br><span class="line">     (browser.toUpperCase().indexOf(<span class="string">&quot;IE&quot;</span>) &gt; -<span class="number">1</span>) &amp;&amp;</span><br><span class="line">&#123;</span><br><span class="line">  wasInitialized() &amp;&amp; resize &gt; <span class="number">0</span> )</span><br><span class="line"><span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">isMacOs</span> <span class="operator">=</span> platform.toUpperCase().indexOf(<span class="string">&quot;MAC&quot;</span>) &gt; -<span class="number">1</span>; </span><br><span class="line"><span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">isIEBrowser</span> <span class="operator">=</span> browser.toUpperCase().indexOf(<span class="string">&quot;IE&quot;</span>) &gt; -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">wasResized</span> <span class="operator">=</span> resize &gt; <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (isMacOs &amp;&amp; isIEBrowser &amp;&amp; wasInitialized() &amp;&amp; wasResized) &#123;</span><br><span class="line">   <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="title function_">price</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// price is base price - quantity discount + shipping return _quantity * _itemPrice -</span></span><br><span class="line">          Math.max(<span class="number">0</span>, _quantity - <span class="number">500</span>) * _itemPrice * <span class="number">0.05</span> +</span><br><span class="line">          Math.min(_quantity * _itemPrice * <span class="number">0.1</span>, <span class="number">100.0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="title function_">price</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> basePrice() - quantityDiscount() + shipping();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">double</span> <span class="title function_">quantityDiscount</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> Math.max(<span class="number">0</span>, _quantity - <span class="number">500</span>) * _itemPrice * <span class="number">0.05</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">double</span> <span class="title function_">shipping</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> Math.min(basePrice() * <span class="number">0.1</span>, <span class="number">100.0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">double</span> <span class="title function_">basePrice</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> _quantity * _itemPrice;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h5 id="5-1-4-例子4：（以函数对象取代函数"><a href="#5-1-4-例子4：（以函数对象取代函数" class="headerlink" title="5.1.4 例子4：（以函数对象取代函数)"></a>5.1.4 例子4：（以函数对象取代函数)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Order</span>...</span><br><span class="line">  <span class="type">double</span> <span class="title function_">price</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="type">double</span> primaryBasePrice;</span><br><span class="line">     <span class="type">double</span> secondaryBasePrice;</span><br><span class="line">     <span class="type">double</span> tertiaryBasePrice;</span><br><span class="line">     <span class="comment">// long computation;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Order</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PriceCalculator</span>(<span class="built_in">this</span>).compute()</span><br></pre></td></tr></table></figure><p>原理就是利用代理类来进行计算</p><h4 id="5-2-在对象之间搬移特性"><a href="#5-2-在对象之间搬移特性" class="headerlink" title="5.2 在对象之间搬移特性"></a>5.2 在对象之间搬移特性</h4><h5 id="5-2-1-搬移函数"><a href="#5-2-1-搬移函数" class="headerlink" title="5.2 1 搬移函数"></a>5.2 1 搬移函数</h5><p>将一个类的函数搬移到另外一个类中，需要增加委托类</p><h5 id="5-2-2-搬移字段"><a href="#5-2-2-搬移字段" class="headerlink" title="5.2.2 搬移字段"></a>5.2.2 搬移字段</h5><p>将一个类的字段搬移到另外一个类中,我想把表示利率的_interestRate搬移到AccountType class去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>...</span><br><span class="line">  <span class="keyword">private</span> AccountType _type;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">double</span> _interestRate;</span><br><span class="line">  <span class="type">double</span> <span class="title function_">interestForAmount_days</span> <span class="params">(<span class="type">double</span> amount, <span class="type">int</span> days)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> _interestRate * amount * days / <span class="number">365</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>改成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AccountType</span>...</span><br><span class="line">  <span class="keyword">private</span> <span class="type">double</span> _interestRate;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">setInterestRate</span> <span class="params">(<span class="type">double</span> arg)</span> &#123;</span><br><span class="line">      _interestRate = arg;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">double</span> <span class="title function_">getInterestRate</span> <span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> _interestRate;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> _interestRate;</span><br><span class="line">  <span class="type">double</span> <span class="title function_">interestForAmount_days</span> <span class="params">(<span class="type">double</span> amount, <span class="type">int</span> days)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> _type.getInterestRate() * amount * days / <span class="number">365</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h5 id="5-2-3-提炼类"><a href="#5-2-3-提炼类" class="headerlink" title="5.2.3 提炼类"></a>5.2.3 提炼类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>...</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> _name;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getTelephoneNumber</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> (<span class="string">&quot;(&quot;</span> + _officeAreaCode + <span class="string">&quot;) &quot;</span> + _officeNumber);</span><br><span class="line">   &#125;</span><br><span class="line">   String <span class="title function_">getOfficeAreaCode</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> _officeAreaCode;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">setOfficeAreaCode</span><span class="params">(String arg)</span> &#123;</span><br><span class="line">       _officeAreaCode = arg;</span><br><span class="line">   &#125;</span><br><span class="line">   String <span class="title function_">getOfficeNumber</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> _officeNumber;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">setOfficeNumber</span><span class="params">(String arg)</span> &#123;</span><br><span class="line">       _officeNumber = arg;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">private</span> String _name;</span><br><span class="line">   <span class="keyword">private</span> String _officeAreaCode;</span><br><span class="line">   <span class="keyword">private</span> String _officeNumber;</span><br></pre></td></tr></table></figure><p>因为后续TelephoneNumber可能会有扩展，因此将此提炼成一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TelephoneNumber</span> &#123;</span><br><span class="line">   String <span class="title function_">getAreaCode</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> _areaCode;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">setAreaCode</span><span class="params">(String arg)</span> &#123;</span><br><span class="line">       _areaCode = arg;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">private</span> String _areaCode;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">Person</span>...</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getTelephoneNumber</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> (<span class="string">&quot;(&quot;</span> + getOfficeAreaCode() + <span class="string">&quot;) &quot;</span> + _officeNumber);</span><br><span class="line">   &#125;</span><br><span class="line">   String <span class="title function_">getOfficeAreaCode</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> _officeTelephone.getAreaCode();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">setOfficeAreaCode</span><span class="params">(String arg)</span> &#123;</span><br><span class="line">       _officeTelephone.setAreaCode(arg);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>...</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> _name;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getTelephoneNumber</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> _officeTelephone.getTelephoneNumber();</span><br><span class="line">       </span><br><span class="line">TelephoneNumber <span class="title function_">getOfficeTelephone</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> _officeTelephone;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">private</span> String _name;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">TelephoneNumber</span> <span class="variable">_officeTelephone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TelephoneNumber</span>();</span><br><span class="line">   </span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">TelephoneNumber</span>...</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getTelephoneNumber</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> (<span class="string">&quot;(&quot;</span> + _areaCode + <span class="string">&quot;) &quot;</span> + _number);</span><br><span class="line">   &#125;</span><br><span class="line">   String <span class="title function_">getAreaCode</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> _areaCode;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">setAreaCode</span><span class="params">(String arg)</span> &#123;</span><br><span class="line">       _areaCode = arg;</span><br><span class="line">   &#125;</span><br><span class="line">   String <span class="title function_">getNumber</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> _number;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">setNumber</span><span class="params">(String arg)</span> &#123;</span><br><span class="line">       _number = arg;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">private</span> String _number;</span><br><span class="line">   <span class="keyword">private</span> String _areaCode;</span><br></pre></td></tr></table></figure><h5 id="5-2-3-将类内联化"><a href="#5-2-3-将类内联化" class="headerlink" title="5.2.3 将类内联化"></a>5.2.3 将类内联化</h5><p>是提炼类的反过程</p><h5 id="5-2-4-隐藏Delegate"><a href="#5-2-4-隐藏Delegate" class="headerlink" title="5.2.4 隐藏Delegate"></a>5.2.4 隐藏Delegate</h5><p>某些时候，一个功能要经过好多层委托，最后才能看到最终的实现，如果委托链过长，显然是会影响代码阅读的。一条有用的经验是委托层级不能超过三层。</p><h4 id="5-3-重新组织数据"><a href="#5-3-重新组织数据" class="headerlink" title="5.3 重新组织数据"></a>5.3 重新组织数据</h4><h5 id="5-3-1-以对象取代数据值"><a href="#5-3-1-以对象取代数据值" class="headerlink" title="5.3.1 以对象取代数据值"></a>5.3.1 以对象取代数据值</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Order</span>...</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Order</span> <span class="params">(String customer)</span> &#123;</span><br><span class="line">       _customer = customer;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getCustomer</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> _customer;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCustomer</span><span class="params">(String arg)</span> &#123;</span><br><span class="line">       _customer = arg;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">private</span> String _customer;</span><br></pre></td></tr></table></figure><p>改为，修改之后的代码扩展更加方便。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Customer</span> <span class="params">(String name)</span> &#123;</span><br><span class="line">       _name = name;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> _name;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> String _name;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Order</span>...</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Order</span> <span class="params">(String customer)</span> &#123;</span><br><span class="line">       _customer = <span class="keyword">new</span> <span class="title class_">Customer</span>(customer);</span><br><span class="line">   &#125;</span><br><span class="line">   “   <span class="keyword">public</span> String <span class="title function_">getCustomer</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> _customer.getName();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">private</span> Customer _customer;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCustomer</span><span class="params">(String arg)</span> &#123;</span><br><span class="line">       _customer = <span class="keyword">new</span> <span class="title class_">Customer</span>(customer);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="5-3-2-以对象取代数组"><a href="#5-3-2-以对象取代数组" class="headerlink" title="5.3.2 以对象取代数组"></a>5.3.2 以对象取代数组</h5><h5 id="5-3-3-以符号常量-x2F-字面常量取代魔法数"><a href="#5-3-3-以符号常量-x2F-字面常量取代魔法数" class="headerlink" title="5.3.3 以符号常量&#x2F;字面常量取代魔法数"></a>5.3.3 以符号常量&#x2F;字面常量取代魔法数</h5><h4 id="5-4-简化条件表达式（重要）"><a href="#5-4-简化条件表达式（重要）" class="headerlink" title="5.4 简化条件表达式（重要）"></a>5.4 简化条件表达式（重要）</h4><h4 id="5-4-1-分解条件式"><a href="#5-4-1-分解条件式" class="headerlink" title="5.4.1 分解条件式"></a>5.4.1 分解条件式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (date.before (SUMMER_START) || date.after(SUMMER_END))</span><br><span class="line">         charge = quantity * _winterRate + _winterServiceCharge;</span><br><span class="line">     <span class="keyword">else</span> charge = quantity * _summerRate;</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (notSummer(date))</span><br><span class="line">         charge = winterCharge(quantity);</span><br><span class="line">     <span class="keyword">else</span> charge = summerCharge (quantity);</span><br><span class="line"> <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">notSummer</span><span class="params">(Date date)</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> date.before (SUMMER_START) || date.after(SUMMER_END);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">private</span> <span class="type">double</span> <span class="title function_">summerCharge</span><span class="params">(<span class="type">int</span> quantity)</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> quantity * _summerRate;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">private</span> <span class="type">double</span> <span class="title function_">winterCharge</span><span class="params">(<span class="type">int</span> quantity)</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> quantity * _winterRate + _winterServiceCharge;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h5 id="5-4-2-合并条件式"><a href="#5-4-2-合并条件式" class="headerlink" title="5.4.2 合并条件式"></a>5.4.2 合并条件式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="title function_">disabilityAmount</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (_seniority &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> (_monthsDisabled &gt; <span class="number">12</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> (_isPartTime) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      <span class="comment">// compute the disability amount</span></span><br><span class="line">      ...</span><br></pre></td></tr></table></figure><p>改成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="title function_">disabilityAmount</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> ((_seniority &lt; <span class="number">2</span>) || (_monthsDisabled &gt; <span class="number">12</span>) || (_isPartTime)) <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">      <span class="comment">// compute the disability amount</span></span><br><span class="line">      ...</span><br></pre></td></tr></table></figure><h5 id="5-4-3-以卫语句取代嵌套条件式"><a href="#5-4-3-以卫语句取代嵌套条件式" class="headerlink" title="5.4.3 以卫语句取代嵌套条件式"></a>5.4.3 以卫语句取代嵌套条件式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="title function_">getPayAmount</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="type">double</span> result;</span><br><span class="line">   <span class="keyword">if</span> (_isDead) result = deadAmount();</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (_isSeparated) result = separatedAmount();</span><br><span class="line">       <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (_isRetired) result = retiredAmount();</span><br><span class="line">           <span class="keyword">else</span> result = normalPayAmount();</span><br><span class="line">       &#125;;</span><br><span class="line">   &#125;</span><br><span class="line"> <span class="keyword">return</span> result;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="title function_">getPayAmount</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (_isDead) <span class="keyword">return</span> deadAmount();</span><br><span class="line">   <span class="keyword">if</span> (_isSeparated) <span class="keyword">return</span> separatedAmount();</span><br><span class="line">   <span class="keyword">if</span> (_isRetired) <span class="keyword">return</span> retiredAmount();</span><br><span class="line">   <span class="keyword">return</span> normalPayAmount();</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><h4 id="5-5-简化函数调用"><a href="#5-5-简化函数调用" class="headerlink" title="5.5 简化函数调用"></a>5.5 简化函数调用</h4><h4 id="5-6-处理概括关系"><a href="#5-6-处理概括关系" class="headerlink" title="5.6 处理概括关系"></a>5.6 处理概括关系</h4><h4 id="5-7-大型重构"><a href="#5-7-大型重构" class="headerlink" title="5.7 大型重构"></a>5.7 大型重构</h4>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 重构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Git-Hooks规范commit信息</title>
      <link href="/2018/04/02/Using-Git-Hooks/"/>
      <url>/2018/04/02/Using-Git-Hooks/</url>
      
        <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>一直以来，公司app的commit信息都比较随意，导致出了问题，查起来比较麻烦。如果有一个工具能在我们git commit之前，收集到commit信息，并判断是否符合规范，若否，则提示提交失败。幸运的是，git本身就提供了这一功能。</p><span id="more"></span><h3 id="2-原理"><a href="#2-原理" class="headerlink" title="2. 原理"></a>2. 原理</h3><p>git和许多版本控制系统一样，它也拥有在特定操作之前或之后执行特定脚本代码的能力。当我们执行git init 命令生成.git文件夹的同时，也会自动生成其他文件，如branches、objects、info、hooks等。其中hooks目录保存了对应的脚本，如pre-commit.sample就是代码提交前的hook，commit之前会先执行该脚本。（注意：此处需要把后缀.sample去掉才能生效）</p><p><img src="/2018/04/02/Using-Git-Hooks/p1.png"></p><p>上方列举的都算是client端的git-hooks。其实，git-hooks支持的能力远远不止途中这些，也支持服务端git-gook。</p><ul><li>applypatch-msg</li><li>pre-applypatch</li><li>post-applypatch</li><li>pre-commit</li><li>prepare-commit-msg</li><li>commit-msg</li><li>post-commit</li><li>pre-rebase</li><li>post-checkout</li><li>post-merge</li><li>pre-receive</li><li>update</li><li>post-receive</li><li>post-update</li><li>pre-auto-gc</li><li>post-rewrite</li></ul><h3 id="3-例子"><a href="#3-例子" class="headerlink" title="3. 例子"></a>3. 例子</h3><p>知道了上面的原理，我们就使用Android Studio（其他项目原理一样）在app代码中实现一个规范commit信息的小功能。</p><h4 id="3-1-编写脚本"><a href="#3-1-编写脚本" class="headerlink" title="3.1 编写脚本"></a>3.1 编写脚本</h4><p>假设我们想要对commit信息做如下规范：<br>[commitType][module] description</p><p>其中：<br>commitType只能是feature（新功能）、bugfix（修复bug）、refactor（重构）、other（其他）。<br>module 则为对应的功能模块，如直播、视频、正文、列表等。<br>description没有限制。</p><p>则我们只需要编写如下脚本即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line">regularExpression=<span class="string">&quot;^\s?\[(feature|bugfix|refactor|other)\]\s?\[.+\]\s?.+&quot;</span></span><br><span class="line">error_msg=<span class="string">&quot;提交信息首行请按照如下格式书写:\n</span></span><br><span class="line"><span class="string">[commitType][module] description\n</span></span><br><span class="line"><span class="string">1. commitType只能是feature（新功能）、bugfix（修复bug）、refactor（重构）、other（其他）</span></span><br><span class="line"><span class="string">2. module 则为对应的功能模块，如直播、视频、正文、列表等</span></span><br><span class="line"><span class="string">3. description 没有限制</span></span><br><span class="line"><span class="string">例如：</span></span><br><span class="line"><span class="string">[feature][列表] 新增头图广告 &quot;</span></span><br><span class="line"><span class="comment">#获取文件首行</span></span><br><span class="line">firstLine=`<span class="built_in">head</span> -n1 <span class="string">&quot;<span class="variable">$1</span>&quot;</span>`</span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$firstLine</span>&quot;</span> =~ <span class="variable">$regularExpression</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;commit success&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;commit fail&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$error_msg</span>&quot;</span> &gt;&amp;2</span><br><span class="line"><span class="built_in">exit</span> 1</span><br></pre></td></tr></table></figure><p>原理非常简单，就是取出commit信息的第一行，然后正则匹配即可。只要把该脚本拷贝到工程的.git&#x2F;hooks目录下，并重命名为commit-msg，同时增加可执行权限，便大功告成！</p><h4 id="3-2-修改gradle文件"><a href="#3-2-修改gradle文件" class="headerlink" title="3.2 修改gradle文件"></a>3.2 修改gradle文件</h4><p>如果你嫌麻烦，找不到.git目录（.git目录是默认隐藏的），可以通过修改gradle文件，配合另一个脚本，便会自动把上述脚本拷贝到.git&#x2F;hooks&#x2F;目录下了。这样做的好处是，你自己只需要把当前修改提交上去，全组的同事拉下最新代码，就生效了！</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;com.android.application&#x27;</span></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">25</span></span><br><span class="line">    buildToolsVersion <span class="string">&quot;25.0.2&quot;</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">&quot;com.netease.githooksdemo&quot;</span></span><br><span class="line">        minSdkVersion <span class="number">15</span></span><br><span class="line">        targetSdkVersion <span class="number">25</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">&quot;1.0&quot;</span></span><br><span class="line">        testInstrumentationRunner <span class="string">&quot;android.support.test.runner.AndroidJUnitRunner&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">&#x27;proguard-android.txt&#x27;</span>), <span class="string">&#x27;proguard-rules.pro&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">// 额外添加的，在build之前检查一下githook脚本是否存在</span></span><br><span class="line">    afterEvaluate &#123;</span><br><span class="line">        tasks.matching &#123;</span><br><span class="line">            it.name.equals(<span class="string">&quot;preBuild&quot;</span>)</span><br><span class="line">        &#125;.each &#123;</span><br><span class="line">            it.doFirst &#123;</span><br><span class="line">                exec &#123;</span><br><span class="line">                    executable <span class="string">&#x27;chmod&#x27;</span></span><br><span class="line">                    args <span class="number">777</span>, <span class="string">&#x27;githook/installGitHook.sh&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">                exec &#123;</span><br><span class="line">                    executable (<span class="string">&#x27;githook/installGitHook.sh&#x27;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，installGitHook.sh脚本代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line">gitHookPath=<span class="string">&#x27;.git/hooks/commit-msg&#x27;</span></span><br><span class="line"><span class="comment"># 获取当前脚本所在的父目录，即githook</span></span><br><span class="line">rootPath=$(<span class="built_in">cd</span> `<span class="built_in">dirname</span> <span class="variable">$0</span>`;<span class="built_in">pwd</span>)</span><br><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="variable">$rootPath</span>&quot;</span></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="comment"># 将目录定向到根目录下，即GitHooksDemo</span></span><br><span class="line">rootPath=`<span class="built_in">pwd</span>`</span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="string">&quot;.git/hooks&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">mkdir</span> .git/hooks</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 判断原来的bash脚本是否存在，如果存在无需复制一遍</span></span><br><span class="line"><span class="comment"># 如果不需要实时更新，把If条件加上即可.</span></span><br><span class="line"><span class="comment">#if [ ! -f &quot;$gitHookPath&quot; ]; then</span></span><br><span class="line">    <span class="comment"># 复制当前脚本到git-hooks目录下</span></span><br><span class="line">    <span class="built_in">cp</span> <span class="variable">$&#123;rootPath&#125;</span>/app/githook/pre_commit.sh <span class="string">&#x27;.git/hooks/commit-msg&#x27;</span></span><br><span class="line">    <span class="comment"># 修改权限</span></span><br><span class="line">    <span class="built_in">chmod</span> a+x <span class="string">&#x27;.git/hooks/commit-msg&#x27;</span></span><br><span class="line"><span class="comment">#fi</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><p>如果我们提交的格式有误，Android Studio 便会提示commit失败：</p><p><img src="/2018/04/02/Using-Git-Hooks/p2.png"></p><h3 id="4-源码下载"><a href="#4-源码下载" class="headerlink" title="4. 源码下载"></a>4. 源码下载</h3><p><a href="https://github.com/nancyyihao/GitHookDemo">GitHookDemo</a></p><h3 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h3><ul><li><a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">Customizing Git - Git Hooks</a></li><li><a href="https://segmentfault.com/a/1190000000356485">Git Hooks (1)：介绍</a></li><li><a href="https://segmentfault.com/a/1190000000356487">GIt Hooks (2)：脚本分类</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Volley源码分析</title>
      <link href="/2018/03/22/Volley-Analysis/"/>
      <url>/2018/03/22/Volley-Analysis/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Volley 是 Google 2013 年推出的网络框架，主要是用来解决移动客户端和服务端的通信问题，其特点是扩展性好、使用简单，今天我们就来分析该框架的具体实现。</p><p><img src="/2018/03/22/Volley-Analysis/p1.png"></p><span id="more"></span><h3 id="第一部分-Android中使用HTTP"><a href="#第一部分-Android中使用HTTP" class="headerlink" title="第一部分 Android中使用HTTP"></a>第一部分 Android中使用HTTP</h3><p>在使用Volley之前，我们来看Android中如何使用HTTP与服务端通信，主要有如下两种方案</p><h4 id="HttpClient"><a href="#HttpClient" class="headerlink" title="HttpClient"></a>HttpClient</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sendRequest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">HttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultHttpClient</span>();</span><br><span class="line">                    <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(<span class="string">&quot;http://www.baidu.com&quot;</span>);</span><br><span class="line">                    <span class="type">HttpResponse</span> <span class="variable">httpResponse</span> <span class="operator">=</span> httpClient.execute(httpGet);</span><br><span class="line">                    System.out.println(httpResponse.toString());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="comment">// ignore</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>非常简单，主要代码也就三行。当然，如果想要使用HTTPS，只需要继承DefaultHttpClient覆写证书管理和校验部分即可，这里就不细说了。</p><h4 id="UrlConnection"><a href="#UrlConnection" class="headerlink" title="UrlConnection"></a>UrlConnection</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sendRequest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">HttpURLConnection</span> <span class="variable">urlConnection</span> <span class="operator">=</span> <span class="literal">null</span>;  </span><br><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line"><span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://www.baidu.com/&quot;</span>);  </span><br><span class="line">urlConnection = (HttpURLConnection)url.openConnection();  </span><br><span class="line">System.out.println(urlConnection.getInputStream().toString());</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line"><span class="comment">// ignore</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;  </span><br><span class="line">urlConnection.disconnect();  </span><br><span class="line">&#125;  </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>和HttpClient相比，代码也不长，主要代码也是三行。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>万丈高楼平地起，不管任何网络框架，都离不开基础。Volley进行网络请求时，最后还是会用到HttpClient和UrlConnection进行连接。</p><h3 id="第二部分-Volley分析"><a href="#第二部分-Volley分析" class="headerlink" title="第二部分 Volley分析"></a>第二部分 Volley分析</h3><h4 id="网络框架"><a href="#网络框架" class="headerlink" title="网络框架"></a>网络框架</h4><p>如果把Volley主要部分抽出来，组成一个最简单的网络框架，大概可以分为四部分</p><ul><li>Request 描述一个请求</li><li>Reponse 负责解析请求结果</li><li>Network 提供接口，保证网络可靠连接</li><li>Manager(RequestQueue) 负责管理所有网络请求<br>具体流程为：用户产生的Request，转发到Manager，Manager根据优先级将Request分发到Network，Network保证网络可靠传输，最后把结果投递给Reponse. 如下图所示</li></ul><p><img src="/2018/03/22/Volley-Analysis/p2.png"></p><h4 id="Volley-项目一览"><a href="#Volley-项目一览" class="headerlink" title="Volley 项目一览"></a>Volley 项目一览</h4><p><img src="/2018/03/22/Volley-Analysis/p3.png"></p><p>图3基本上把Volley项目的中所有文件都列出来了，我们可以看到，Volley代码并不多，而且结构十分清晰</p><ul><li>Request 构建请求</li><li>Response 响应结果</li><li>Cache 缓存</li><li>Network 网络层</li><li>ErrorHandler 错误回调</li><li>Executor 管理Request</li><li>Utils 工具类<br>下面就让我们从代码角度分析Volley执行过程吧。</li></ul><h3 id="第三部分-Volley代码分析"><a href="#第三部分-Volley代码分析" class="headerlink" title="第三部分 Volley代码分析"></a>第三部分 Volley代码分析</h3><p>我们来看一个请求是如何添加到队列中，执行并返回最终的Response的。</p><h4 id="第一步-初始化"><a href="#第一步-初始化" class="headerlink" title="第一步 初始化"></a>第一步 初始化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RequestQueue</span> <span class="variable">queue</span> <span class="operator">=</span> Volley.newRequestQueue(context);</span><br><span class="line">queue.add(request);</span><br></pre></td></tr></table></figure><p>新建一个队列管理所有的Request，队列新建的同时，会自动RequestQueue的start方法，在该方法中同时创建缓存线程和网络分发线程，并启动。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestQueue</span> &#123;</span><br><span class="line">    <span class="comment">// 用来保存有相同Url的Request，因为对于可以缓存的Request来说，Url相同，意味着Response也应该相同</span></span><br><span class="line">    <span class="comment">// 对于这类Request只需要请求一次即可，这是Volley优化点之一</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Queue&lt;Request&lt;?&gt;&gt;&gt; mWaitingRequests =</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Queue&lt;Request&lt;?&gt;&gt;&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The set of all requests currently being processed by this RequestQueue. A Request</span></span><br><span class="line"><span class="comment">     * will be in this set if it is waiting in any queue or currently being processed by</span></span><br><span class="line"><span class="comment">     * any dispatcher.</span></span><br><span class="line"><span class="comment">     * 保存正在处理或者正在等待的请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;Request&lt;?&gt;&gt; mCurrentRequests = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Request&lt;?&gt;&gt;();</span><br><span class="line">    <span class="comment">// 缓存队列，参考mWaitingRequests，该队列中的Request会交给CacheDispatcher进行处理</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PriorityBlockingQueue&lt;Request&lt;?&gt;&gt; mCacheQueue =</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">PriorityBlockingQueue</span>&lt;Request&lt;?&gt;&gt;();</span><br><span class="line">    <span class="comment">// 所有使用add方法添加的请求都会放在这里</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PriorityBlockingQueue&lt;Request&lt;?&gt;&gt; mNetworkQueue =</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">PriorityBlockingQueue</span>&lt;Request&lt;?&gt;&gt;();</span><br><span class="line">    <span class="comment">// 负责分发响应结果，同时把结果投递到主线程中</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ResponseDelivery mDelivery;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        stop();  <span class="comment">// Make sure any currently running dispatchers are stopped.</span></span><br><span class="line">        <span class="comment">// Create the cache dispatcher and start it.</span></span><br><span class="line">        mCacheDispatcher = <span class="keyword">new</span> <span class="title class_">CacheDispatcher</span>(mCacheQueue, mNetworkQueue, mCache, mDelivery);</span><br><span class="line">        mCacheDispatcher.start();</span><br><span class="line">        <span class="comment">// Create network dispatchers (and corresponding threads) up to the pool size.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mDispatchers.length; i++) &#123;</span><br><span class="line">            <span class="type">NetworkDispatcher</span> <span class="variable">networkDispatcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NetworkDispatcher</span>(mNetworkQueue, mNetwork,</span><br><span class="line">                    mCache, mDelivery);</span><br><span class="line">            mDispatchers[i] = networkDispatcher;</span><br><span class="line">            networkDispatcher.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第二部-添加请求"><a href="#第二部-添加请求" class="headerlink" title="第二部 添加请求"></a>第二部 添加请求</h4><p>调用**RequestQueue.add(request)**方法把请求添加到队列中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestQueue</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Adds a Request to the dispatch queue.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request The request to service</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The passed-in request</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Request&lt;T&gt; <span class="title function_">add</span><span class="params">(Request&lt;T&gt; request)</span> &#123;</span><br><span class="line">        <span class="comment">// Tag the request as belonging to this queue and add it to the set of current requests.</span></span><br><span class="line">        request.setRequestQueue(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (mCurrentRequests) &#123;</span><br><span class="line">            mCurrentRequests.add(request);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 添加标记</span></span><br><span class="line">        request.setSequence(getSequenceNumber());</span><br><span class="line">        request.addMarker(<span class="string">&quot;add-to-queue&quot;</span>);</span><br><span class="line"><span class="comment">// 如果不需要缓存，直接把请求添加到网络队列中</span></span><br><span class="line">        <span class="keyword">if</span> (!request.shouldCache()) &#123;</span><br><span class="line">            mNetworkQueue.add(request);</span><br><span class="line">            <span class="keyword">return</span> request;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// mWaitingRequests保存多个Request是同一个Url的情况，</span></span><br><span class="line">       <span class="comment">// 对于Request来说，同一个Url的Response也应该是相同的（request能走到这里说明request是可以缓存的），</span></span><br><span class="line">       <span class="comment">// 因此这里把这些Request缓存起来，当有一个Request有返回值了，剩下的Request也没必要再去请求网络了</span></span><br><span class="line">       <span class="comment">// 这是Volley优化点之一。</span></span><br><span class="line">        <span class="keyword">synchronized</span> (mWaitingRequests) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cacheKey</span> <span class="operator">=</span> request.getCacheKey();</span><br><span class="line">            <span class="keyword">if</span> (mWaitingRequests.containsKey(cacheKey)) &#123;</span><br><span class="line">                <span class="comment">// There is already a request in flight. Queue up.</span></span><br><span class="line">                Queue&lt;Request&lt;?&gt;&gt; stagedRequests = mWaitingRequests.get(cacheKey);</span><br><span class="line">                <span class="keyword">if</span> (stagedRequests == <span class="literal">null</span>) &#123;</span><br><span class="line">                    stagedRequests = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Request&lt;?&gt;&gt;();</span><br><span class="line">                &#125;</span><br><span class="line">                stagedRequests.add(request);</span><br><span class="line">                mWaitingRequests.put(cacheKey, stagedRequests);</span><br><span class="line">                <span class="keyword">if</span> (VolleyLog.DEBUG) &#123;</span><br><span class="line">                    VolleyLog.v(<span class="string">&quot;Request for cacheKey=%s is in flight, putting on hold.&quot;</span>, cacheKey);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Insert &#x27;null&#x27; queue for this cacheKey, indicating there is now a request in</span></span><br><span class="line">                <span class="comment">// flight.</span></span><br><span class="line">                mWaitingRequests.put(cacheKey, <span class="literal">null</span>);</span><br><span class="line">                mCacheQueue.add(request);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> request;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其流程图如下</p><p><img src="/2018/03/22/Volley-Analysis/p4.png"></p><h4 id="第三步-执行网络请求"><a href="#第三步-执行网络请求" class="headerlink" title="第三步 执行网络请求"></a>第三步 执行网络请求</h4><p>在线程中开启一个死循环，不断从请求队列中拿Request</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NetworkDispatcher</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">  ......</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"> ......</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            Request&lt;?&gt; request;</span><br><span class="line">               <span class="comment">// 不断从队列中取请求</span></span><br><span class="line">                request = mQueue.take();</span><br><span class="line">                <span class="comment">// 执行网络请求</span></span><br><span class="line">                <span class="type">NetworkResponse</span> <span class="variable">networkResponse</span> <span class="operator">=</span> mNetwork.performRequest(request);</span><br><span class="line">                request.addMarker(<span class="string">&quot;network-http-complete&quot;</span>);</span><br><span class="line">                ......</span><br><span class="line">                <span class="comment">// 写入缓存</span></span><br><span class="line">                <span class="keyword">if</span> (request.shouldCache() &amp;&amp; response.cacheEntry != <span class="literal">null</span>) &#123;</span><br><span class="line">                    mCache.put(request.getCacheKey(), response.cacheEntry);</span><br><span class="line">                    request.addMarker(<span class="string">&quot;network-cache-written&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 把结果投递给 Response</span></span><br><span class="line">                request.markDelivered();</span><br><span class="line">                mDelivery.postResponse(request, response);</span><br><span class="line">           ......</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处的mNetwork其实是BasicNetwork，我们再看看BasicNetwork.performRequest方法都干了什么</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicNetwork</span> <span class="keyword">implements</span> <span class="title class_">Network</span> &#123;</span><br><span class="line">   ......</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> NetworkResponse <span class="title function_">performRequest</span><span class="params">(Request&lt;?&gt; request)</span> <span class="keyword">throws</span> VolleyError &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">requestStart</span> <span class="operator">=</span> SystemClock.elapsedRealtime();</span><br><span class="line"><span class="comment">// 省略部分代码</span></span><br><span class="line">            <span class="type">HttpResponse</span> <span class="variable">httpResponse</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">               <span class="comment">// 请求头</span></span><br><span class="line">                Map&lt;String, String&gt; headers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line">                addCacheHeaders(headers, request.getCacheEntry());</span><br><span class="line"><span class="comment">// 执行网络请求,并得到响应报文</span></span><br><span class="line">                httpResponse = mHttpStack.performRequest(request, headers);</span><br><span class="line">               <span class="comment">// 做一层包装后返回</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">NetworkResponse</span>(HttpStatus.SC_NOT_MODIFIED, entry.data,</span><br><span class="line">                            entry.responseHeaders, <span class="literal">true</span>,</span><br><span class="line">                            SystemClock.elapsedRealtime() - requestStart);</span><br><span class="line"><span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BasicNetwork的performRequest方法中又调用了mHttpStack()的performRequest方法，mHttpStack其实是个接口，在Volley中有两种实现：HttpClientStack和HurlStack，我们以HttpClientStack为例，继续分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * An HttpStack that performs request over an &#123;<span class="doctag">@link</span> HttpClient&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpClientStack</span> <span class="keyword">implements</span> <span class="title class_">HttpStack</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> HttpClient mClient;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">HEADER_CONTENT_TYPE</span> <span class="operator">=</span> <span class="string">&quot;Content-Type&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HttpClientStack</span><span class="params">(HttpClient client)</span> &#123;</span><br><span class="line">        mClient = client;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> HttpResponse <span class="title function_">performRequest</span><span class="params">(Request&lt;?&gt; request, Map&lt;String, String&gt; additionalHeaders)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, AuthFailureError &#123;</span><br><span class="line">        <span class="type">HttpUriRequest</span> <span class="variable">httpRequest</span> <span class="operator">=</span> createHttpRequest(request, additionalHeaders);</span><br><span class="line">        addHeaders(httpRequest, additionalHeaders);</span><br><span class="line">        addHeaders(httpRequest, request.getHeaders());</span><br><span class="line">        onPrepareRequest(httpRequest);</span><br><span class="line">        <span class="type">HttpParams</span> <span class="variable">httpParams</span> <span class="operator">=</span> httpRequest.getParams();</span><br><span class="line">        <span class="type">int</span> <span class="variable">timeoutMs</span> <span class="operator">=</span> request.getTimeoutMs();</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Reevaluate this connection timeout based on more wide-scale</span></span><br><span class="line">        <span class="comment">// data collection and possibly different for wifi vs. 3G.</span></span><br><span class="line">        HttpConnectionParams.setConnectionTimeout(httpParams, <span class="number">5000</span>);</span><br><span class="line">        HttpConnectionParams.setSoTimeout(httpParams, timeoutMs);</span><br><span class="line">        <span class="keyword">return</span> mClient.execute(httpRequest);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非常简单，就是文中开头说的，使用HttpClient构建一个请求，然后返回响应信息。而HurlStack的performRequest方法，其实就是对应文中开头说的使用UrlConnection构建请求，这里就不再赘述了。流程图如下</p><p><img src="/2018/03/22/Volley-Analysis/p5.png"></p><p>这里的Network接口设计得十分巧妙，Network接口接收一个Request，返回NetworkResponse，任何人都可以通过实现Network完成自己的网络请求，可以使用HttpStack，也可以根据自己需要使用Socket通信，甚至可以使用底层TCP来通信，这使得框架非常灵活。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>不得不感叹Google工程师的架构设计能力，简单、精炼，扩展性非常好，源码可读性也非常高。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://blog.csdn.net/crazy__chen/article/details/46490635">volley源码解析(三)–Volley核心之RequestQueue类</a><br><a href="http://blog.csdn.net/yanbober/article/details/45307217">Google Volley框架源码走读</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> Volley </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的几个特性</title>
      <link href="/2018/03/20/three-features-of-java/"/>
      <url>/2018/03/20/three-features-of-java/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文主要介绍java语言的三个特性：类型协变和逆变，动态代理和静态代理，注解。</p><span id="more"></span><h3 id="协变和逆变"><a href="#协变和逆变" class="headerlink" title="协变和逆变"></a>协变和逆变</h3><p>借用<a href="http://www.cnblogs.com/en-heng/p/5041124.html"><strong>Treant</strong></a>的博文，逆变与协变用来描述类型转换（type transformation）后的继承关系，其定义：</p><ul><li>如果A、B表示类型，f(⋅)表示类型转换，≤表示继承关系（比如，A≤B表示A是由B派生出来的子类）；</li><li>f(⋅)是逆变（contravariant）的，当A≤B时，有f(B)≤f(A)成立；</li><li>f(⋅)是协变（covariant）的，当A≤B时， 有f(A)≤f(B)成立；</li><li>f(⋅)是不变（invariant）的，当A≤B时上述两个式子均不成立，即f(A)与f(B)相互之间没有继承关系。</li></ul><p>通俗地讲，逆变使得转换后类型变宽（父类转子类），协变使得转换后类型变窄（子类转父类）。<br>在Java中，数组是协变的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Number[] numbers = <span class="keyword">new</span> <span class="title class_">Integer</span>[<span class="number">10</span>];  <span class="comment">// right</span></span><br><span class="line">Integer[] integers = <span class="keyword">new</span> <span class="title class_">Number</span>[<span class="number">10</span>]; <span class="comment">// wrong</span></span><br></pre></td></tr></table></figure><p>泛型则是不变的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Object&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();  <span class="comment">// wrong</span></span><br><span class="line">List&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Object&gt;();  <span class="comment">// wrong</span></span><br><span class="line">List&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();  <span class="comment">// right</span></span><br></pre></td></tr></table></figure><p>但是泛型可以通过通配符号？来实现协变和逆变。<br>泛型协变</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;? <span class="keyword">extends</span> <span class="title class_">Object</span>&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();  <span class="comment">// right</span></span><br></pre></td></tr></table></figure><p>泛型逆变</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;? <span class="built_in">super</span> Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Object&gt;();  <span class="comment">// right</span></span><br></pre></td></tr></table></figure><p>换句话说，extends确定了泛型的上界，而super确定了泛型的下界。<br>而在方法的参数和返回值上，传入的参数应该是参数的子类或者本身，而返回的参数应该是父类或者本身。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Number <span class="title function_">method</span><span class="params">(Number num)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">2</span>)); <span class="comment">//correct</span></span><br><span class="line"><span class="type">Number</span> <span class="variable">result</span> <span class="operator">=</span> method(<span class="keyword">new</span> <span class="title class_">Object</span>()); <span class="comment">//error</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> method(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">2</span>)); <span class="comment">//error</span></span><br><span class="line">在Java <span class="number">1.4</span>中，子类覆盖（override）父类方法时，形参与返回值的类型必须与父类保持一致：</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Super</span> &#123;</span><br><span class="line">    Number <span class="title function_">method</span><span class="params">(Number n)</span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">Super</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    Number <span class="title function_">method</span><span class="params">(Number n)</span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line">从Java <span class="number">1.5</span>开始，子类覆盖父类方法时允许协变返回更为具体的类型：</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Super</span> &#123;</span><br><span class="line">    Number <span class="title function_">method</span><span class="params">(Number n)</span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">Super</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    Integer <span class="title function_">method</span><span class="params">(Number n)</span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><p>先看如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IFruit</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Apple</span> <span class="keyword">implements</span> <span class="title class_">IFruit</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;You are eating Apple!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Orange</span> <span class="keyword">implements</span> <span class="title class_">IFruit</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;You are eating Orange!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有个IFruit接口，分别有两个类实现了IFruit接口，有一天产品经理过来和你说需求变更了，现在需要在每个IFruit的实现类的eat方法打印一句话。如果只有两个类，这难不倒你，尽管忘代码里添加就可以了，但是如果有一百甚至一千个这样的类呢？这就需要用到代理了。</p><h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><p>我们可以新建一个这样的代理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticProxy</span> <span class="keyword">implements</span> <span class="title class_">IFruit</span> &#123;</span><br><span class="line"><span class="keyword">private</span> IFruit mOrig ;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="title function_">StaticProxy</span><span class="params">(IFruit orig)</span> &#123;</span><br><span class="line">mOrig = orig ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">mOrig.eat();</span><br><span class="line">System.out.println(<span class="string">&quot;add one line!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再调用Proxy类的eat()方法，同样能达到目的。问题又来了，如果我不仅修改IFruit，还修改其他的接口比如IAnimal、IRobot等接口，而且这样的接口也同样有成百上千个呢？这就需要用到java的动态代理了</p><h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><p>java动态代理需要实现InvocationHandler接口，原来类的所有方法的调用前都会调用DynamicProxy.invoke方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicProxy</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Object mOrig ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">DynamicProxy</span><span class="params">(Object orig)</span> &#123;</span><br><span class="line">mOrig = orig ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span><br><span class="line"><span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(mOrig, args);</span><br><span class="line">System.out.println(<span class="string">&quot;add one line!&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainTest</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Apple</span> <span class="variable">apple</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Apple</span>();</span><br><span class="line">((IFruit)dynamicProxy(apple)).eat();</span><br><span class="line">staticProxy(apple).eat();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> IFruit <span class="title function_">staticProxy</span><span class="params">(IFruit fruit)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StaticProxy</span>(fruit);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title function_">dynamicProxy</span><span class="params">(Object fruit)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Proxy.newProxyInstance(</span><br><span class="line">fruit.getClass().getClassLoader(), </span><br><span class="line">fruit.getClass().getInterfaces(), </span><br><span class="line"><span class="keyword">new</span> <span class="title class_">DynamicProxy</span>(fruit)</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在invoke方法中，我们可以执行原来的方法(eat)，当然也能加入自己的代码逻辑。通过代码我们可以看到，动态代理类无需实现IFruit接口，这样的好处是可以节省很多的代码。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>动态代理和静态代理功能上并无差别。动态代理只是做了进一步的封装。使用代理模式可以增强原来方法的功能，通过代理类的Proxy方法可以轻松修改原来的代码逻辑，结合反射可以达到更改某些系统API的目的，Android插件开发中，DroidPlugin可以说是把这种思想运用到了极致。</p><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><p>Java中的注解(Annotation)，也称元数据，JDK1.5引入，主要用来对类、变量、方法、方法参数等进行注释说明。<br>Java中主要有如下四个类型的注解</p><ul><li>@Documented 表示该注解可以包含在javadoc中</li><li>@Retention 标明注解的声明周期（源码、class文件、运行时）</li><li>@Target 注解可以使用在哪些地方（方法、类、变量等）</li><li>@Inherited – 是否允许子类继承该注解<br>注解除了对变量、方法等进行说明，还能结合反射完成更强大的功能。</li></ul><p>Android中经常使用findViewById来查找一些控件，Butternife可以通过注解的方式注入代码使得View和id自动绑定，类似代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Bind(R.id.text_view)</span></span><br><span class="line">    <span class="keyword">private</span> TextView tv ;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        InjectHelper.inject(<span class="built_in">this</span>);</span><br><span class="line">        tv.setText(<span class="string">&quot;hello boys!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们也可以通过使用注解和反射的方式完成类似buffernife的功能。</p><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>先新建一个注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Bind &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Target本身也是一个注解，是用来标明我们新建的注解可以使用在哪些地方的。而Retention这个注解是用来标明注解的生命周期，声明成RetentionPolicy.RUNTIME则表用该注解在运行时也会一直保留。</p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>通过反射获取对应值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InjectHelper</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title function_">inject</span><span class="params">(Activity acitvity)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Field[] fields = acitvity.getClass().getDeclaredFields();</span><br><span class="line"><span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line"><span class="type">Bind</span> <span class="variable">bind</span> <span class="operator">=</span> field.getAnnotation(Bind.class);</span><br><span class="line"><span class="keyword">if</span> (bind != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> bind.value();</span><br><span class="line"><span class="type">View</span> <span class="variable">v</span> <span class="operator">=</span> acitvity.findViewById(id);</span><br><span class="line">field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">field.set(acitvity, v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就完成了相应注入操作，也能达到和butternife相应的功能。但是代码中用到了反射，效率会比butternife慢，因为butternife是在编译时期生成相应代码的，运行时性能几乎不会有影响。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://www.cnblogs.com/en-heng/p/5041124.html">Java中的逆变与协变</a></li><li><a href="http://swiftlet.net/archives/1950">第六节：协变和逆变</a></li><li><a href="http://stackoverflow.com/questions/4343202/difference-between-super-t-and-extends-t-in-java">Difference between &lt;? super T&gt; and &lt;? extends T&gt; in Java</a></li><li><a href="http://baike.baidu.com/link?url=KYynJX4LbScxJQvDfQ2QEPVUqlP6tZtJ5WPONrXpYvVbcyEbZYdDmc7fblUX0Ky2ODpmWT-AKdEPiqM5a2iraK">Java 注解</a></li><li><a href="https://en.wikipedia.org/wiki/Annotation">Annotation</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Retrofit2源码分析</title>
      <link href="/2018/03/12/Deep-In-Retrofit2/"/>
      <url>/2018/03/12/Deep-In-Retrofit2/</url>
      
        <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>根据Retrofit官网的定义：A type-safe HTTP client for Android and Java，意即Retrofit是一个类型安全的HTTP网络请求框架。本文先介绍Retrofit2的基本使用方法，再逐步分析Retrofit代码基本实现，最后对Retrofit优缺点进行总结。</p><span id="more"></span><h3 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2. 基本使用"></a>2. 基本使用</h3><p>使用非常简单，可以参考<a href="http://square.github.io/retrofit/">Retrofit官网</a></p><h4 id="2-1-定义接口"><a href="#2-1-定义接口" class="headerlink" title="2.1 定义接口"></a>2.1 定义接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GitHubService</span> &#123;</span><br><span class="line">    <span class="meta">@GET(&quot;users/&#123;user&#125;/repos&quot;)</span></span><br><span class="line">    Call&lt;List&lt;Repo&gt;&gt; <span class="title function_">listRepos</span><span class="params">(<span class="meta">@Path(&quot;user&quot;)</span> String user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-构建实例"><a href="#2-2-构建实例" class="headerlink" title="2.2 构建实例"></a>2.2 构建实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Retrofit</span> <span class="variable">retrofit</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Retrofit</span>.Builder()</span><br><span class="line">        .baseUrl(<span class="string">&quot;https://api.github.com/&quot;</span>)</span><br><span class="line">        .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">        .build();</span><br><span class="line"><span class="type">GitHubService</span> <span class="variable">service</span> <span class="operator">=</span> retrofit.create(GitHubService.class);</span><br></pre></td></tr></table></figure><h4 id="2-3-转换"><a href="#2-3-转换" class="headerlink" title="2.3 转换"></a>2.3 转换</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Call&lt;List&lt;Repo&gt;&gt; call = service.listRepos(<span class="string">&quot;octocat&quot;</span>);</span><br><span class="line">List&lt;Repo&gt; repos = call.execute().body();</span><br></pre></td></tr></table></figure><h3 id="3-代码分析"><a href="#3-代码分析" class="headerlink" title="3. 代码分析"></a>3. 代码分析</h3><p>Retrofit严格意义上来说，不算一个网络请求框架，因为Retrofit2的主要工作是把请求用清晰、简洁的方式描述出来，并把一个HTTP API转换成Java接口。具体的网络请求工作其实是由OkHttp来完成的。下面我们从请求描述和请求发起和网络请求管理三个方面来分析。</p><h4 id="3-1-如何描述请求"><a href="#3-1-如何描述请求" class="headerlink" title="3.1 如何描述请求"></a>3.1 如何描述请求</h4><p>我们关心：Retrofit是怎么把Java接口转成一个Call的，又是怎么把一个Call转成一个可以发送请求的Request的。</p><p>对于定义的接口，使用动态代理，每一个接口方法调用时，都会调用&#x3D;&#x3D;invoke&#x3D;&#x3D;方法</p><h5 id="3-1-1-Retrofit-create"><a href="#3-1-1-Retrofit-create" class="headerlink" title="3.1.1 Retrofit.create"></a>3.1.1 <strong>Retrofit.create</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">create</span><span class="params">(<span class="keyword">final</span> Class&lt;T&gt; service)</span> &#123;</span><br><span class="line">  Utils.validateServiceInterface(service);</span><br><span class="line">  <span class="keyword">if</span> (validateEagerly) &#123;</span><br><span class="line">    eagerlyValidateMethods(service);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (T) Proxy.newProxyInstance(service.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>&lt;?&gt;[] &#123; service &#125;,</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">        <span class="comment">// 针对不同平台做适配(Java/Android)</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Platform</span> <span class="variable">platform</span> <span class="operator">=</span> Platform.get();</span><br><span class="line">        <span class="meta">@Override</span> <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, <span class="meta">@Nullable</span> Object[] args)</span></span><br><span class="line">            <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">          <span class="comment">// If the method is a method from Object then defer to normal invocation.</span></span><br><span class="line">          <span class="keyword">if</span> (method.getDeclaringClass() == Object.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> method.invoke(<span class="built_in">this</span>, args);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (platform.isDefaultMethod(method)) &#123;</span><br><span class="line">            <span class="keyword">return</span> platform.invokeDefaultMethod(method, service, proxy, args);</span><br><span class="line">          &#125;</span><br><span class="line">          ServiceMethod&lt;Object, Object&gt; serviceMethod =</span><br><span class="line">              (ServiceMethod&lt;Object, Object&gt;) loadServiceMethod(method);</span><br><span class="line">          OkHttpCall&lt;Object&gt; okHttpCall = <span class="keyword">new</span> <span class="title class_">OkHttpCall</span>&lt;&gt;(serviceMethod, args);</span><br><span class="line">          <span class="keyword">return</span> serviceMethod.callAdapter.adapt(okHttpCall);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处使用了缓存，对于加载过的方法，直接从cache中拿。ServiceMethod主要作用是把一个Java接口映射到Http请求上.泛型R表示返回请求值,T表示Java接口返回值(Demo中Call&gt;)</p><p>问题：为何有了Converter还要有CallAdapter? 二者有和区别？</p><p>Converter作用主要是提供不同数据类型的转换，比如把ResponseBody转成List，把RequestBody数据转换成Json格式，等等。抽象成一个接口便于扩展，增加灵活性；</p><p>CallAdapter主要作用是把Call&gt;转成Java对象(List)</p><h5 id="3-1-2-loadServiceMethod"><a href="#3-1-2-loadServiceMethod" class="headerlink" title="3.1.2 loadServiceMethod"></a>3.1.2 <strong>loadServiceMethod</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ServiceMethod&lt;?, ?&gt; loadServiceMethod(Method method) &#123;</span><br><span class="line">  ServiceMethod&lt;?, ?&gt; result = serviceMethodCache.get(method);</span><br><span class="line">  <span class="keyword">if</span> (result != <span class="literal">null</span>) <span class="keyword">return</span> result;</span><br><span class="line">  <span class="keyword">synchronized</span> (serviceMethodCache) &#123;</span><br><span class="line">    result = serviceMethodCache.get(method);</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="literal">null</span>) &#123;</span><br><span class="line">      result = <span class="keyword">new</span> <span class="title class_">ServiceMethod</span>.Builder&lt;&gt;(<span class="built_in">this</span>, method).build();</span><br><span class="line">      serviceMethodCache.put(method, result);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每一个Retrofit2中Call(此处拿OkHttpCall举例，不一定是Call，如果是RxJava，则为Obserable，原理一致)调用execute()方法之后，返回的是一个Retrofit2的Response。有个比较有趣的地方是Retrofit2中的OkHttpCall不是真正发起请求的，而是调用OkHttp3.Call。而Retrofit2中的Response也不是真相的返回结果，而是利用OkHttp3.Response作为返回。这种组合的方式有个好处就是解耦，以后若不想用OkHttp3改用其他框架，工作量也会小很多。</p><p>上面已经把Java接口转成Call部分说完了，接下来看如何把Call转成Request.</p><h5 id="3-1-3-ServiceMethod-Builder-build"><a href="#3-1-3-ServiceMethod-Builder-build" class="headerlink" title="3.1.3 ServiceMethod.Builder.build()"></a>3.1.3 <strong>ServiceMethod.Builder.build()</strong></h5><p>在build()方法中主要是解析方法注解、方法参数注解，从而得到一个Http请求的完整信息（如httpMethod, baseUrl, relativeUrl, headers,<br>contentType, hasBody, isFormEncoded, isMultipart等）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Builder</span>&lt;T, R&gt; &#123;</span><br><span class="line">  <span class="comment">// 省略部分代码...    </span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> ServiceMethod <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">    callAdapter = createCallAdapter();</span><br><span class="line">    responseType = callAdapter.responseType();</span><br><span class="line">    <span class="comment">// 省略部分代码...    </span></span><br><span class="line">    responseConverter = createResponseConverter();</span><br><span class="line">    <span class="keyword">for</span> (Annotation annotation : methodAnnotations) &#123;</span><br><span class="line">     <span class="comment">// 解析方法对应注解</span></span><br><span class="line">      parseMethodAnnotation(annotation);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略部分代码...    </span></span><br><span class="line">    <span class="type">int</span> <span class="variable">parameterCount</span> <span class="operator">=</span> parameterAnnotationsArray.length;</span><br><span class="line">    parameterHandlers = <span class="keyword">new</span> <span class="title class_">ParameterHandler</span>&lt;?&gt;[parameterCount];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">0</span>; p &lt; parameterCount; p++) &#123;</span><br><span class="line">      <span class="type">Type</span> <span class="variable">parameterType</span> <span class="operator">=</span> parameterTypes[p];</span><br><span class="line">      <span class="comment">// 省略部分代码...    </span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 获取参数对应的注解</span></span><br><span class="line">      Annotation[] parameterAnnotations = parameterAnnotationsArray[p];</span><br><span class="line">      <span class="comment">// 省略部分代码...   </span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 解析参数对应注解</span></span><br><span class="line">      parameterHandlers[p] = parseParameter(p, parameterType, parameterAnnotations);</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="comment">// 省略部分代码...    </span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServiceMethod</span>&lt;&gt;(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h5 id="3-1-4-ServiceMethod-toRequest"><a href="#3-1-4-ServiceMethod-toRequest" class="headerlink" title="3.1.4 ServiceMethod.toRequest()"></a>3.1.4 <strong>ServiceMethod.toRequest()</strong></h5><p>之后，再通过toRequest()把步骤3.1.4中的信息(httpMethod, baseUrl, relativeUrl, headers,contentType, hasBody, isFormEncoded, isMultipart)保存到&#x3D;&#x3D;OkHttp3.Request&#x3D;&#x3D;中。具体参数替换和赋值（如替换Url、修改relativeUrl）等操作则放在ParameterHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Builds an HTTP request from method arguments. */</span></span><br><span class="line">Request <span class="title function_">toRequest</span><span class="params">(<span class="meta">@Nullable</span> Object... args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  <span class="type">RequestBuilder</span> <span class="variable">requestBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestBuilder</span>(httpMethod, baseUrl, relativeUrl, headers,</span><br><span class="line">      contentType, hasBody, isFormEncoded, isMultipart);</span><br><span class="line">  <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span> <span class="comment">// It is an error to invoke a method with the wrong arg types.</span></span><br><span class="line">  ParameterHandler&lt;Object&gt;[] handlers = (ParameterHandler&lt;Object&gt;[]) parameterHandlers;</span><br><span class="line">  <span class="type">int</span> <span class="variable">argumentCount</span> <span class="operator">=</span> args != <span class="literal">null</span> ? args.length : <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (argumentCount != handlers.length) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Argument count (&quot;</span> + argumentCount</span><br><span class="line">        + <span class="string">&quot;) doesn&#x27;t match expected count (&quot;</span> + handlers.length + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">0</span>; p &lt; argumentCount; p++) &#123;</span><br><span class="line">    handlers[p].apply(requestBuilder, args[p]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> requestBuilder.build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，把Call转换成一个<strong>OkHttp3.Request</strong>类的过程分析完毕。</p><h4 id="3-2-发起请求"><a href="#3-2-发起请求" class="headerlink" title="3.2 发起请求"></a>3.2 发起请求</h4><p>实际上发送请求的是OkHttp3而不是Retrofit。因此发送请求过程十分简单，使用一个包装类OkHttpCall包装OkHttp3.Call请求，返回结果。</p><h5 id="3-2-1-Retrfit-OkHttpCall"><a href="#3-2-1-Retrfit-OkHttpCall" class="headerlink" title="3.2.1 Retrfit.OkHttpCall"></a>3.2.1 <strong>Retrfit.OkHttpCall</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="keyword">public</span> Response&lt;T&gt; <span class="title function_">execute</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  okhttp3.Call call;</span><br><span class="line">  <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (executed) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Already executed.&quot;</span>);</span><br><span class="line">    executed = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (creationFailure != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (creationFailure <span class="keyword">instanceof</span> IOException) &#123;</span><br><span class="line">        <span class="keyword">throw</span> (IOException) creationFailure;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> (RuntimeException) creationFailure;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    call = rawCall;</span><br><span class="line">    <span class="keyword">if</span> (call == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 使用OkHttp3.Call进行网络请求，并解析结果</span></span><br><span class="line">        call = rawCall = createRawCall();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException | RuntimeException e) &#123;</span><br><span class="line">        creationFailure = e;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (canceled) &#123;</span><br><span class="line">    call.cancel();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 解析结果</span></span><br><span class="line">  <span class="keyword">return</span> parseResponse(call.execute());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-2-2-OkHttpCall-createRawCall-amp-amp-parseResponse"><a href="#3-2-2-OkHttpCall-createRawCall-amp-amp-parseResponse" class="headerlink" title="3.2.2 OkHttpCall.createRawCall &amp;&amp; parseResponse()"></a>3.2.2 <strong>OkHttpCall.createRawCall &amp;&amp; parseResponse()</strong></h5><p>使用createRawCall创建<strong>OkHttp3.Call</strong>请求，并通过parseResponse()解析返回结果并包装成<strong>Retrofit.Response</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新建网络请求</span></span><br><span class="line"><span class="keyword">private</span> okhttp3.Call <span class="title function_">createRawCall</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> serviceMethod.toRequest(args);</span><br><span class="line">  okhttp3.<span class="type">Call</span> <span class="variable">call</span> <span class="operator">=</span> serviceMethod.callFactory.newCall(request);</span><br><span class="line">  <span class="keyword">if</span> (call == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;Call.Factory returned null.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> call;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 解析网络请求结果</span></span><br><span class="line">Response&lt;T&gt; <span class="title function_">parseResponse</span><span class="params">(okhttp3.Response rawResponse)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  <span class="type">ResponseBody</span> <span class="variable">rawBody</span> <span class="operator">=</span> rawResponse.body();</span><br><span class="line">  <span class="comment">// Remove the body&#x27;s source (the only stateful object) so we can pass the response along.</span></span><br><span class="line">  rawResponse = rawResponse.newBuilder()</span><br><span class="line">      .body(<span class="keyword">new</span> <span class="title class_">NoContentResponseBody</span>(rawBody.contentType(), rawBody.contentLength()))</span><br><span class="line">      .build();</span><br><span class="line">  <span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> rawResponse.code();</span><br><span class="line">  <span class="keyword">if</span> (code &lt; <span class="number">200</span> || code &gt;= <span class="number">300</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// Buffer the entire body to avoid future I/O.</span></span><br><span class="line">      <span class="type">ResponseBody</span> <span class="variable">bufferedBody</span> <span class="operator">=</span> Utils.buffer(rawBody);</span><br><span class="line">      <span class="keyword">return</span> Response.error(bufferedBody, rawResponse);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      rawBody.close();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (code == <span class="number">204</span> || code == <span class="number">205</span>) &#123;</span><br><span class="line">    rawBody.close();</span><br><span class="line">    <span class="keyword">return</span> Response.success(<span class="literal">null</span>, rawResponse);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">ExceptionCatchingRequestBody</span> <span class="variable">catchingBody</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExceptionCatchingRequestBody</span>(rawBody);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">T</span> <span class="variable">body</span> <span class="operator">=</span> serviceMethod.toResponse(catchingBody);</span><br><span class="line">    <span class="keyword">return</span> Response.success(body, rawResponse);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">    <span class="comment">// If the underlying source threw an exception, propagate that rather than indicating it was</span></span><br><span class="line">    <span class="comment">// a runtime exception.</span></span><br><span class="line">    catchingBody.throwIfCaught();</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，一个接口从发起到返回结果，并包装成Java对象的过程分析完毕。</p><h5 id="3-2-3-大致流程"><a href="#3-2-3-大致流程" class="headerlink" title="3.2.3 大致流程"></a>3.2.3 <strong>大致流程</strong></h5><ol><li>创建Retrofit实例 (retrofit)，设置一些全局参数如baseUrl、converer等</li><li>创建Java接口实例 (service)</li><li>调用Java接口实例具体方法 (service.listRepos(“octocat”))，生成ServiceMethod实例，用来管理接口</li><li>由ServiceMethod解析请求参数</li><li>由代理Call发出的请求放到OkHttp3请求队列中请求</li><li>将请求结果回调</li><li>最终将数据转化成目标类型</li></ol><p><img src="/2018/03/12/Deep-In-Retrofit2/p1.png"></p><h4 id="3-3-请求管理"><a href="#3-3-请求管理" class="headerlink" title="3.3 请求管理"></a>3.3 请求管理</h4><p>Retrofit2的请求其实是借用的OkHttp3的网络请求。这部分内容将在下篇文章进行介绍。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Retrofit2写得非常短小精悍，其巧妙地利用动态代理、泛型、缓存等技术，引入了Builder模式、适配器模式等设计模式，为Retrofit扩展性提供了强大的保证，代码可读性高的同时也不失效率。就网络框架上，个人可能更倾向于使用Volley，但是Retrofit2使用注解来描述请求的这个思想包括使用到的技术都可以借鉴，扩展开来，数据库或许是另一个使用注解描述一个Query的场景。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Retrofit2 </tag>
            
            <tag> 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android-侧滑返回方案简析</title>
      <link href="/2018/03/11/Android-Slide-Back/"/>
      <url>/2018/03/11/Android-Slide-Back/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>自从iOS提供了侧滑返回上一级页面功能之后，Android很多应用也开始跟风，美其名曰：保证体验上的统一。作为开发者，当然得研究一下如何实现。</p><span id="more"></span><h3 id="方案1-透明activity"><a href="#方案1-透明activity" class="headerlink" title="方案1-透明activity"></a>方案1-透明activity</h3><p>将activity背景色设置成透明，滑动时，将activity-content-view跟随侧滑。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>原理易懂</li><li>实现简单</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>会影响activity生命周期（ 经测试，不会走到上一个activity-onStop，这篇回答<a href="https://www.zhihu.com/question/33269774/answer/56429763">微信（Android）左滑 finish activity 这个是怎么实现的?</a>说不会走到onPause是不对的。</li><li>对性能有一定影响（<a href="https://www.youtube.com/watch?v=wIy8g8yNhNk">Hidden Cost of Transparency</a> ，<a href="http://hukai.me/android-performance-patterns-season-2/">Android性能优化典范 - 第2季</a>）</li></ul><h4 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h4><p>我们可以用如下代码实现一个简化版本的侧滑返回：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SlideBackActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> mFinishAfterAnimate;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> mLastDownPointX;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> mIsSliding;</span><br><span class="line">    <span class="keyword">private</span> View mContentView;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> mScreenWidth;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> mTouchSlop;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        Log.e(<span class="string">&quot;kkk&quot;</span>, <span class="string">&quot;SlideBackActivity-onCreate&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_slide_back);</span><br><span class="line">        mContentView = findViewById(Window.ID_ANDROID_CONTENT);</span><br><span class="line">        mTouchSlop = ViewConfiguration.get(<span class="built_in">this</span>).getScaledTouchSlop();</span><br><span class="line">        mScreenWidth = getResources().getDisplayMetrics().widthPixels;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">action</span> <span class="operator">=</span> ev.getAction() &amp; MotionEvent.ACTION_MASK;</span><br><span class="line">        <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                mLastDownPointX = ev.getRawX();</span><br><span class="line">                mFinishAfterAnimate = <span class="literal">false</span>;</span><br><span class="line">                mIsSliding = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                <span class="keyword">final</span> <span class="type">float</span> <span class="variable">curPointX</span> <span class="operator">=</span> ev.getRawX();</span><br><span class="line">                <span class="keyword">if</span> (mIsSliding) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(Math.abs(curPointX - mLastDownPointX) &gt; mTouchSlop) &#123;</span><br><span class="line">                        mContentView.setX(Math.abs(curPointX - mLastDownPointX));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                <span class="keyword">final</span> <span class="type">float</span> <span class="variable">currentPointX</span> <span class="operator">=</span> ev.getRawX();</span><br><span class="line">                <span class="keyword">if</span>(Math.abs(currentPointX - mLastDownPointX) &gt; <span class="number">500</span>) &#123;</span><br><span class="line">                    mFinishAfterAnimate = <span class="literal">true</span>;</span><br><span class="line">                    animateContentView(Math.abs(currentPointX - mLastDownPointX), mScreenWidth);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    mFinishAfterAnimate = <span class="literal">false</span>;</span><br><span class="line">                    animateContentView(Math.abs(currentPointX - mLastDownPointX), <span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                mIsSliding = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.dispatchTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">animateContentView</span><span class="params">(<span class="type">float</span> start, <span class="type">float</span> end)</span> &#123;</span><br><span class="line">        <span class="type">ObjectAnimator</span> <span class="variable">anim1</span> <span class="operator">=</span> ObjectAnimator.ofFloat(mContentView, <span class="string">&quot;x&quot;</span>, start, end);</span><br><span class="line">        <span class="type">AnimatorSet</span> <span class="variable">animSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnimatorSet</span>();</span><br><span class="line">        animSet.setInterpolator(<span class="keyword">new</span> <span class="title class_">LinearInterpolator</span>());</span><br><span class="line">        animSet.setDuration(<span class="number">100</span>);</span><br><span class="line">        animSet.playTogether(anim1);</span><br><span class="line">        <span class="keyword">if</span> (mFinishAfterAnimate) &#123;</span><br><span class="line">            animSet.addListener(<span class="keyword">new</span> <span class="title class_">Animator</span>.AnimatorListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAnimationStart</span><span class="params">(Animator animation)</span> &#123;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAnimationEnd</span><span class="params">(Animator animation)</span> &#123;</span><br><span class="line">                    finish();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAnimationCancel</span><span class="params">(Animator animation)</span> &#123;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAnimationRepeat</span><span class="params">(Animator animation)</span> &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        animSet.start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">finish</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.finish();</span><br><span class="line">        <span class="keyword">if</span> (mFinishAfterAnimate) overridePendingTransition(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onStart</span><span class="params">()</span> &#123;</span><br><span class="line">        Log.e(<span class="string">&quot;kkk&quot;</span>, <span class="string">&quot;SlideBackActivity-onStart&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.onStart();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onResume</span><span class="params">()</span> &#123;</span><br><span class="line">        Log.e(<span class="string">&quot;kkk&quot;</span>, <span class="string">&quot;SlideBackActivity-onResume&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.onResume();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onPause</span><span class="params">()</span> &#123;</span><br><span class="line">        Log.e(<span class="string">&quot;kkk&quot;</span>, <span class="string">&quot;SlideBackActivity-onPause&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.onPause();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onStop</span><span class="params">()</span> &#123;</span><br><span class="line">        Log.e(<span class="string">&quot;kkk&quot;</span>, <span class="string">&quot;SlideBackActivity-onStop&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.onStop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        Log.e(<span class="string">&quot;kkk&quot;</span>, <span class="string">&quot;SlideBackActivity-onDestroy&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然了，前提还是得把activity主题设置成透明</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;Transparent&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;Theme.AppCompat.Light.NoActionBar&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowBackground&quot;</span>&gt;</span>@android:color/transparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowIsTranslucent&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过下方日志我们可以看到，启动SlideBackAcitvity时，上一个activity(main)-onStop方法没有走到，而退出SlideBackAcitvity后，上一个activity(main)-onStart方法也没有走到。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">03-02 15:28:54.790 1531-1531/com.mason.swipebackdemo E/kkk: main-onStart</span><br><span class="line">03-02 15:28:54.799 1531-1531/com.mason.swipebackdemo E/kkk: main-onResume</span><br><span class="line">03-02 15:29:11.439 1531-1531/com.mason.swipebackdemo E/kkk: main-onPause</span><br><span class="line">03-02 15:29:11.447 1531-1531/com.mason.swipebackdemo E/kkk: SlideBackActivity-onCreate</span><br><span class="line">03-02 15:29:11.452 1531-1531/com.mason.swipebackdemo E/kkk: SlideBackActivity-onStart</span><br><span class="line">03-02 15:29:11.453 1531-1531/com.mason.swipebackdemo E/kkk: SlideBackActivity-onResume</span><br><span class="line">03-02 15:29:16.905 1531-1531/com.mason.swipebackdemo E/kkk: SlideBackActivity-onPause</span><br><span class="line">03-02 15:29:16.924 1531-1531/com.mason.swipebackdemo E/kkk: main-onResume</span><br><span class="line">03-02 15:29:16.966 1531-1531/com.mason.swipebackdemo E/kkk: SlideBackActivity-onStop</span><br><span class="line">03-02 15:29:16.966 1531-1531/com.mason.swipebackdemo E/kkk: SlideBackActivity-onDestroy</span><br></pre></td></tr></table></figure><h4 id="开源方案"><a href="#开源方案" class="headerlink" title="开源方案"></a>开源方案</h4><ul><li><p><a href="http://blog.csdn.net/ifmvo/article/details/52863825">Android模仿iOS实现侧滑返回（类似微信）</a></p></li><li><p><a href="https://juejin.im/post/595123565188250d781cd7c1">优雅的构建 Android 项目——侧滑返回使用及原理分析</a></p></li><li><p><a href="https://github.com/ikew0ng/SwipeBackLayout">SwipeBackLayout</a></p></li><li><p><a href="https://github.com/liuguangqiang/SwipeBack">SwipeBack</a></p></li><li><p><a href="https://github.com/r0adkll/Slidr">Slidr</a></p></li></ul><h3 id="方案2-替换view"><a href="#方案2-替换view" class="headerlink" title="方案2-替换view"></a>方案2-替换view</h3><ol><li>拿到上一个Avtivity-View的引用，并添加到当前activity-view下方。</li><li>滑动时，左侧加上阴影，当前activity-view跟随侧滑</li></ol><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ol><li>无需设置activity透明</li><li>不影响activity生命周期</li></ol><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><p>实现相对复杂</p><h4 id="开源方案-1"><a href="#开源方案-1" class="headerlink" title="开源方案"></a>开源方案</h4><p><a href="https://github.com/XBeats/and_swipeback">and_swipeback</a></p><p><a href="https://github.com/oubowu/SlideBack">SlideBack</a></p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>新闻采用的是方案2，一是对性能影响相比之下较小，二是有些统计依赖于activity生命周期。因现有开源方案并不能满足需要，最终还是选择自己实现一套。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用ViewStub延迟加载布局</title>
      <link href="/2018/03/10/About-Android-ViewStub/"/>
      <url>/2018/03/10/About-Android-ViewStub/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>新闻的直播业务中，一个Fragment可能就有四五种不同的布局。除了用include等标签分拆复用布局之外，用ViewStub来延迟加载也是提升性能的好办法。</p><span id="more"></span><p><img src="/2018/03/10/About-Android-ViewStub/p1.png"></p><p><img src="/2018/03/10/About-Android-ViewStub/p2.png"></p><p><img src="/2018/03/10/About-Android-ViewStub/p3.png"></p><p><img src="/2018/03/10/About-Android-ViewStub/p4.png"></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>我们先从源码入手，看ViewStub是如何做到延迟加载的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (C) 2008 The Android Open Source Project</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> android.view;</span><br><span class="line"><span class="keyword">import</span> android.annotation.IdRes;</span><br><span class="line"><span class="keyword">import</span> android.annotation.LayoutRes;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.res.TypedArray;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Canvas;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.widget.RemoteViews.RemoteView;</span><br><span class="line"><span class="keyword">import</span> com.android.internal.R;</span><br><span class="line"><span class="keyword">import</span> java.lang.ref.WeakReference;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A ViewStub is an invisible, zero-sized View that can be used to lazily inflate</span></span><br><span class="line"><span class="comment"> * layout resources at runtime.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * When a ViewStub is made visible, or when &#123;<span class="doctag">@link</span> #inflate()&#125;  is invoked, the layout resource </span></span><br><span class="line"><span class="comment"> * is inflated. The ViewStub then replaces itself in its parent with the inflated View or Views.</span></span><br><span class="line"><span class="comment"> * Therefore, the ViewStub exists in the view hierarchy until &#123;<span class="doctag">@link</span> #setVisibility(int)&#125; or</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #inflate()&#125; is invoked.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The inflated View is added to the ViewStub&#x27;s parent with the ViewStub&#x27;s layout</span></span><br><span class="line"><span class="comment"> * parameters. Similarly, you can define/override the inflate View&#x27;s id by using the</span></span><br><span class="line"><span class="comment"> * ViewStub&#x27;s inflatedId property. For instance:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> *     &amp;lt;ViewStub android:id=&quot;@+id/stub&quot;</span></span><br><span class="line"><span class="comment"> *               android:inflatedId=&quot;@+id/subTree&quot;</span></span><br><span class="line"><span class="comment"> *               android:layout=&quot;<span class="doctag">@layout</span>/mySubTree&quot;</span></span><br><span class="line"><span class="comment"> *               android:layout_width=&quot;120dip&quot;</span></span><br><span class="line"><span class="comment"> *               android:layout_height=&quot;40dip&quot; /&amp;gt;</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The ViewStub thus defined can be found using the id &quot;stub.&quot; After inflation of</span></span><br><span class="line"><span class="comment"> * the layout resource &quot;mySubTree,&quot; the ViewStub is removed from its parent. The</span></span><br><span class="line"><span class="comment"> * View created by inflating the layout resource &quot;mySubTree&quot; can be found using the</span></span><br><span class="line"><span class="comment"> * id &quot;subTree,&quot; specified by the inflatedId property. The inflated View is finally</span></span><br><span class="line"><span class="comment"> * assigned a width of 120dip and a height of 40dip.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The preferred way to perform the inflation of the layout resource is the following:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> *     ViewStub stub = (ViewStub) findViewById(R.id.stub);</span></span><br><span class="line"><span class="comment"> *     View inflated = stub.inflate();</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * When &#123;<span class="doctag">@link</span> #inflate()&#125; is invoked, the ViewStub is replaced by the inflated View</span></span><br><span class="line"><span class="comment"> * and the inflated View is returned. This lets applications get a reference to the</span></span><br><span class="line"><span class="comment"> * inflated View without executing an extra findViewById().</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@attr</span> ref android.R.styleable#ViewStub_inflatedId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@attr</span> ref android.R.styleable#ViewStub_layout</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RemoteView</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ViewStub</span> <span class="keyword">extends</span> <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> mInflatedId;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> mLayoutResource;</span><br><span class="line">    <span class="keyword">private</span> WeakReference&lt;View&gt; mInflatedViewRef;</span><br><span class="line">    <span class="keyword">private</span> LayoutInflater mInflater;</span><br><span class="line">    <span class="keyword">private</span> OnInflateListener mInflateListener;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ViewStub</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(context, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new ViewStub with the specified layout resource.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context The application&#x27;s environment.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> layoutResource The reference to a layout resource that will be inflated.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ViewStub</span><span class="params">(Context context, <span class="meta">@LayoutRes</span> <span class="type">int</span> layoutResource)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(context, <span class="literal">null</span>);</span><br><span class="line">        mLayoutResource = layoutResource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ViewStub</span><span class="params">(Context context, AttributeSet attrs)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(context, attrs, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ViewStub</span><span class="params">(Context context, AttributeSet attrs, <span class="type">int</span> defStyleAttr)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(context, attrs, defStyleAttr, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ViewStub</span><span class="params">(Context context, AttributeSet attrs, <span class="type">int</span> defStyleAttr, <span class="type">int</span> defStyleRes)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">TypedArray</span> <span class="variable">a</span> <span class="operator">=</span> context.obtainStyledAttributes(attrs,</span><br><span class="line">                R.styleable.ViewStub, defStyleAttr, defStyleRes);</span><br><span class="line">        mInflatedId = a.getResourceId(R.styleable.ViewStub_inflatedId, NO_ID);</span><br><span class="line">        mLayoutResource = a.getResourceId(R.styleable.ViewStub_layout, <span class="number">0</span>);</span><br><span class="line">        mID = a.getResourceId(R.styleable.ViewStub_id, NO_ID);</span><br><span class="line">        a.recycle();</span><br><span class="line">        setVisibility(GONE);</span><br><span class="line">        setWillNotDraw(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the id taken by the inflated view. If the inflated id is</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> View#NO_ID&#125;, the inflated view keeps its original id.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> A positive integer used to identify the inflated view or</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@link</span> #NO_ID&#125; if the inflated view should keep its id.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #setInflatedId(int)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@attr</span> ref android.R.styleable#ViewStub_inflatedId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@IdRes</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getInflatedId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mInflatedId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Defines the id taken by the inflated view. If the inflated id is</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> View#NO_ID&#125;, the inflated view keeps its original id.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inflatedId A positive integer used to identify the inflated view or</span></span><br><span class="line"><span class="comment">     *                   &#123;<span class="doctag">@link</span> #NO_ID&#125; if the inflated view should keep its id.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #getInflatedId()</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@attr</span> ref android.R.styleable#ViewStub_inflatedId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@android</span>.view.RemotableViewMethod</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInflatedId</span><span class="params">(<span class="meta">@IdRes</span> <span class="type">int</span> inflatedId)</span> &#123;</span><br><span class="line">        mInflatedId = inflatedId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the layout resource that will be used by &#123;<span class="doctag">@link</span> #setVisibility(int)&#125; or</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #inflate()&#125; to replace this StubbedView</span></span><br><span class="line"><span class="comment">     * in its parent by another view.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The layout resource identifier used to inflate the new View.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #setLayoutResource(int)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #setVisibility(int)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #inflate()</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@attr</span> ref android.R.styleable#ViewStub_layout</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@LayoutRes</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLayoutResource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mLayoutResource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Specifies the layout resource to inflate when this StubbedView becomes visible or invisible</span></span><br><span class="line"><span class="comment">     * or when &#123;<span class="doctag">@link</span> #inflate()&#125; is invoked. The View created by inflating the layout resource is</span></span><br><span class="line"><span class="comment">     * used to replace this StubbedView in its parent.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> layoutResource A valid layout resource identifier (different from 0.)</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #getLayoutResource()</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #setVisibility(int)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #inflate()</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@attr</span> ref android.R.styleable#ViewStub_layout</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@android</span>.view.RemotableViewMethod</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLayoutResource</span><span class="params">(<span class="meta">@LayoutRes</span> <span class="type">int</span> layoutResource)</span> &#123;</span><br><span class="line">        mLayoutResource = layoutResource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Set &#123;<span class="doctag">@link</span> LayoutInflater&#125; to use in &#123;<span class="doctag">@link</span> #inflate()&#125;, or &#123;<span class="doctag">@code</span> null&#125;</span></span><br><span class="line"><span class="comment">     * to use the default.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLayoutInflater</span><span class="params">(LayoutInflater inflater)</span> &#123;</span><br><span class="line">        mInflater = inflater;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get current &#123;<span class="doctag">@link</span> LayoutInflater&#125; used in &#123;<span class="doctag">@link</span> #inflate()&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> LayoutInflater <span class="title function_">getLayoutInflater</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mInflater;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onMeasure</span><span class="params">(<span class="type">int</span> widthMeasureSpec, <span class="type">int</span> heightMeasureSpec)</span> &#123;</span><br><span class="line">        setMeasuredDimension(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(Canvas canvas)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">dispatchDraw</span><span class="params">(Canvas canvas)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * When visibility is set to &#123;<span class="doctag">@link</span> #VISIBLE&#125; or &#123;<span class="doctag">@link</span> #INVISIBLE&#125;,</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #inflate()&#125; is invoked and this StubbedView is replaced in its parent</span></span><br><span class="line"><span class="comment">     * by the inflated layout resource. After that calls to this function are passed</span></span><br><span class="line"><span class="comment">     * through to the inflated view.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> visibility One of &#123;<span class="doctag">@link</span> #VISIBLE&#125;, &#123;<span class="doctag">@link</span> #INVISIBLE&#125;, or &#123;<span class="doctag">@link</span> #GONE&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #inflate() </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@android</span>.view.RemotableViewMethod</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVisibility</span><span class="params">(<span class="type">int</span> visibility)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mInflatedViewRef != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> mInflatedViewRef.get();</span><br><span class="line">            <span class="keyword">if</span> (view != <span class="literal">null</span>) &#123;</span><br><span class="line">                view.setVisibility(visibility);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;setVisibility called on un-referenced view&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.setVisibility(visibility);</span><br><span class="line">            <span class="keyword">if</span> (visibility == VISIBLE || visibility == INVISIBLE) &#123;</span><br><span class="line">                inflate();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Inflates the layout resource identified by &#123;<span class="doctag">@link</span> #getLayoutResource()&#125;</span></span><br><span class="line"><span class="comment">     * and replaces this StubbedView in its parent by the inflated layout resource.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The inflated layout resource.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">inflate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ViewParent</span> <span class="variable">viewParent</span> <span class="operator">=</span> getParent();</span><br><span class="line">        <span class="keyword">if</span> (viewParent != <span class="literal">null</span> &amp;&amp; viewParent <span class="keyword">instanceof</span> ViewGroup) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mLayoutResource != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">ViewGroup</span> <span class="variable">parent</span> <span class="operator">=</span> (ViewGroup) viewParent;</span><br><span class="line">                <span class="keyword">final</span> LayoutInflater factory;</span><br><span class="line">                <span class="keyword">if</span> (mInflater != <span class="literal">null</span>) &#123;</span><br><span class="line">                    factory = mInflater;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    factory = LayoutInflater.from(mContext);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> factory.inflate(mLayoutResource, parent,</span><br><span class="line">                        <span class="literal">false</span>);</span><br><span class="line">                <span class="keyword">if</span> (mInflatedId != NO_ID) &#123;</span><br><span class="line">                    view.setId(mInflatedId);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> parent.indexOfChild(<span class="built_in">this</span>);</span><br><span class="line">                parent.removeViewInLayout(<span class="built_in">this</span>);</span><br><span class="line">                <span class="keyword">final</span> ViewGroup.<span class="type">LayoutParams</span> <span class="variable">layoutParams</span> <span class="operator">=</span> getLayoutParams();</span><br><span class="line">                <span class="keyword">if</span> (layoutParams != <span class="literal">null</span>) &#123;</span><br><span class="line">                    parent.addView(view, index, layoutParams);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    parent.addView(view, index);</span><br><span class="line">                &#125;</span><br><span class="line">                mInflatedViewRef = <span class="keyword">new</span> <span class="title class_">WeakReference</span>&lt;View&gt;(view);</span><br><span class="line">                <span class="keyword">if</span> (mInflateListener != <span class="literal">null</span>) &#123;</span><br><span class="line">                    mInflateListener.onInflate(<span class="built_in">this</span>, view);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> view;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;ViewStub must have a valid layoutResource&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;ViewStub must have a non-null ViewGroup viewParent&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Specifies the inflate listener to be notified after this ViewStub successfully</span></span><br><span class="line"><span class="comment">     * inflated its layout resource.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inflateListener The OnInflateListener to notify of successful inflation.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> android.view.ViewStub.OnInflateListener</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOnInflateListener</span><span class="params">(OnInflateListener inflateListener)</span> &#123;</span><br><span class="line">        mInflateListener = inflateListener;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Listener used to receive a notification after a ViewStub has successfully</span></span><br><span class="line"><span class="comment">     * inflated its layout resource.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> android.view.ViewStub#setOnInflateListener(android.view.ViewStub.OnInflateListener) </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">interface</span> <span class="title class_">OnInflateListener</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Invoked after a ViewStub successfully inflated its layout resource.</span></span><br><span class="line"><span class="comment">         * This method is invoked after the inflated view was added to the</span></span><br><span class="line"><span class="comment">         * hierarchy but before the layout pass.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> stub The ViewStub that initiated the inflation.</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> inflated The inflated View.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">onInflate</span><span class="params">(ViewStub stub, View inflated)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码十分简单，重点看inflate方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Inflates the layout resource identified by &#123;<span class="doctag">@link</span> #getLayoutResource()&#125;</span></span><br><span class="line"><span class="comment">     * and replaces this StubbedView in its parent by the inflated layout resource.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The inflated layout resource.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">inflate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ViewParent</span> <span class="variable">viewParent</span> <span class="operator">=</span> getParent();</span><br><span class="line">        <span class="keyword">if</span> (viewParent != <span class="literal">null</span> &amp;&amp; viewParent <span class="keyword">instanceof</span> ViewGroup) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mLayoutResource != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">ViewGroup</span> <span class="variable">parent</span> <span class="operator">=</span> (ViewGroup) viewParent;</span><br><span class="line">                <span class="keyword">final</span> LayoutInflater factory;</span><br><span class="line">                <span class="keyword">if</span> (mInflater != <span class="literal">null</span>) &#123;</span><br><span class="line">                    factory = mInflater;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    factory = LayoutInflater.from(mContext);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> factory.inflate(mLayoutResource, parent,</span><br><span class="line">                        <span class="literal">false</span>);</span><br><span class="line">                <span class="keyword">if</span> (mInflatedId != NO_ID) &#123;</span><br><span class="line">                    view.setId(mInflatedId);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> parent.indexOfChild(<span class="built_in">this</span>);</span><br><span class="line">                parent.removeViewInLayout(<span class="built_in">this</span>);</span><br><span class="line">                <span class="keyword">final</span> ViewGroup.<span class="type">LayoutParams</span> <span class="variable">layoutParams</span> <span class="operator">=</span> getLayoutParams();</span><br><span class="line">                <span class="keyword">if</span> (layoutParams != <span class="literal">null</span>) &#123;</span><br><span class="line">                    parent.addView(view, index, layoutParams);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    parent.addView(view, index);</span><br><span class="line">                &#125;</span><br><span class="line">                mInflatedViewRef = <span class="keyword">new</span> <span class="title class_">WeakReference</span>&lt;View&gt;(view);</span><br><span class="line">                <span class="keyword">if</span> (mInflateListener != <span class="literal">null</span>) &#123;</span><br><span class="line">                    mInflateListener.onInflate(<span class="built_in">this</span>, view);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> view;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;ViewStub must have a valid layoutResource&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;ViewStub must have a non-null ViewGroup viewParent&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>注意点：ViewStub不支持直接标签，下面代码崩溃</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">merge</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span>   </span><br><span class="line">   </span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span>            <span class="attr">android:layout_width</span>=<span class="string">&quot;fill_parent&quot;</span>   </span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>   </span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;Yes&quot;</span>/&gt;</span>   </span><br><span class="line">   </span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span>            <span class="attr">android:layout_width</span>=<span class="string">&quot;fill_parent&quot;</span>   </span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>   </span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;No&quot;</span>/&gt;</span>   </span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">merge</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.3中所讲到的ViewStub指向的布局文件解析inflate并替换掉当前ViewStub本身，并不是完全意义上的替换（与include标签还不太一样），替换时，布局文件的layout params是以ViewStub为准，其他布局属性是以布局文件自身为准。直接看代码就可以知道。</p><h3 id="使用时机"><a href="#使用时机" class="headerlink" title="使用时机"></a>使用时机</h3><p>当布局中有如下情况时，可以考虑</p><ul><li>布局元素存在互斥关系</li><li>布局元素出现概率较小时，如error view, empty view都可以做成ViewStub</li></ul><h3 id="merge标签和include标签的区别"><a href="#merge标签和include标签的区别" class="headerlink" title="merge标签和include标签的区别"></a>merge标签和include标签的区别</h3><p><a href="https://developer.android.com/training/improving-layouts/reusing-layouts.html">https://developer.android.com/training/improving-layouts/reusing-layouts.html</a></p><p><a href="https://www.cnblogs.com/ldq2016/p/5386646.html">https://www.cnblogs.com/ldq2016/p/5386646.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> ViewStub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android内存泄漏分析</title>
      <link href="/2018/03/01/Android-Memory-Leak-Analysis/"/>
      <url>/2018/03/01/Android-Memory-Leak-Analysis/</url>
      
        <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>今年，公司加大了对app性能优化的投入，把性能优化作为技术部门的KPI之一。在做需求的同时，我们也会分析并解决app中存在的内存泄漏。</p><span id="more"></span><h3 id="2-内存泄漏"><a href="#2-内存泄漏" class="headerlink" title="2. 内存泄漏"></a>2. 内存泄漏</h3><p>内存泄漏主要是指程序运行过程中，动态分配内存之后，而没有及时将不再使用的内存释放，造成系统内存浪费，严重会影响程序性能，甚至会导致程序崩溃。这也是C&#x2F;C++语言饱受诟病的特性之一。虽然Java语言引用了GC机制，使得内存泄漏的可能性大大降低，但是在某些情况下，还是有可能导致垃圾内存无法及时释放。下面分析几种Android开发过程中有可能导致的内存泄漏。</p><h4 id="2-1-静态变量引用"><a href="#2-1-静态变量引用" class="headerlink" title="2.1 静态变量引用"></a>2.1 静态变量引用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MainUtils ourInstance ;</span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> MainUtils <span class="title function_">getInstance</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ourInstance == <span class="literal">null</span>) &#123;</span><br><span class="line">            ourInstance = <span class="keyword">new</span> <span class="title class_">MainUtils</span>(context);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ourInstance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">MainUtils</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        mContext = context;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="type">MainUtils</span> <span class="variable">utils</span> <span class="operator">=</span> MainUtils.getInstance(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在横竖屏切换的时候，会先导致MainActivity销毁重建，然而MainUtils有一个静态变量引用了MainActivity，因此会导致内存泄漏，具体原因后面分析。</p><h4 id="2-2-多线程"><a href="#2-2-多线程" class="headerlink" title="2.2 多线程"></a>2.2 多线程</h4><p>多线程也是Android中导致内存泄漏的原因之一。常见的因为多线程导致内存泄漏有如下几种</p><h5 id="2-2-1-Handler"><a href="#2-2-1-Handler" class="headerlink" title="2.2.1 Handler"></a>2.2.1 Handler</h5><p>在Activity、Fragment或者View用Handler.PostDelayed(Runnable, 2000)执行定时操作（如每隔一分钟刷新二维码），在Activity、Fragment或者View销毁时，没有把Handler中的Message和Callback销毁导致内存泄漏。</p><h5 id="2-2-2-AsyncTask"><a href="#2-2-2-AsyncTask" class="headerlink" title="2.2.2 AsyncTask"></a>2.2.2 AsyncTask</h5><p>在Activity或者Fragment甚至是View、Adapter（正常来说View和Adapter不应该有AsyncTask）中使用了AsyncTask，在类被销毁时没有及时把AsyncTask销毁掉，导致内存泄漏。</p><h5 id="2-2-3-TimerTask"><a href="#2-2-3-TimerTask" class="headerlink" title="2.2.3 TimerTask"></a>2.2.3 TimerTask</h5><p>使用了TimerTask作为定时任务，如定期查看某个文件夹或文件是否存在，但是传入了MainActivity这个实例（如2.1）导致泄漏。</p><h5 id="2-2-4-网络操作"><a href="#2-2-4-网络操作" class="headerlink" title="2.2.4 网络操作"></a>2.2.4 网络操作</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        findViewById(R.id.btn_start).setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                start();</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (IOException | InterruptedException e) &#123;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;).start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//https://api.github.com/users/octocat/repos</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        <span class="type">Retrofit</span> <span class="variable">retrofit</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Retrofit</span>.Builder()</span><br><span class="line">                .baseUrl(<span class="string">&quot;https://api.github.com/&quot;</span>)</span><br><span class="line">                .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="type">GitHubService</span> <span class="variable">service</span> <span class="operator">=</span> retrofit.create(GitHubService.class);</span><br><span class="line">        Call&lt;List&lt;Repo&gt;&gt; call = service.listRepos(<span class="string">&quot;octocat&quot;</span>);</span><br><span class="line">        List&lt;Repo&gt; repos = call.execute().body();</span><br><span class="line">        System.out.println(repos.toString());</span><br><span class="line"><span class="comment">// 模拟网络耗时</span></span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述例子中，执行网络操作过程中，如果用户退出Acitvity，便会导致内存泄漏。</p><h4 id="2-3-动画"><a href="#2-3-动画" class="headerlink" title="2.3 动画"></a>2.3 动画</h4><p>最常见的场景Activity、Fragment持有了View，在View动画还没有执行完之前退出了Fragment或者Activity，此时便会产生内存泄漏（如轮播图）。</p><h3 id="3-分析工具"><a href="#3-分析工具" class="headerlink" title="3. 分析工具"></a>3. 分析工具</h3><h4 id="3-1-Android-Monitors"><a href="#3-1-Android-Monitors" class="headerlink" title="3.1 Android Monitors"></a>3.1 Android Monitors</h4><p>使用Android Monitors来查看内存抖动，并结合代码分析来解决内存泄漏问题是一个比较好的方案。关于hprof文件中的信息是从哪里的(JVMTI)和hprof文件的格式可以参考以下两篇文章</p><ul><li><a href="http://docs.oracle.com/javase/7/docs/technotes/samples/hprof.html">HPROF: A Heap&#x2F;CPU Profiling Tool</a></li><li><a href="https://www.ibm.com/support/knowledgecenter/zh/SSYKE2_7.0.0/com.ibm.java.aix.70.doc/diag/tools/hprof_output.html">HPROF 输出文件的说明</a><br>Android Studio中hprof文件各个字段的含义，可以参考这里：HPROF Viewer and Analyzer。<br>需要注意的是Android Mionitor导出的hprof文件不是标准的hprof文件，需要切换到captures，然后右键—&gt;Export to standard hprof才能导出标准hptof文件，才能被MAT工具识别。如下图</li></ul><p><img src="/2018/03/01/Android-Memory-Leak-Analysis/p1.png"></p><p>下面我们结合Android Monitors分析例子2.1中导致的内存泄漏。假设我们怀疑某个操作会导致内存泄漏（拿旋转屏幕作为例子）<br>刚开始运行时，内存图如下，占用内存为2.49M：</p><p><img src="/2018/03/01/Android-Memory-Leak-Analysis/p2.png"></p><p>旋转2次之后，内存发现内存发生了微小抖动，内存图如下：</p><p><img src="/2018/03/01/Android-Memory-Leak-Analysis/p3.png"></p><p>之后再点几次GC</p><p><img src="/2018/03/01/Android-Memory-Leak-Analysis/p4.png"></p><p>我们发现使用内存为2.55M，比操作前(2.49M)增加了0.06M，结合hprof文件就可以知道MainActivity在内存中有两个实例，但是按照正常逻辑，应该只有一个MainActivity实例，者说明发生了内存泄漏。再继续查看两个MainActivity的引领链，发现0号MainActivity实例被MainUtils一个静态变量实例引用了，这就找到了问题的根源。</p><p><img src="/2018/03/01/Android-Memory-Leak-Analysis/p5.png"></p><h4 id="3-2-LeakCanary"><a href="#3-2-LeakCanary" class="headerlink" title="3.2 LeakCanary"></a>3.2 LeakCanary</h4><p>LeakCanary是square公司推出的一个Android和Java内存泄漏检测工具。其官方介绍为**A memory leak detection library for Android and Java.**。使用非常简单</p><ol><li>在build.gradle文件中添加<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">debugCompile <span class="string">&#x27;com.squareup.leakcanary:leakcanary-android:1.5.1&#x27;</span></span><br><span class="line">releaseCompile <span class="string">&#x27;com.squareup.leakcanary:leakcanary-android-no-op:1.5.1&#x27;</span></span><br></pre></td></tr></table></figure></li><li>在Application中添加<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onCreate();</span><br><span class="line">    <span class="keyword">if</span> (LeakCanary.isInAnalyzerProcess(<span class="built_in">this</span>)) &#123;</span><br><span class="line">        <span class="comment">// This process is dedicated to LeakCanary for heap analysis.</span></span><br><span class="line">        <span class="comment">// You should not init your app in this process.</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LeakCanary.install(<span class="built_in">this</span>);</span><br><span class="line">    <span class="comment">// Normal app init code...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>重新运行2.1中代码，旋转几次屏幕后，leakCanary便能检测出MainActivity发生了泄漏，如下图</li></ol><p><img src="/2018/03/01/Android-Memory-Leak-Analysis/p6.png"></p><p>并且把泄漏类及路径都标记出来了！其内部主要是用类似于MAT的内存检测工具haha，其主要原理如下：</p><ol><li>RefWatcher.watch() creates a <a href="https://github.com/square/leakcanary/blob/master/leakcanary-watcher/src/main/java/com/squareup/leakcanary/KeyedWeakReference.java">KeyedWeakReference</a> to the watched object.</li><li>Later, in a background thread, it checks if the reference has been cleared and if not it triggers a GC.</li><li>If the reference is still not cleared, it then dumps the heap into a .hprof file stored on the file system.</li><li>HeapAnalyzerService is started in a separate process and HeapAnalyzer parses the heap dump using &gt; <a href="https://github.com/square/haha">HAHA</a>.</li><li>eapAnalyzer finds the KeyedWeakReference in the heap dump thanks to a unique reference key and &gt; locates the leaking reference.</li><li>HeapAnalyzer computes the shortest strong reference path to the GC Roots to determine if there is a leak, and then builds the chain of references causing the leak.</li><li>The result is passed back to DisplayLeakService in the app process, and the leak notification is shown.</li></ol><p>看了下源码，核心原理是在每个Activity.onDestroy的时候封装成带key弱引用KeyedWeakReference，然后如下处理：</p><ol><li>key对应弱引用是否存在，若是，转2。若否，不存在内存泄漏</li><li>手动触发Gc，再次判断key对应弱引用是否存在，若是，转3。若否，不存在内存泄漏</li><li>分析hprof文件，再次判断key对应弱引用是否存在，若是，转4。若否，不存在内存泄漏</li><li>生成分析报告<br>就不上代码分析了，想了解更多请参考：</li></ol><ul><li><a href="https://github.com/square/leakcanary/wiki/FAQ#how-does-it-work">https://github.com/square/leakcanary/wiki/FAQ#how-does-it-work</a></li><li><a href="http://www.jianshu.com/p/5ee6b471970e">LeakCanary 内存泄露监测原理研究</a></li><li><a href="http://blog.csdn.net/cloud_huan/article/details/53081120">LeakCanary核心原理源码浅析</a></li></ul><h4 id="3-3-MAT"><a href="#3-3-MAT" class="headerlink" title="3.3 MAT"></a>3.3 MAT</h4><p>MAT工具使用相对简单，具体用法可以参考文章：<a href="http://www.jianshu.com/p/bfb9a40a16e5">使用MAT分析应用的内存信息</a></p><h3 id="4-几点建议"><a href="#4-几点建议" class="headerlink" title="4. 几点建议"></a>4. 几点建议</h3><ul><li>对于使用Handler的类，在销毁前中调用Handler.removeCallbacksAndMessages(null);</li><li>对于使用动画的View，在销毁前调用View..clearAnimation();</li><li>使用多线程的类，销毁时需要把线程给stop.</li><li>对于Cursor、Bitmap、Broadcast、系统监听（如传感器监听、网络状态监听等）IO流等资源，使用完后关闭或反注册。</li></ul><h3 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h3><p><a href="http://www.jianshu.com/p/7d958959cf33">Android Studio - HPROF文件查看和分析工具</a><br><a href="https://www.liaohuqiu.net/cn/posts/memory-and-profile-analysis-in-android/">Android 内存使用分析和程序性能分析</a><br><a href="https://www.ibm.com/support/knowledgecenter/zh/SSYKE2_7.0.0/com.ibm.java.aix.70.doc/diag/tools/hprof_output.html">HPROF 输出文件的说明</a><br><a href="https://www.ibm.com/developerworks/cn/java/j-lo-jpda2/">JVMTI 和 Agent 实现</a><br><a href="https://nancyyihao.github.io/2018/03/01/Android-Memory-Leak-Analysis/%E5%9F%BA%E4%BA%8E%20JVMTI%20%E5%AE%9E%E7%8E%B0%20Java%20%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%9B%91%E6%8E%A7">基于 JVMTI 实现 Java 线程的监控</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Memory-Leak </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Coursera-Algorithm-Part-One-Deques-and-Randomized-Queues</title>
      <link href="/2018/02/10/Coursera-Algorithm-Part-One-Deques-and-Randomized-Queues/"/>
      <url>/2018/02/10/Coursera-Algorithm-Part-One-Deques-and-Randomized-Queues/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​ Algorithm-Part-One 第二周主要是讲栈和队列，这基本上是大学时期都讲烂的东西，但还是认真看完了视频。本周的作业当然也是跟队列有关的。主要是实现一个双端队列和一个随机队列，这可以说是所有课程当中最轻松的一个变成作业了。难度不大，但需要认真和细心。</p><span id="more"></span><h3 id="Assignment"><a href="#Assignment" class="headerlink" title="Assignment"></a>Assignment</h3><p>具体Assignment可以查看这里：<a href="http://coursera.cs.princeton.edu/algs4/assignments/queues.html%E3%80%82">http://coursera.cs.princeton.edu/algs4/assignments/queues.html。</a></p><p>本周任务主要是实现如下API：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Deque</span>&lt;Item&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;Item&gt; &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Deque</span><span class="params">()</span>                           <span class="comment">// construct an empty deque</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>                 <span class="comment">// is the deque empty?</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>                        <span class="comment">// return the number of items on the deque</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFirst</span><span class="params">(Item item)</span>          <span class="comment">// add the item to the front</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addLast</span><span class="params">(Item item)</span>           <span class="comment">// add the item to the end</span></span><br><span class="line">   <span class="keyword">public</span> Item <span class="title function_">removeFirst</span><span class="params">()</span>                <span class="comment">// remove and return the item from the front</span></span><br><span class="line">   <span class="keyword">public</span> Item <span class="title function_">removeLast</span><span class="params">()</span>                 <span class="comment">// remove and return the item from the end</span></span><br><span class="line">   <span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title function_">iterator</span><span class="params">()</span>         <span class="comment">// return an iterator over items in order from front to end</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>   <span class="comment">// unit testing (optional)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RandomizedQueue</span>&lt;Item&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;Item&gt; &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">RandomizedQueue</span><span class="params">()</span>                 <span class="comment">// construct an empty randomized queue</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>                 <span class="comment">// is the randomized queue empty?</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>                        <span class="comment">// return the number of items on the randomized queue</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">enqueue</span><span class="params">(Item item)</span>           <span class="comment">// add the item</span></span><br><span class="line">   <span class="keyword">public</span> Item <span class="title function_">dequeue</span><span class="params">()</span>                    <span class="comment">// remove and return a random item</span></span><br><span class="line">   <span class="keyword">public</span> Item <span class="title function_">sample</span><span class="params">()</span>                     <span class="comment">// return a random item (but do not remove it)</span></span><br><span class="line">   <span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title function_">iterator</span><span class="params">()</span>         <span class="comment">// return an independent iterator over items in random order</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>   <span class="comment">// unit testing (optional)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="任务1"><a href="#任务1" class="headerlink" title="任务1"></a>任务1</h4><p>对于第一个任务，使用链表数据结构来完成。相对节省内存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> part1_week2;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdOut;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Deque</span>&lt;Item&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;Item&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> Node first;</span><br><span class="line">    <span class="keyword">private</span> Node last;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Deque</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFirst</span><span class="params">(Item item)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (item == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">       <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">       node.value = item;</span><br><span class="line">       node.next = first;</span><br><span class="line">       node.prev = <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">if</span> (first != <span class="literal">null</span>) &#123;</span><br><span class="line">           first.prev = node;</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">if</span> (last == <span class="literal">null</span>) last = node;</span><br><span class="line">        first = node;</span><br><span class="line">       size++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addLast</span><span class="params">(Item item)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">        node.value = item;</span><br><span class="line">        node.next = <span class="literal">null</span>;</span><br><span class="line">        node.prev = last;</span><br><span class="line">        <span class="keyword">if</span> (last != <span class="literal">null</span>) &#123;</span><br><span class="line">            last.next = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (first == <span class="literal">null</span>) first = node;</span><br><span class="line">        last = node;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Item <span class="title function_">removeFirst</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">        <span class="type">Node</span> <span class="variable">tempFirst</span> <span class="operator">=</span> first;</span><br><span class="line">        first = first.next;</span><br><span class="line">        <span class="keyword">if</span> (first != <span class="literal">null</span>) first.prev = <span class="literal">null</span>;</span><br><span class="line">        tempFirst.prev = <span class="literal">null</span>;</span><br><span class="line">        tempFirst.next = <span class="literal">null</span>;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> tempFirst.value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Item <span class="title function_">removeLast</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">        <span class="type">Node</span> <span class="variable">tempLast</span> <span class="operator">=</span> last;</span><br><span class="line">        last = last.prev;</span><br><span class="line">        <span class="keyword">if</span> (last != <span class="literal">null</span>) last.next = <span class="literal">null</span>;</span><br><span class="line">        tempLast.prev = <span class="literal">null</span>;</span><br><span class="line">        tempLast.next = <span class="literal">null</span>;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) first = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> tempLast.value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Itr</span>(first);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> Item value;</span><br><span class="line">        <span class="keyword">private</span> Node prev;</span><br><span class="line">        <span class="keyword">private</span> Node next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        Deque&lt;Integer&gt; deque = new Deque&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        deque.addFirst(0);</span></span><br><span class="line"><span class="comment">//        deque.addFirst(1);</span></span><br><span class="line"><span class="comment">//        deque.removeFirst();</span></span><br><span class="line"><span class="comment">//        //deque.removeLast();</span></span><br><span class="line"><span class="comment">//        // expected 2 1</span></span><br><span class="line">        Deque&lt;Integer&gt; deque = <span class="keyword">new</span> <span class="title class_">Deque</span>&lt;Integer&gt;();</span><br><span class="line">        deque.addFirst(<span class="number">0</span>);</span><br><span class="line">        deque.removeLast();</span><br><span class="line">        <span class="comment">// expected empty</span></span><br><span class="line">        <span class="keyword">for</span> (Integer i : deque) &#123;</span><br><span class="line">            StdOut.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Itr</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;Item&gt; &#123;</span><br><span class="line">        Node firstNode;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Itr</span><span class="params">(Node first)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (first != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.firstNode = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">                <span class="built_in">this</span>.firstNode.value = first.value;</span><br><span class="line">                <span class="built_in">this</span>.firstNode.prev = first.prev;</span><br><span class="line">                <span class="built_in">this</span>.firstNode.next = first.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> firstNode != <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Item <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!hasNext()) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">            <span class="type">Item</span> <span class="variable">next</span> <span class="operator">=</span> firstNode.value;</span><br><span class="line">            firstNode = firstNode.next;</span><br><span class="line">            <span class="keyword">return</span> next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="任务2"><a href="#任务2" class="headerlink" title="任务2"></a>任务2</h4><p>对于第一个任务，参考了Java自带的ArrayList实现方法，使用数组来保存内部元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> part1_week2;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdOut;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdRandom;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RandomizedQueue</span>&lt;Item&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;Item&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INITIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">GROW_CAPACITY</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">private</span> Item[] items;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RandomizedQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        items = (Item[]) <span class="keyword">new</span> <span class="title class_">Object</span>[INITIAL_CAPACITY];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">enqueue</span><span class="params">(Item item)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">        ensureCapacity(size + <span class="number">1</span>);</span><br><span class="line">        items[size++] = item;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Item <span class="title function_">dequeue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> StdRandom.uniform(size);</span><br><span class="line">        <span class="type">Item</span> <span class="variable">oldValue</span> <span class="operator">=</span> items[index];</span><br><span class="line">        <span class="type">int</span> <span class="variable">numMoved</span> <span class="operator">=</span> size - index - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            System.arraycopy(items, index + <span class="number">1</span>, items, index,</span><br><span class="line">                    numMoved);</span><br><span class="line">        items[--size] = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Item <span class="title function_">sample</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> StdRandom.uniform(size);</span><br><span class="line">        <span class="keyword">return</span> items[index];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Itr</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (minCapacity &gt; items.length) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> items.length;</span><br><span class="line">            <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + GROW_CAPACITY;<span class="comment">//(oldCapacity &gt;&gt; 1);</span></span><br><span class="line">            <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">                newCapacity = minCapacity;</span><br><span class="line">            items = Arrays.copyOf(items, newCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Itr</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;Item&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> Item[] randomItems;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cursor</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Itr</span><span class="params">()</span> &#123;</span><br><span class="line">            randomItems = Arrays.copyOf(items, size);</span><br><span class="line">            StdRandom.shuffle(randomItems);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> cursor &lt; size;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Item <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!hasNext()) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">            <span class="keyword">return</span> randomItems[cursor++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        RandomizedQueue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">RandomizedQueue</span>&lt;&gt;();</span><br><span class="line">        queue.enqueue(<span class="number">1</span>);</span><br><span class="line">        queue.enqueue(<span class="number">2</span>);</span><br><span class="line">        queue.enqueue(<span class="number">3</span>);</span><br><span class="line">        queue.enqueue(<span class="number">4</span>);</span><br><span class="line">        queue.dequeue();</span><br><span class="line">        queue.dequeue();</span><br><span class="line">        <span class="keyword">for</span> (Integer i : queue) &#123;</span><br><span class="line">            StdOut.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想要查看全部源码，传送门：<a href="https://github.com/nancyyihao/Princeton-Algorithm">Princeton-Algorithm</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>尽管题目简单，但是想要写好一个高效可用的Queue，需要考虑内部数据结构如何存储、边界条件，甚至要考虑多线程的情况。优化了很久，最终还是只得了97分，略微遗憾。我知道忙不是借口，但是的确分身乏术，公司的事情还是得优先考虑，后面有时间一定会继续优化！</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Coursera </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>listview添加footerview不生效</title>
      <link href="/2018/01/10/Problems-On-ListView-addFooterView/"/>
      <url>/2018/01/10/Problems-On-ListView-addFooterView/</url>
      
        <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>使用listview添加footerview，始终显示不出来。</p><span id="more"></span><p>上网一查，Android-4.4之前添加footerview一定要在setAdapter之前，换句话说，addFooterView之后需要重新setAdapter才能生效<br>之前的代码是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (mListView.getFooterViewsCount() == <span class="number">0</span>) &#123;</span><br><span class="line">     mListView.addFooterView(createMoreCityView());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改成如下即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (mListView.getFooterViewsCount() == <span class="number">0</span>) &#123;</span><br><span class="line">    mListView.addFooterView(createMoreCityView());</span><br><span class="line">    <span class="keyword">if</span> (SystemUtils.isBelowKitkat()) &#123;</span><br><span class="line">        mListView.setAdapter(mCityAdapter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>在Android 4.4之前，ListView添加footerview大致代码是这样的(下方是android 4.2.2代码)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Add a fixed view to appear at the bottom of the list. If addFooterView is</span></span><br><span class="line"><span class="comment"> * called more than once, the views will appear in the order they were</span></span><br><span class="line"><span class="comment"> * added. Views added using this call can take focus if they want.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">NOTE:</span> Call this before calling setAdapter. This is so ListView can wrap</span></span><br><span class="line"><span class="comment"> * the supplied cursor with one that will also account for header and footer</span></span><br><span class="line"><span class="comment"> * views.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> v The view to add.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data Data to associate with this view</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> isSelectable true if the footer view can be selected</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFooterView</span><span class="params">(View v, Object data, <span class="type">boolean</span> isSelectable)</span> &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> do not enforce the adapter being null here, since unlike in</span></span><br><span class="line">    <span class="comment">// addHeaderView, it was never enforced here, and so existing apps are</span></span><br><span class="line">    <span class="comment">// relying on being able to add a footer and then calling setAdapter to</span></span><br><span class="line">    <span class="comment">// force creation of the HeaderViewListAdapter wrapper</span></span><br><span class="line">    <span class="type">FixedViewInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FixedViewInfo</span>();</span><br><span class="line">    info.view = v;</span><br><span class="line">    info.data = data;</span><br><span class="line">    info.isSelectable = isSelectable;</span><br><span class="line">    mFooterViewInfos.add(info);</span><br><span class="line">    <span class="comment">// in the case of re-adding a footer view, or adding one later on,</span></span><br><span class="line">    <span class="comment">// we need to notify the observer</span></span><br><span class="line">    <span class="keyword">if</span> (mAdapter != <span class="literal">null</span> &amp;&amp; mDataSetObserver != <span class="literal">null</span>) &#123;</span><br><span class="line">        mDataSetObserver.onChanged();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note明确提示需要在setAdater之前添加footerview，在setAdater之后，会重新生成一个HeaderViewListAdapter来展示footerview，否则不会生效。</p><p>而在Android 4.4之后，ListView添加footerview代码大致为（下方为android 7.0.0代码）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Add a fixed view to appear at the bottom of the list. If addFooterView is</span></span><br><span class="line"><span class="comment"> * called more than once, the views will appear in the order they were</span></span><br><span class="line"><span class="comment"> * added. Views added using this call can take focus if they want.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Note: When first introduced, this method could only be called before</span></span><br><span class="line"><span class="comment"> * setting the adapter with &#123;<span class="doctag">@link</span> #setAdapter(ListAdapter)&#125;. Starting with</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> android.os.Build.VERSION_CODES#KITKAT&#125;, this method may be</span></span><br><span class="line"><span class="comment"> * called at any time. If the ListView&#x27;s adapter does not extend</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> HeaderViewListAdapter&#125;, it will be wrapped with a supporting</span></span><br><span class="line"><span class="comment"> * instance of &#123;<span class="doctag">@link</span> WrapperListAdapter&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> v The view to add.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data Data to associate with this view</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> isSelectable true if the footer view can be selected</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFooterView</span><span class="params">(View v, Object data, <span class="type">boolean</span> isSelectable)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">FixedViewInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FixedViewInfo</span>();</span><br><span class="line">    info.view = v;</span><br><span class="line">    info.data = data;</span><br><span class="line">    info.isSelectable = isSelectable;</span><br><span class="line">    mFooterViewInfos.add(info);</span><br><span class="line">    mAreAllItemsSelectable &amp;= isSelectable;</span><br><span class="line">    <span class="comment">// Wrap the adapter if it wasn&#x27;t already wrapped.</span></span><br><span class="line">    <span class="keyword">if</span> (mAdapter != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(mAdapter <span class="keyword">instanceof</span> HeaderViewListAdapter)) &#123;</span><br><span class="line">            mAdapter = <span class="keyword">new</span> <span class="title class_">HeaderViewListAdapter</span>(mHeaderViewInfos, mFooterViewInfos, mAdapter);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// In the case of re-adding a footer view, or adding one later on,</span></span><br><span class="line">        <span class="comment">// we need to notify the observer.</span></span><br><span class="line">        <span class="keyword">if</span> (mDataSetObserver != <span class="literal">null</span>) &#123;</span><br><span class="line">            mDataSetObserver.onChanged();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就不会有这个问题了。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>Android 4.4之前，addFooterView之后需要（重新）设置Adapter才能生效<br>Android 4.4及以后，addFooterView可以在任意地方调用</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017总结</title>
      <link href="/2017/12/31/2017-summary/"/>
      <url>/2017/12/31/2017-summary/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​ 2016年刚毕业，在2017年到来之际，写了一篇总结：2016总结，这是对自己的一个交代。如今，转眼一年已过去，2018即将到来，也来总结一下自己这2017年的得与失吧。</p><span id="more"></span><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h4><p>​ 在2017年结束，2018年到来之前，给自己定了技术方向和读书方向的目标：</p><ul><li>深入理解View的原理，自定义View顺手拈来</li><li>写系列源码分析文章，分析ListView，RecyclerView、Fragment、Window、Activity源码</li><li>学习公司内部热修复原理并自己能写出demo</li><li>了解binder、多进程相关原理</li><li>了解HTTPS，TCP&#x2F;IP等网络相关知识</li><li>关注插件化技术</li><li>关注微信小程序新技术发展</li><li>launch自己的项目<br>其中，关于自定义View，对于如何实现自定义View已经有了进一步的认识，经过这一年项目的历练，不敢说信手拈来，但是在看到效果后，如何实现，都会有一定的想法。比较遗憾的是，源码分析文章自己并没有写出来；公司内部热修复原理自己深入研究了一番，基本上已经了然于胸，写了一篇文章：自定义Gradle插件（二）；然而，对于binder（Android-Binder）、多进程、HTTPS（how-https-works）、TCP&#x2F;IP、插件化（Android基于代理的插件化思路分析）、微信小程序，只简单的做了个入门介绍，并没有做太多深入性的了解。10月份时，对于自己的小项目如何实现已经有了初步原型，但是公司突如其来的项目(milk)打乱了计划，最终还是没有落地。</li></ul><h4 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h4><p>2017年给自己定下的目标是读20本书，并写下读书笔记。虽然执行下来，读的书和原来想象的不太一样，但是目的达到了。这一年下来，读了如下书</p><ul><li>《乌合之众—大众心理学研究》</li><li>《牛虻》</li><li>《关键对话：如何能高效沟通》</li><li>《消失的地平线》</li><li>《影响力》</li><li>《人间失格》</li><li>《比特币：一个虚幻而真实的金融世界》</li><li>《国富论》</li><li>《生命对你意味着什么》</li><li>《中国哲学简史》</li><li>《梦的解析》</li><li>《社会契约论》</li><li>《庄子全书》</li><li>《穷查理宝典》</li><li>《中国人的日常》</li><li>《孟子》</li><li>《苏菲的世界》</li><li>《毛泽东传》</li><li>《从0到1：开启商业与未来的秘密》</li><li>《知行合一王阳明》<br>对于每本书，基本上都写了简要的书评。最大的收获是养成了阅读的习惯，对于篇幅较短的书，基本上一周搞定，篇幅长一些的，两周也能搞定，但不强求。</li></ul><h4 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h4><p>这一年来，大部分时间都花在了工作上，较快较好地完成了薄荷SDK接入、新用户送红包、用户反馈模块改进、段子栏目大改版、milk项目视觉换新等工作。工作能力有了很大提升，老板也给了应有的加薪。代码能力相对一年前有了很大提高，代码的可扩展性和灵活性有了很大进步。其中一个对我影响比较大的事是因为一件事和一位产品同事吵了一架（生活总是充满意外），让我意识到，工作不仅仅是搞定老板交给的工作，还应该处理各种好人际关系，职场中想要走得更远，少不了其他人的支持。</p><h4 id="意外收获"><a href="#意外收获" class="headerlink" title="意外收获"></a>意外收获</h4><p>今年最大的意外收获是某次在微博上看到了一个视频推荐使用podcast来提高英语听力，然后在网上搜到了一个良心软件pocket cast，已经连续听了两个多月，对自己英语听力提升非常大。虽然还没有达到能做美剧翻译的水平，但是基本上不需要字幕也能明白大概意思。另外一个意外收获是，关于技术方面的提升，之前早就听过coursera的大名，但是碍于自己的英文听力，从没有在上面上过课。使用了pocket cast一个多月后，在上面注册了两门课（Coursera公开课-Algorithm-Percolation），配合ppt，发现自己完全不需要字幕就能够大概明白教授所讲的内容，着实让自己很意外！对于那些对算法有一定基础，但是想要提升的人，强烈推荐！这可能是我上过的最好的算法课了，想想当初上学那会要知道有这么个东西，真的可以省下很多时间。今年也看了不少技术方面的书籍，其中让我印象深刻的是《编码：隐匿在计算机软硬件背后的语言》和《程序员的自我修养—链接、装载与库》，前者从硬件角度把一个程序如何运行讲得十分透彻，而后者则对现代软件如何链接、装载、运行做了详尽的解释，有人说这本书有抄袭《Linker and Loader》的嫌疑，但这本书确实是国内为数不多能把现代程序运行原理讲得如此细致的书，任何一个程序员都应该读一读。</p><h4 id="困惑"><a href="#困惑" class="headerlink" title="困惑"></a>困惑</h4><p>从今年年初就一直在思考一个问题：自己和那些刚进来的应届生有什么区别？应届生进来带个半年，基本的业务能力也都具备了，日常迭代工作交给他们其实不会有太大的问题。看了一下一年前自己写得代码和组内大牛写的代码，我基本有了答案：刚进来的应届生工作的重心都放在完成上，如果有个类似的功能，他们通常的做法是重新copy一遍，再改改就去交差。而那些大牛工作的重心更多得放在代码的架构设计上，他们的架构可以灵活应对各种需求的变化，即使有些功能没有考虑到，以后扩展起来也不会太难。这个也是我今后一直追求的目标：写出更加灵活的代码。另一个困惑是人生的困惑：这一年看了不少哲学的书籍，也开始思考自己应该以怎样的姿态生活在这纷杂的世界中。人这一生，应该怎样过才能算不枉虚度？看了很多的传记、和心理学的书籍如《乔布斯传》、《毛泽东传》、《知行合一王阳明》等，我仍没有找到答案。希望之后的生活历程中能给我想要的答案。</p><h3 id="展望2018"><a href="#展望2018" class="headerlink" title="展望2018"></a>展望2018</h3><p>​ 2017对于我来说是一个平淡的一年，没有太大波澜，没有大起大落。这一年给我最大的感触是心态由最初的浮躁变成了平和。开始明确自己的技术方向，肯花时间去钻研自己感兴趣的东西。</p><p>​ 2018年，我需要在如下几个方面努力</p><h4 id="技术能力"><a href="#技术能力" class="headerlink" title="技术能力"></a>技术能力</h4><ul><li><p>学习Android Framework层源码，了解 XXManager、Activity、Fragment、Window相关源码，并写出系列分析文章（至少10篇）</p></li><li><p>学习设计模式，并分析常见设计模式的优缺点（至少5篇）</p></li><li><p>学习Java并发编程（至少5篇）</p></li><li><p>其他能力<br>其他能力不能像技术能力那样能够量化，以文章的形式输出，但也是必不可少的。</p></li><li><p>提高沟通能力，学习说服别人的沟通技巧；</p></li><li><p>2017年的投资全军覆没，虽然投进去的钱不多，不过战绩还是提醒了我要想靠钱生钱，还是需要专业知识，希望明年能够谨慎投资，系统学习投资相关知识。</p></li></ul><h3 id="end"><a href="#end" class="headerlink" title="end"></a>end</h3><p>2018，加油！！！</p>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于头条被整改的一点想法</title>
      <link href="/2017/12/30/Thinking-About-Toutiao-s-Reform/"/>
      <url>/2017/12/30/Thinking-About-Toutiao-s-Reform/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这两天，被头条整改的消息刷屏了。头条的多个栏目（推荐、热点等）都无法刷出新内容，只显示”正视问题，积极整改”。</p><span id="more"></span><p><img src="/2017/12/30/Thinking-About-Toutiao-s-Reform/p1.jpeg"></p><h3 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h3><p>竞争对手被整，公司内部不乏为此欢呼雀跃的人。他们可能已经忘了唇亡齿寒，一荣俱荣、一损俱损的道理。同样作为资讯类客户端，头条在2012年腾空出世，颠覆性地使用了算法对资讯、新闻进行分发，一路过关斩将，发展势头迅猛，硬是把老牌门户网站搜狐新闻、新浪新闻、网易新闻给pk了下去，腾讯新闻因为有QQ和微信导流，地位仍不可撼动。网易新闻app在于2011年推出，得益于PC时代口碑的积累，有态度slogan深度人心，网易新闻app也获得了长足的发展，不管是口碑，还是用户量都有不错的提升。然而，从2016年之后，用户量开始流失，很多元老级别有才的用户开始变得不活跃，一部分原因是公司内部动荡，人员流动大，来一波人重新做一套，导致真正对用户有用，有价值的事情做得并不多；另一个比较大的原因是有关部门对言论的管制越来越紧，有些直击社会现实，有深度的文章都没法发出去，甚至对于某些文章都没法评论。这对于标榜有态度、无跟帖不新闻的网易新闻简直就是致命打击。这次头条整改的背后，除了部分用户反馈有涉黄、低俗的成分以外，恐怕还跟头条对有关部门要求的整改执行不力有关，而且是主要原因。网易新闻也曾被多次要求整改，所以现在网易新闻的跟帖中会看到有用户说网易新闻已经不再是网易新闻了，没有以前的态度了。但是活下去更重要。在有态度和活下去之间网易新闻选择了后者。新闻中专门处理政府关系的人，经常会收到有关部门要求整改的”口头谈话“，俗称喝茶。有些要求个人认为其实非常过分，但是没办法，我们也得执行。头条整改之后，再联想到之前天涯”同志”板块被删除、A站B站纷纷下架一大批内容重新整改，暴走漫画被封杀诸如此类的消息，可以预测，关于新闻新一轮的整改也会到来，到时候，该删的文章得删，该歌颂的东西得歌颂，一个都不能少。之后，那些为头条被整改而欢呼雀跃的人，还能在欢呼得起来吗？此刻我想起了一句话，“Big Brother is watching you!”</p>]]></content>
      
      
      <categories>
          
          <category> Thinking </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Coursera公开课-Algorithm-Percolation</title>
      <link href="/2017/12/24/Coursera-Algorithm-Part-One-Percolation/"/>
      <url>/2017/12/24/Coursera-Algorithm-Part-One-Percolation/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前段时间在coursera上注册了两门课，Algorithms, Part I，Algorithms, Part II，这教授（Robert Sedgewick）讲得确实不错，不敢说甩国内老师一条街，起码比国内老师讲得要通俗易懂得多，配合ppt和作业，只要你认真做完，收获会非常大。对于学生，空闲时间比较多，同时上两门也OK；对于上班族，个人还是建议先上完Part I，再去上Part-II，一周同时上两门课，还要做两次作业，确实有点吃不消（本人作死，同时上了两门，下班回来做作业经常做到一两点，哭死）。</p><span id="more"></span><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>发完牢骚，进入正题。第一周的作业是Percolation，在一个N*N的格子中，每个格子有三种状态，blocked, open, full。一开始所有的格子都是blocked状态，随机打开任意一个格子（格子状态变为open，如果格子能通过上下左右连接到顶部，则把格子状态改为full），如果格子中的上下两端能通过格子连接，那么我们就可以说整个系统处于渗透状态。问题更具体描述，可以查看：<a href="http://coursera.cs.princeton.edu/algs4/assignments/percolation.html">http://coursera.cs.princeton.edu/algs4/assignments/percolation.html</a></p><p><img src="/2017/12/24/Coursera-Algorithm-Part-One-Percolation/p1.png"></p><p><img src="/2017/12/24/Coursera-Algorithm-Part-One-Percolation/p2.png"></p><p>对于给定的N，实现下方API：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Percolation</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Percolation</span><span class="params">(<span class="type">int</span> n)</span>                <span class="comment">// create n-by-n grid, with all sites blocked</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> col)</span>    <span class="comment">// open site (row, col) if it is not open already</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isOpen</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> col)</span>  <span class="comment">// is site (row, col) open?</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> col)</span>  <span class="comment">// is site (row, col) full?</span></span><br><span class="line">   <span class="keyword">public</span>     <span class="type">int</span> <span class="title function_">numberOfOpenSites</span><span class="params">()</span>       <span class="comment">// number of open sites</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">percolates</span><span class="params">()</span>              <span class="comment">// does the system percolate?</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>   <span class="comment">// test client (optional)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>这道题考察的就是使用并查集解决实际问题的能力。每打开一个格子，我们直接把上下左右四个格子和当前格子合并即可。用一个二维数组记录当前格子(row, col)是否被打开，同时用openedCount来记录打开格子的个数。那么如何实现isFull()呢？如果暴力枚举的话，需要O(N)的事件复杂度，对于percolates()更是需要O(N*N)的复杂度。有没有更好的方案呢？一个比较tricky的方法是在头部和尾部分别添加两个虚拟的节点。那么对于percolates()我们只需要用并查集判断isConnected(top, bottom)即可，时间复杂度降为O(logN)。对于isFull()判断isConnected(top, currentNodeIndex)，这样有没有问题？当然有，拿下图为例，左下角的三个红点应该是open状态，但是由于增加了虚拟的bottom节点，导致这三个节点变成了full状态。我能想到的解决方案是建立两个并查集，一个只添加top虚拟节点，另一个添加top和bottom节点，这样问题就迎刃而解了。</p><p><img src="/2017/12/24/Coursera-Algorithm-Part-One-Percolation/p3.png"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>Percolation源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.WeightedQuickUnionUF;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Percolation</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> WeightedQuickUnionUF uf1;</span><br><span class="line">    <span class="keyword">private</span> WeightedQuickUnionUF uf2;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span>[][] opened;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> openedCount;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> BOTTOM;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> TOP;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> N;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// create n-by-n grid, with all sites blocked</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Percolation</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        validateParam(n &lt;= <span class="number">0</span>);</span><br><span class="line">        N = n;</span><br><span class="line">        BOTTOM = N * N + <span class="number">2</span>;</span><br><span class="line">        TOP = N * N + <span class="number">1</span>;</span><br><span class="line">        uf1 = <span class="keyword">new</span> <span class="title class_">WeightedQuickUnionUF</span>((N+<span class="number">2</span>) * (N+<span class="number">2</span>) + <span class="number">2</span>);</span><br><span class="line">        uf2 = <span class="keyword">new</span> <span class="title class_">WeightedQuickUnionUF</span>((N+<span class="number">2</span>) * (N+<span class="number">2</span>) + <span class="number">1</span>);</span><br><span class="line">        opened = <span class="keyword">new</span> <span class="title class_">boolean</span>[N+<span class="number">1</span>][N+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>; i&lt;=N; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>; j&lt;=N; j++)</span><br><span class="line">                opened[i][j] = <span class="literal">false</span>;</span><br><span class="line">        openedCount = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// open site (row, col) if it is not open already</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> col)</span> &#123;</span><br><span class="line">        validateParam(row &lt; <span class="number">1</span> || row &gt; N || col &lt; <span class="number">1</span> || col &gt; N);</span><br><span class="line">        <span class="keyword">if</span> (!opened[row][col]) &#123;</span><br><span class="line">            opened[row][col] = <span class="literal">true</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> xyTo1D(row, col);</span><br><span class="line">            <span class="keyword">if</span> (row == N) uf1.union(BOTTOM, index);</span><br><span class="line">            <span class="keyword">if</span> (row == <span class="number">1</span>) &#123;</span><br><span class="line">                uf1.union(TOP, index);</span><br><span class="line">                uf2.union(TOP, index);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (row-<span class="number">1</span> &gt;= <span class="number">1</span> &amp;&amp; opened[row-<span class="number">1</span>][col]) &#123;</span><br><span class="line">                uf1.union( index, xyTo1D(row-<span class="number">1</span>, col) );</span><br><span class="line">                uf2.union( index, xyTo1D(row-<span class="number">1</span>, col) );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (row+<span class="number">1</span> &lt;= N &amp;&amp; opened[row+<span class="number">1</span>][col]) &#123;</span><br><span class="line">                uf1.union( index, xyTo1D(row+<span class="number">1</span>, col) );</span><br><span class="line">                uf2.union( index, xyTo1D(row+<span class="number">1</span>, col) );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (col-<span class="number">1</span> &gt;= <span class="number">1</span> &amp;&amp; opened[row][col-<span class="number">1</span>]) &#123;</span><br><span class="line">                uf1.union( index, xyTo1D(row, col-<span class="number">1</span>) );</span><br><span class="line">                uf2.union( index, xyTo1D(row, col-<span class="number">1</span>) );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (col+<span class="number">1</span> &lt;= N &amp;&amp; opened[row][col+<span class="number">1</span>]) &#123;</span><br><span class="line">                uf1.union( index, xyTo1D(row, col+<span class="number">1</span>) );</span><br><span class="line">                uf2.union( index, xyTo1D(row, col+<span class="number">1</span>) );</span><br><span class="line">            &#125;</span><br><span class="line">            openedCount++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// is site (row, col) open?</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isOpen</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> col)</span> &#123;</span><br><span class="line">        validateParam(row &lt; <span class="number">1</span> || row &gt; N || col &lt; <span class="number">1</span> || col &gt; N);</span><br><span class="line">        <span class="keyword">return</span> opened[row][col];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// is site (row, col) full?</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> col)</span> &#123;</span><br><span class="line">        validateParam(row &lt; <span class="number">1</span> || row &gt; N || col &lt; <span class="number">1</span> || col &gt; N);</span><br><span class="line">        <span class="keyword">return</span> uf2.connected(TOP, xyTo1D(row, col) );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// number of open sites</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numberOfOpenSites</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> openedCount;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// does the system percolate?</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">percolates</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> uf1.connected(TOP, BOTTOM);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">xyTo1D</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> col)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (row-<span class="number">1</span>) * N + col;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">validateParam</span><span class="params">(<span class="type">boolean</span> invalid)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (invalid)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Data invalid! Please check your input!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// test client (optional)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然了，题目也要求增加统计API来计算渗透概率临界值p*</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PercolationStats</span> &#123;</span><br><span class="line">  <span class="comment">// perform trials independent experiments on an n-by-n grid</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">PercolationStats</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> trials)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">mean</span><span class="params">()</span>      <span class="comment">// sample mean of percolation threshold</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">stddev</span><span class="params">()</span>   <span class="comment">// sample standard deviation of percolation threshold</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">confidenceLo</span><span class="params">()</span> <span class="comment">// low  endpoint of 95% confidence interval</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">confidenceHi</span><span class="params">()</span> <span class="comment">// high endpoint of 95% confidence interval</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>        <span class="comment">// test client (described below)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个是so easy的事，直接看assigments中的定义，把代码敲上即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdRandom;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdStats;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PercolationStats</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span>[] probability;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="variable">stddev</span> <span class="operator">=</span> <span class="number">0.0f</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="variable">mean</span> <span class="operator">=</span> <span class="number">0.0f</span>;</span><br><span class="line">    <span class="comment">// perform trials independent experiments on an n-by-n grid</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PercolationStats</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> trials)</span> &#123;</span><br><span class="line">        validateParam(n&lt;=<span class="number">0</span> || trials &lt;=<span class="number">0</span> );</span><br><span class="line">        probability = <span class="keyword">new</span> <span class="title class_">double</span>[trials];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span> ; i&lt;trials; i++) &#123;</span><br><span class="line">            <span class="type">Percolation</span> <span class="variable">percolation</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Percolation</span>(n);</span><br><span class="line">            <span class="keyword">while</span> (!percolation.percolates()) &#123;</span><br><span class="line">                <span class="type">int</span> x= StdRandom.uniform(n) + <span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> y= StdRandom.uniform(n) + <span class="number">1</span>;</span><br><span class="line">                percolation.open(x, y);</span><br><span class="line">            &#125;</span><br><span class="line">            probability[i] = (<span class="type">double</span>) percolation.numberOfOpenSites() / (n*n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// sample mean of percolation threshold</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">mean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Double.compare(mean, <span class="number">0.0f</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            mean = StdStats.mean(probability);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// sample standard deviation of percolation threshold</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">stddev</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Double.compare(stddev, <span class="number">0.0f</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            stddev = StdStats.stddev(probability);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stddev;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// low  endpoint of 95% confidence interval</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">confidenceLo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mean() - <span class="number">1.96d</span> * stddev() / Math.sqrt(probability.length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// high endpoint of 95% confidence interval</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">confidenceHi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mean() + <span class="number">1.96d</span> * stddev() / Math.sqrt(probability.length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">validateParam</span><span class="params">(<span class="type">boolean</span> invalid)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (invalid)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Data invalid! Please check your input!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// test client (described below)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">int</span> <span class="variable">times</span> <span class="operator">=</span> Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line">        <span class="type">PercolationStats</span> <span class="variable">stats</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PercolationStats</span>(n, times);</span><br><span class="line">        System.out.println(<span class="string">&quot;mean                    = &quot;</span> + stats.mean());</span><br><span class="line">        System.out.println(<span class="string">&quot;stddev                  = &quot;</span> + stats.stddev());</span><br><span class="line">        System.out.println(<span class="string">&quot;95% confidence interval = [&quot;</span></span><br><span class="line">                + stats.confidenceLo()</span><br><span class="line">                + <span class="string">&quot;, &quot;</span></span><br><span class="line">                + stats.confidenceHi()</span><br><span class="line">                + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>渗透模型有很多应用（参考：<a href="https://mooc.guokr.com/note/15357/">Percolation Models</a>）： 如森林火灾模型（当森林密度超过该阈值时，就会发生火灾），银行渗透模型，国家倒闭模型等。</p><p>PS:</p><p>第一次提交，只得了83分，原因是xyTo1D函数设计得有点问题，第二次提交得了99分，原因如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Test 1: count calls to StdStats.mean() and StdStats.stddev()</span><br><span class="line">  * n =  20, trials =  10</span><br><span class="line">    - calls StdStats.mean() the wrong number of times</span><br><span class="line">    - number of student   calls to StdStats.mean() = 3</span><br><span class="line">    - number of reference calls to StdStats.mean() = 1</span><br><span class="line">==&gt; FAILED</span><br></pre></td></tr></table></figure><p>统计API没有做缓存，后来又改了一版，终于得到了100分。然而比较可惜的是，并没有得到bonus。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Estimated student memory = 17.00 n^2 + 105.00 n + 392.00   (R^2 = 1.000)</span><br><span class="line">Test 2 (bonus): check that total memory &lt;= 11 n^2 + 128 n + 1024 bytes</span><br><span class="line">   -  failed memory test for n = 64</span><br><span class="line">==&gt; FAILED</span><br></pre></td></tr></table></figure><p>对于当前的算法，暂时没有办法把n^2前面的系数减少，如果你有更好地算法，欢迎和我讨论。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Coursera </tag>
            
            <tag> Percolation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Coursera公开课-Algorithm-WordNet</title>
      <link href="/2017/12/24/Coursera-Algorithm-Part-Two-WordNet/"/>
      <url>/2017/12/24/Coursera-Algorithm-Part-Two-WordNet/</url>
      
        <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>Part-Two week1的作业是wordnet。wordnet是一个单词网络。用有向边来表示单词的关系。比如miracle —&gt;event，说明miracle是event的一种，他们是isa关系。</p><span id="more"></span><p><img src="/2017/12/24/Coursera-Algorithm-Part-Two-WordNet/p1.png"></p><p>第一个问题是对于给定的一个有向图，找出两者之间的最短距离和公共祖先。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SAP</span> &#123;</span><br><span class="line">   <span class="comment">// constructor takes a digraph (not necessarily a DAG)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">SAP</span><span class="params">(Digraph G)</span></span><br><span class="line">   <span class="comment">// length of shortest ancestral path between v and w; -1 if no such path</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">length</span><span class="params">(<span class="type">int</span> v, <span class="type">int</span> w)</span></span><br><span class="line">   <span class="comment">// a common ancestor of v and w that participates in a shortest ancestral path; -1 if no such path</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">ancestor</span><span class="params">(<span class="type">int</span> v, <span class="type">int</span> w)</span></span><br><span class="line">   <span class="comment">// length of shortest ancestral path between any vertex in v and any vertex in w; -1 if no such path</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">length</span><span class="params">(Iterable&lt;Integer&gt; v, Iterable&lt;Integer&gt; w)</span></span><br><span class="line">   <span class="comment">// a common ancestor that participates in shortest ancestral path; -1 if no such path</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">ancestor</span><span class="params">(Iterable&lt;Integer&gt; v, Iterable&lt;Integer&gt; w)</span></span><br><span class="line">   <span class="comment">// do unit testing of this class</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二个问题是对于给定的一个wordnet，找出wordnet中的所有单词，并计算任意两个单词之间的距离。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WordNet</span> &#123;</span><br><span class="line">   <span class="comment">// constructor takes the name of the two input files</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">WordNet</span><span class="params">(String synsets, String hypernyms)</span></span><br><span class="line">   <span class="comment">// returns all WordNet nouns</span></span><br><span class="line">   <span class="keyword">public</span> Iterable&lt;String&gt; <span class="title function_">nouns</span><span class="params">()</span></span><br><span class="line">   <span class="comment">// is the word a WordNet noun?</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isNoun</span><span class="params">(String word)</span></span><br><span class="line">   <span class="comment">// distance between nounA and nounB (defined below)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">distance</span><span class="params">(String nounA, String nounB)</span></span><br><span class="line">   <span class="comment">//distance(A, B) = distance is the minimum length of any ancestral path between any synset v of A and any synset w of B.</span></span><br><span class="line">   <span class="comment">// a synset (second field of synsets.txt) that is the common ancestor of nounA and nounB</span></span><br><span class="line">   <span class="comment">// in a shortest ancestral path (defined below)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">sap</span><span class="params">(String nounA, String nounB)</span></span><br><span class="line">   <span class="comment">// do unit testing of this class</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后一个问题是找出wordnet当中和其他单词关联性最小的一个单词，换句话说，我们要找出一个单词Ai使得</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">di   =   dist(Ai, A1)   +   dist(Ai, A2)   +   ...   +   dist(Ai, An)</span><br></pre></td></tr></table></figure><p>最大。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outcast</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Outcast</span><span class="params">(WordNet wordnet)</span>         <span class="comment">// constructor takes a WordNet object</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">outcast</span><span class="params">(String[] nouns)</span>   <span class="comment">// given an array of WordNet nouns, return an outcast</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  <span class="comment">// see test client below</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更具体的题目描述，请看：<a href="http://coursera.cs.princeton.edu/algs4/assignments/wordnet.html">http://coursera.cs.princeton.edu/algs4/assignments/wordnet.html</a></p><p>输入数据格式<br>wordnet输入有两个文件，一个是synsets，存储了wordnet当中所有单词，主要有三部分，第一部分是一个整数，是sysnets中的id，第二部分是一组单词，第三部分是这组单词的解释。如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 36,AND_circuit AND_gate,a circuit in a computer that fires only when all of its inputs fire </span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>表示单词集合{AND_circuit, AND_gate}在sysnet中的id是36，他们有个共同的解释就是a circuit in a computer that fires only when all of its inputs fire 。</p><p>wordnet第二个输入文件是hypernyms，存储了synsets之间的关系，如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 164,21012,56099</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>表示sysnet 164 (“Actifed”)有两个子类，21012(“antihistamine”)和56099 (“nasal_decongestant”)，这和sysnets文件的输入是对应的</p><p>164,Actifed,trade name for a drug containing an antihistamine and a decongestant…<br>21012,antihistamine,a medicine used to treat allergies…<br>56099,nasal_decongestant,a decongestant that provides temporary relief of nasal…</p><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>从哪里入手呢？官方很贴心地给出了步骤(Possible progress steps)：<a href="http://coursera.cs.princeton.edu/algs4/checklists/wordnet.html">http://coursera.cs.princeton.edu/algs4/checklists/wordnet.html</a></p><ul><li>Create the data type SAP</li><li>Implement the remaining WordNet methods.</li><li>Implement Outcast.</li><li>如果没有思路，可以先看下官方给的checklists，非常有用。</li></ul><p>我们看SAP，求最短路径和公共祖先。因为wordnet是一个有向图，并且不会有环（这点题目中已说明），因此求最短路径只需要走一遍bfs即可，同时记录下可达点。有了SAP后，求wordnet中的distance其实就是直接套用SAP的代码。wordnet中最关键的还是数据如何存储。如果是以id来作为key的话，遇到一个id对应多个单词的情况处理起来比较麻烦，因此我们以单词为key，存储单词对应的id(可能有多个)，求wordnet中的distance(String nounA, String nounB)，其实就是求单词对应id的最短路径，直接用SAP来求即可。Outcast应该是好实现的了。直接遍历wordnet当中所有单词两两之间的距离，求一个最小的即可。时间复杂度是O(N^2)。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="SAP"><a href="#SAP" class="headerlink" title="SAP"></a>SAP</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.Digraph;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.In;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdIn;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdOut;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SAP</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INFINITY</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">private</span> Digraph G;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SAP</span><span class="params">(Digraph G)</span> &#123;</span><br><span class="line">        checkCondition(G == <span class="literal">null</span>);</span><br><span class="line">        <span class="built_in">this</span>.G = <span class="keyword">new</span> <span class="title class_">Digraph</span>(G);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// length of shortest ancestral path between v and w; -1 if no such path</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">length</span><span class="params">(<span class="type">int</span> v, <span class="type">int</span> w)</span> &#123;</span><br><span class="line">        checkCondition(v &lt; <span class="number">0</span> || v &gt;= G.V());</span><br><span class="line">        checkCondition(w &lt; <span class="number">0</span> || w &gt;= G.V());</span><br><span class="line">        <span class="keyword">return</span> getLengthOf(v, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// a common ancestor of v and w that participates in a shortest ancestral path; -1 if no such path</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">ancestor</span><span class="params">(<span class="type">int</span> v, <span class="type">int</span> w)</span> &#123;</span><br><span class="line">        checkCondition(v &lt; <span class="number">0</span> || v &gt;= G.V());</span><br><span class="line">        checkCondition(w &lt; <span class="number">0</span> || w &gt;= G.V());</span><br><span class="line">        <span class="keyword">return</span> getAncestorOf(v, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// length of shortest ancestral path between any vertex in v and any vertex in w; -1 if no such path</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">length</span><span class="params">(Iterable&lt;Integer&gt; v, Iterable&lt;Integer&gt; w)</span> &#123;</span><br><span class="line">        checkCondition(v == <span class="literal">null</span>);</span><br><span class="line">        checkCondition(w == <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v1 : v) checkCondition(v1 &lt; <span class="number">0</span> || v1 &gt;= G.V());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> w1 : w) checkCondition(w1 &lt; <span class="number">0</span> || w1 &gt;= G.V());</span><br><span class="line">        <span class="keyword">return</span> getLengthOf(v, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// a common ancestor that participates in shortest ancestral path; -1 if no such path</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">ancestor</span><span class="params">(Iterable&lt;Integer&gt; v, Iterable&lt;Integer&gt; w)</span> &#123;</span><br><span class="line">        checkCondition(v == <span class="literal">null</span>);</span><br><span class="line">        checkCondition(w == <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v1 : v) checkCondition(v1 &lt; <span class="number">0</span> || v1 &gt;= G.V());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> w1 : w) checkCondition(w1 &lt; <span class="number">0</span> || w1 &gt;= G.V());</span><br><span class="line">        <span class="keyword">return</span> getAncestorOf(v, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getAncestorOf</span><span class="params">(Object v, Object w)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ancestor</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">DeluxeBFS</span> <span class="variable">uv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeluxeBFS</span>(G, v);</span><br><span class="line">        <span class="type">DeluxeBFS</span> <span class="variable">uw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeluxeBFS</span>(G, w);</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> INFINITY;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; G.V(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(uv.hasPathTo(i) &amp;&amp; uw.hasPathTo(i)) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">distance</span> <span class="operator">=</span> uv.distTo(i) + uw.distTo(i);</span><br><span class="line">                <span class="keyword">if</span>(distance &lt; result) &#123;</span><br><span class="line">                    result = distance;</span><br><span class="line">                    ancestor = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ancestor;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getLengthOf</span><span class="params">(Object v, Object w)</span> &#123;</span><br><span class="line">        <span class="type">DeluxeBFS</span> <span class="variable">uv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeluxeBFS</span>(G, v);</span><br><span class="line">        <span class="type">DeluxeBFS</span> <span class="variable">uw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeluxeBFS</span>(G, w);</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> INFINITY;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; G.V(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(uv.hasPathTo(i) &amp;&amp; uw.hasPathTo(i)) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">distance</span> <span class="operator">=</span> uv.distTo(i) + uw.distTo(i);</span><br><span class="line">                <span class="keyword">if</span>(distance &lt; result) &#123;</span><br><span class="line">                    result = distance;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result == INFINITY ? -<span class="number">1</span> : result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkCondition</span><span class="params">(<span class="type">boolean</span> inValid)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (inValid)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;param must be not null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">In</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">In</span>(args[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">Digraph</span> <span class="variable">G</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Digraph</span>(in);</span><br><span class="line">        <span class="type">SAP</span> <span class="variable">sap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAP</span>(G);</span><br><span class="line">        <span class="keyword">while</span> (!StdIn.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> StdIn.readInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> StdIn.readInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">length</span>   <span class="operator">=</span> sap.length(v, w);</span><br><span class="line">            <span class="type">int</span> <span class="variable">ancestor</span> <span class="operator">=</span> sap.ancestor(v, w);</span><br><span class="line">            StdOut.printf(<span class="string">&quot;length = %d, ancestor = %d\n&quot;</span>, length, ancestor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="WordNet"><a href="#WordNet" class="headerlink" title="WordNet"></a>WordNet</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.DirectedCycle;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.Bag;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.Digraph;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.In;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.ST;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WordNet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ST&lt;String, Bag&lt;Integer&gt;&gt; mDataSet = <span class="keyword">new</span> <span class="title class_">ST</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; mAllNouns = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Digraph mDigraph;</span><br><span class="line">    <span class="keyword">private</span> SAP mSAP;</span><br><span class="line">    <span class="comment">// constructor takes the name of the two input files</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WordNet</span><span class="params">(String synsets, String hypernyms)</span> &#123;</span><br><span class="line">        validateParam(hypernyms);</span><br><span class="line">        validateParam(synsets);</span><br><span class="line">        <span class="type">In</span> <span class="variable">synsetsIn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">In</span>(synsets);</span><br><span class="line">        <span class="type">int</span> <span class="variable">V</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (synsetsIn.hasNextLine()) &#123;</span><br><span class="line">            String[] data = synsetsIn.readLine().split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> Integer.parseInt(data[<span class="number">0</span>]);</span><br><span class="line">            String[] nouns = data[<span class="number">1</span>].split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (String noun : nouns) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mDataSet.contains(noun)) &#123;</span><br><span class="line">                    mDataSet.get(noun).add(id);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Bag&lt;Integer&gt; bag = <span class="keyword">new</span> <span class="title class_">Bag</span>&lt;Integer&gt;();</span><br><span class="line">                    bag.add(id);</span><br><span class="line">                    mDataSet.put(noun, bag);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            V++;</span><br><span class="line">            mAllNouns.add(data[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        mDigraph = <span class="keyword">new</span> <span class="title class_">Digraph</span>(V);</span><br><span class="line">        <span class="type">boolean</span>[] isNotRoots = <span class="keyword">new</span> <span class="title class_">boolean</span>[V];</span><br><span class="line">        <span class="type">In</span> <span class="variable">hypernymsIn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">In</span>(hypernyms);</span><br><span class="line">        <span class="keyword">while</span> (hypernymsIn.hasNextLine()) &#123;</span><br><span class="line">            String[] data = hypernymsIn.readLine().split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">childId</span> <span class="operator">=</span> Integer.parseInt(data[<span class="number">0</span>]);</span><br><span class="line">            isNotRoots[childId] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>; i&lt; data.length; i++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">parentId</span> <span class="operator">=</span> Integer.parseInt(data[i]);</span><br><span class="line">                mDigraph.addEdge(childId, parentId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mSAP == <span class="literal">null</span>) &#123;</span><br><span class="line">            mSAP = <span class="keyword">new</span> <span class="title class_">SAP</span>(mDigraph);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rootCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">boolean</span> notRoot : isNotRoots)</span><br><span class="line">            <span class="keyword">if</span> (!notRoot) rootCount++;</span><br><span class="line">        <span class="type">DirectedCycle</span> <span class="variable">cycle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DirectedCycle</span>(mDigraph);</span><br><span class="line">        cycle.hasCycle();</span><br><span class="line">        <span class="keyword">if</span> (rootCount &gt; <span class="number">1</span> || cycle.hasCycle())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;not a valid WordNet! &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;please check your input!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// returns all WordNet nouns</span></span><br><span class="line">    <span class="keyword">public</span> Iterable&lt;String&gt; <span class="title function_">nouns</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mDataSet.keys();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// is the word a WordNet noun?</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isNoun</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        validateParam(word);</span><br><span class="line">        <span class="keyword">return</span> mDataSet.contains(word);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// distance between nounA and nounB (defined below)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">distance</span><span class="params">(String nounA, String nounB)</span> &#123;</span><br><span class="line">        validateParam(nounA);</span><br><span class="line">        validateParam(nounB);</span><br><span class="line">        Bag&lt;Integer&gt; bagOfNounA = mDataSet.get(nounA);</span><br><span class="line">        Bag&lt;Integer&gt; bagOfNounB = mDataSet.get(nounB);</span><br><span class="line">        <span class="keyword">return</span> mSAP.length(bagOfNounA, bagOfNounB);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// a synset (second field of synsets.txt) that is the common ancestor of nounA and nounB</span></span><br><span class="line">    <span class="comment">// in a shortest ancestral path (defined below)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sap</span><span class="params">(String nounA, String nounB)</span> &#123;</span><br><span class="line">        validateParam(nounA);</span><br><span class="line">        validateParam(nounB);</span><br><span class="line">        Bag&lt;Integer&gt; bagOfNounA = mDataSet.get(nounA);</span><br><span class="line">        Bag&lt;Integer&gt; bagOfNounB = mDataSet.get(nounB);</span><br><span class="line">        <span class="type">int</span> <span class="variable">ancestor</span> <span class="operator">=</span> mSAP.ancestor(bagOfNounA, bagOfNounB);</span><br><span class="line">        <span class="keyword">return</span> mAllNouns.get(ancestor);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">validateParam</span><span class="params">(Object param)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (param == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;param must be not null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// do unit testing of this class</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Outcast"><a href="#Outcast" class="headerlink" title="Outcast"></a>Outcast</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.In;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdOut;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outcast</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> WordNet mWordNet;</span><br><span class="line">    <span class="comment">// constructor takes a WordNet object</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Outcast</span><span class="params">(WordNet wordnet)</span> &#123;</span><br><span class="line">        validateParam(wordnet);</span><br><span class="line">        mWordNet = wordnet;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// given an array of WordNet nouns, return an outcast</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">outcast</span><span class="params">(String[] nouns)</span> &#123;</span><br><span class="line">        validateParam(nouns);</span><br><span class="line">        <span class="type">int</span>[] distance = <span class="keyword">new</span> <span class="title class_">int</span>[nouns.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;nouns.length-<span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j=i+<span class="number">1</span>; j&lt;nouns.length; j++)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">dist</span> <span class="operator">=</span> mWordNet.distance(nouns[i], nouns[j]);</span><br><span class="line">                <span class="keyword">if</span> (i != j) distance[j] += dist;</span><br><span class="line">                            distance[i] += dist;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxDistance</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i &lt; distance.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (distance[i] &gt; maxDistance)&#123;</span><br><span class="line">                maxDistance = distance[i];</span><br><span class="line">                maxIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nouns[maxIndex];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">validateParam</span><span class="params">(Object param)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (param == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;param must be not null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// see test client below</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">WordNet</span> <span class="variable">wordnet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WordNet</span>(args[<span class="number">0</span>], args[<span class="number">1</span>]);</span><br><span class="line">        <span class="type">Outcast</span> <span class="variable">outcast</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outcast</span>(wordnet);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="number">2</span>; t &lt; args.length; t++) &#123;</span><br><span class="line">            <span class="type">In</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">In</span>(args[t]);</span><br><span class="line">            String[] nouns = in.readAllStrings();</span><br><span class="line">            StdOut.println(args[t] + <span class="string">&quot;: &quot;</span> + outcast.outcast(nouns));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>不得不说官方的API设计得非常好，甚至连test case都帮你搞定，让学生可以专注于算法的设计而不用去考虑其他琐碎的事情，你需要做的仅仅是想如何数据结构，使用什么算法去实现。checklists也很详细，做题目之前把checklists看一遍可以省掉你不少时间。更令人称赞的是他们设计得这套评分系统，不仅仅考察输出结果的正确性，包括对于不合法的输入检查，时间复杂度和内存的使用都在考察范围之内，要想一次拿100分还真不容易。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Coursera </tag>
            
            <tag> WordNet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Android Studio查看gradle源码</title>
      <link href="/2017/12/02/Read-Gradle-Source-Code-From-Android-Studio/"/>
      <url>/2017/12/02/Read-Gradle-Source-Code-From-Android-Studio/</url>
      
        <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>前段时间了解了Android Studio Instant Run的原理，不过基本上都是看国内的博客了解到的，没看到源码，总感觉没有get 到点，于是研究了一下，如何通过Android Studio查看Gradle源码。</p><span id="more"></span><h3 id="2-方法"><a href="#2-方法" class="headerlink" title="2. 方法"></a>2. 方法</h3><h4 id="2-1-下载"><a href="#2-1-下载" class="headerlink" title="2.1 下载"></a>2.1 下载</h4><p>先到seach.maven.org，然后输入com.android.tools.build进行搜索，先把gradle&#x2F;gradle core&#x2F;gradle api&#x2F;transform api对应的源码下载下来（当然你也可以下载全部）。注意：下载的版本要和Android Studio工程中的build.gradle配置文件中的版本一致。我的版本是compile ‘com.android.tools.build:gradle:2.3.0’，所以我选择gradle 2.3.0版本下载。</p><p><img src="/2017/12/02/Read-Gradle-Source-Code-From-Android-Studio/p1.png"></p><h4 id="2-2-放置源码"><a href="#2-2-放置源码" class="headerlink" title="2.2 放置源码"></a>2.2 放置源码</h4><p>然后找到Android Studio对应目录，右键—&gt;显示包内容，然后打开Contents&#x2F;gradle&#x2F;m2repository&#x2F;com&#x2F;android&#x2F;tools&#x2F;build目录，看下图</p><p><img src="/2017/12/02/Read-Gradle-Source-Code-From-Android-Studio/p2.png"></p><p>然后将相应源码放到对应目录下即可。比如直接把transform-api-2.0.0-deprecated-use-gradle-api-sources.jar放到Contents&#x2F;gradle&#x2F;m2repository&#x2F;com&#x2F;android&#x2F;tools&#x2F;build&#x2F;transform-api&#x2F;2.0.0-deprecated-use-gradle-api目录下即可。</p><p><img src="/2017/12/02/Read-Gradle-Source-Code-From-Android-Studio/p3.png"></p><h4 id="2-3-查看源码"><a href="#2-3-查看源码" class="headerlink" title="2.3 查看源码"></a>2.3 查看源码</h4><p>重新打开Android Studio，重新build一下便可看到源码，command+O就可以直接搜索你想要类了。</p><p><img src="/2017/12/02/Read-Gradle-Source-Code-From-Android-Studio/p4.png"></p><p>通过直接查看源码，可以看直接官方的Instant Run是如何做的。</p><p><img src="/2017/12/02/Read-Gradle-Source-Code-From-Android-Studio/p5.png"></p><h3 id="3-参考"><a href="#3-参考" class="headerlink" title="3. 参考"></a>3. 参考</h3><p><a href="http://www.cnblogs.com/dasusu/p/6650782.html">如何用Adnroid Studio查看build.gradle源码</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RecyclerView-onViewRecycled-什么时候被调用？</title>
      <link href="/2017/11/25/When-Method-onViewRecycled-Call-in-RecyclerView/"/>
      <url>/2017/11/25/When-Method-onViewRecycled-Call-in-RecyclerView/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>有个需求，要求View离开屏幕后立即上报后台，本来以为这是个非常easy的需求，直接给RecyclerView设置一个监听即可，没想到View离开屏幕后，RecyclerView并没有立即调用onViewRecycled方法，于是，跟了一下代码，发现RecyclerView还真是自己做了缓存。</p><span id="more"></span><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>显然是先从接口调用处开始入手</p><h4 id="dispatchViewRecycled"><a href="#dispatchViewRecycled" class="headerlink" title="dispatchViewRecycled"></a>dispatchViewRecycled</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">dispatchViewRecycled</span><span class="params">(ViewHolder holder)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mRecyclerListener != <span class="literal">null</span>) &#123;</span><br><span class="line">        mRecyclerListener.onViewRecycled(holder);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mAdapter != <span class="literal">null</span>) &#123;</span><br><span class="line">        mAdapter.onViewRecycled(holder);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mState != <span class="literal">null</span>) &#123;</span><br><span class="line">        mViewInfoStore.removeViewHolder(holder);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">&quot;dispatchViewRecycled: &quot;</span> + holder);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="addViewHolderToRecycledViewPool"><a href="#addViewHolderToRecycledViewPool" class="headerlink" title="addViewHolderToRecycledViewPool"></a>addViewHolderToRecycledViewPool</h4><p>添加ViewHolder到回收池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">addViewHolderToRecycledViewPool</span><span class="params">(ViewHolder holder)</span> &#123;</span><br><span class="line">    ViewCompat.setAccessibilityDelegate(holder.itemView, <span class="literal">null</span>);</span><br><span class="line">    dispatchViewRecycled(holder);</span><br><span class="line">    holder.mOwnerRecyclerView = <span class="literal">null</span>;</span><br><span class="line">    getRecycledViewPool().putRecycledView(holder);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="recycleViewHolderInternal"><a href="#recycleViewHolderInternal" class="headerlink" title="recycleViewHolderInternal"></a>recycleViewHolderInternal</h4><p>核心代码在这里</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">         * internal implementation checks if view is scrapped or attached and throws an exception</span></span><br><span class="line"><span class="comment">         * if so.</span></span><br><span class="line"><span class="comment">         * Public version un-scraps before calling recycle.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">recycleViewHolderInternal</span><span class="params">(ViewHolder holder)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (holder.isScrap() || holder.itemView.getParent() != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">                        <span class="string">&quot;Scrapped or attached views may not be recycled. isScrap:&quot;</span></span><br><span class="line">                                + holder.isScrap() + <span class="string">&quot; isAttached:&quot;</span></span><br><span class="line">                                + (holder.itemView.getParent() != <span class="literal">null</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (holder.isTmpDetached()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Tmp detached view should be removed &quot;</span></span><br><span class="line">                        + <span class="string">&quot;from RecyclerView before it can be recycled: &quot;</span> + holder);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (holder.shouldIgnore()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Trying to recycle an ignored view holder. You&quot;</span></span><br><span class="line">                        + <span class="string">&quot; should first call stopIgnoringView(view) before calling recycle.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//noinspection unchecked</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">transientStatePreventsRecycling</span> <span class="operator">=</span> holder</span><br><span class="line">                    .doesTransientStatePreventRecycling();</span><br><span class="line">            <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">forceRecycle</span> <span class="operator">=</span> mAdapter != <span class="literal">null</span></span><br><span class="line">                    &amp;&amp; transientStatePreventsRecycling</span><br><span class="line">                    &amp;&amp; mAdapter.onFailedToRecycleView(holder);</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">cached</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">recycled</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG &amp;&amp; mCachedViews.contains(holder)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;cached view received recycle internal? &quot;</span> +</span><br><span class="line">                        holder);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (forceRecycle || holder.isRecyclable()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!holder.hasAnyOfTheFlags(ViewHolder.FLAG_INVALID | ViewHolder.FLAG_REMOVED</span><br><span class="line">                        | ViewHolder.FLAG_UPDATE)) &#123;</span><br><span class="line">                    <span class="comment">// Retire oldest cached view</span></span><br><span class="line">                    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">cachedViewSize</span> <span class="operator">=</span> mCachedViews.size();</span><br><span class="line">                    <span class="keyword">if</span> (cachedViewSize == mViewCacheMax &amp;&amp; cachedViewSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        recycleCachedViewAt(<span class="number">0</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (cachedViewSize &lt; mViewCacheMax) &#123;</span><br><span class="line">                        mCachedViews.add(holder);</span><br><span class="line">                        cached = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!cached) &#123;</span><br><span class="line">                    addViewHolderToRecycledViewPool(holder);</span><br><span class="line">                    recycled = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;trying to recycle a non-recycleable holder. Hopefully, it will &quot;</span></span><br><span class="line">                        + <span class="string">&quot;re-visit here. We are still removing it from animation lists&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// even if the holder is not removed, we still call this method so that it is removed</span></span><br><span class="line">            <span class="comment">// from view holder lists.</span></span><br><span class="line">            mViewInfoStore.removeViewHolder(holder);</span><br><span class="line">            <span class="keyword">if</span> (!cached &amp;&amp; !recycled &amp;&amp; transientStatePreventsRecycling) &#123;</span><br><span class="line">                holder.mOwnerRecyclerView = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>其中有一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (cachedViewSize &lt; mViewCacheMax) &#123;</span><br><span class="line">                      mCachedViews.add(holder);</span><br><span class="line">                      cached = <span class="literal">true</span>;</span><br><span class="line">                  &#125;</span><br></pre></td></tr></table></figure><p>RecyclerView在此处使用了内存缓存，通过查看源码，可以发现mViewCacheMax默认为2（使用RecyclerView.setItemViewCacheSize(int size)设置 ），也就是说当某个holder中的View被DetachFromWindow后，不会立即被回收。知道了原因，解决方案也很简单，直接使用RecyclerView.setItemViewCacheSize(0)即可。</p><h3 id="多说一句"><a href="#多说一句" class="headerlink" title="多说一句"></a>多说一句</h3><p>在review项目代码的时候，发现有如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">BaseItemHolder</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">        itemView.addOnAttachStateChangeListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnAttachStateChangeListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onViewAttachedToWindow</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="comment">// 此处持有activity引用</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onViewDetachedFromWindow</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="comment">// 此处并没有把activity引用置空</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>这样其实是会导致两个问题：</p><ol><li>首先activity引用一直没法释放，有可能会导致内存泄漏问题</li><li>由于RecyclerView的复用机制，当Holder被回收的时候，该View设置监听状态是不会自动移除的(下图)。因此为了防止状态错乱，最好在View被回收时，还原View的初始状态（清空监听、子View状态设置为View.GONE等）。</li></ol><p><img src="/2017/11/25/When-Method-onViewRecycled-Call-in-RecyclerView/p1.png"></p><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="https://stackoverflow.com/questions/33846536/how-can-i-remove-onclicklisteners-from-recyclerviews-viewholders-when-they-are">https://stackoverflow.com/questions/33846536/how-can-i-remove-onclicklisteners-from-recyclerviews-viewholders-when-they-are</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> RecyclerView </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新项目问题汇总</title>
      <link href="/2017/11/19/Some-Problems-On-Milk/"/>
      <url>/2017/11/19/Some-Problems-On-Milk/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近两个月，一直在做新项目，期间遇到了不少问题，在此备忘一下吧</p><span id="more"></span><h3 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h3><h4 id="1-Scrollview嵌套RecycleView后，滑动卡顿的问题"><a href="#1-Scrollview嵌套RecycleView后，滑动卡顿的问题" class="headerlink" title="1. Scrollview嵌套RecycleView后，滑动卡顿的问题"></a>1. Scrollview嵌套RecycleView后，滑动卡顿的问题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">recyclerView.setNestedScrollingEnabled(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>当然也可以这样解决：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LinearLayoutManager</span> <span class="variable">linearLayoutManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinearLayoutManager</span>(getActivity(), LinearLayoutManager.VERTICAL, <span class="literal">false</span>) &#123;  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canScrollVertically</span><span class="params">()</span> &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;;  </span><br><span class="line">    recyclerview.setLayoutManager(linearLayoutManager);</span><br></pre></td></tr></table></figure><h4 id="2-自定义actionbar去掉左右空白"><a href="#2-自定义actionbar去掉左右空白" class="headerlink" title="2. 自定义actionbar去掉左右空白"></a>2. 自定义actionbar去掉左右空白</h4><h5 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h5><p>actionbar样式中默认有两个属性contentInsetStart&#x2F;contentInsetEnd分别控制左右边距，默认是16dp</p><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><ul><li>方法1<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> LayoutInflater.from(<span class="built_in">this</span>).inflate(R.layout.custom_actionbar，<span class="literal">null</span>);  </span><br><span class="line">ActionBar.<span class="type">LayoutParams</span> <span class="variable">layoutParams</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActionBar</span>.LayoutParams(ActionBar.LayoutParams.MATCH_PARENT,  </span><br><span class="line">        ActionBar.LayoutParams.MATCH_PARENT);  </span><br><span class="line">layoutParams.gravity = Gravity.CENTER_HORIZONTAL | Gravity.CENTER_HORIZONTAL;  </span><br><span class="line">actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);  </span><br><span class="line">actionBar.setDisplayShowHomeEnabled(<span class="literal">false</span>);  </span><br><span class="line">actionBar.setDisplayShowCustomEnabled(<span class="literal">true</span>);  </span><br><span class="line">actionBar.setDisplayShowTitleEnabled(<span class="literal">false</span>);  </span><br><span class="line">actionBar.setCustomView(view, layoutParams);  </span><br><span class="line"><span class="type">ViewParent</span> <span class="variable">parent</span> <span class="operator">=</span> view.getParent();</span><br><span class="line"><span class="keyword">if</span> (parent <span class="keyword">instanceof</span> Toolbar) &#123;</span><br><span class="line">    <span class="comment">// 解决系统actionbar左右留有16dp空白问题</span></span><br><span class="line">    ((Toolbar) parent).setContentInsetsAbsolute(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>方法2</li></ul><p>经过网上搜索得出答案， 原来需要重写为0dp即可解决。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;contentInsetStart&quot;</span>&gt;</span> 和 <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;contentInsetEnd&quot;</span>&gt;</span></span><br><span class="line">下面是我在style.xml文件中自定义actionbarstyle的示例代码</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;ActionBarBaseStyle&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;@style/Widget.AppCompat.Light.ActionBar&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;background&quot;</span>&gt;</span>@color/actionbar_background<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;titleTextStyle&quot;</span>&gt;</span>@style/TitleStyle<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:icon&quot;</span>&gt;</span>@android:color/transparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;subtitleTextStyle&quot;</span>&gt;</span>@style/SubTitle<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;contentInsetStart&quot;</span>&gt;</span>0dp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;contentInsetEnd&quot;</span>&gt;</span>0dp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-隐藏Listview和RecyclerView-滑动边界的阴影"><a href="#3-隐藏Listview和RecyclerView-滑动边界的阴影" class="headerlink" title="3. 隐藏Listview和RecyclerView 滑动边界的阴影"></a>3. 隐藏Listview和RecyclerView 滑动边界的阴影</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:overScrollMode=<span class="string">&quot;never&quot;</span></span><br></pre></td></tr></table></figure><h4 id="4-RelativeLayout-id-x2F-和-id-x2F-的区别"><a href="#4-RelativeLayout-id-x2F-和-id-x2F-的区别" class="headerlink" title="4. RelativeLayout @id&#x2F; 和@+id&#x2F;的区别"></a>4. RelativeLayout @id&#x2F; 和@+id&#x2F;的区别</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">&quot;@string/menu_start&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_centerHorizontal</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;70dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_alignLeft</span>=<span class="string">&quot;@id/btn_menu_scores&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_alignRight</span>=<span class="string">&quot;@id/btn_menu_scores&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textSize</span>=<span class="string">&quot;30dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textStyle</span>=<span class="string">&quot;bold&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginBottom</span>=<span class="string">&quot;20dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn_menu_start&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">&quot;@string/menu_scores&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_horizontal&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textStyle</span>=<span class="string">&quot;bold&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textSize</span>=<span class="string">&quot;30dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginBottom</span>=<span class="string">&quot;20dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn_menu_scores&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>xml的解析是从上往下扫描的，如果id为btn_menu_scores的View在当前View下方，则会报如下错误：</p><p>No resource found that matches the given name (at ‘layout_alignLeft’ with value ‘@id&#x2F;btn_menu_scores’)<br>此时把@id&#x2F;改成@+id&#x2F;就可以了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">&quot;@string/menu_start&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_centerHorizontal</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;70dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_alignLeft</span>=<span class="string">&quot;@+id/btn_menu_scores&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_alignRight</span>=<span class="string">&quot;@+id/btn_menu_scores&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textSize</span>=<span class="string">&quot;30dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textStyle</span>=<span class="string">&quot;bold&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginBottom</span>=<span class="string">&quot;20dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn_menu_start&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">&quot;@string/menu_scores&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_horizontal&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textStyle</span>=<span class="string">&quot;bold&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textSize</span>=<span class="string">&quot;30dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginBottom</span>=<span class="string">&quot;20dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn_menu_scores&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-EditText输入表情"><a href="#5-EditText输入表情" class="headerlink" title="5. EditText输入表情"></a>5. EditText输入表情</h4><ul><li>方法1<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">CharSequence</span> <span class="variable">charSequence</span> <span class="operator">=</span> Html.fromHtml(html,  </span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">ImageGetter</span>() &#123;  </span><br><span class="line">  </span><br><span class="line">                            <span class="meta">@Override</span>  </span><br><span class="line">                            <span class="keyword">public</span> Drawable <span class="title function_">getDrawable</span><span class="params">(String source)</span> &#123;  </span><br><span class="line">                                <span class="comment">// TODO Auto-generated method stub  </span></span><br><span class="line">                                <span class="type">Drawable</span> <span class="variable">drawable</span> <span class="operator">=</span> getResources().getDrawable(  </span><br><span class="line">                                        Integer.parseInt(source));  </span><br><span class="line">                                <span class="comment">// 设置drawable的大小。设置为实际大小  </span></span><br><span class="line">                                drawable.setBounds(<span class="number">0</span>, <span class="number">0</span>,  </span><br><span class="line">                                        drawable.getIntrinsicWidth(),  </span><br><span class="line">                                        drawable.getIntrinsicHeight());  </span><br><span class="line">                                <span class="keyword">return</span> drawable;  </span><br><span class="line">                            &#125;  </span><br><span class="line">                        &#125;, <span class="literal">null</span>);  </span><br><span class="line">                textView.setText(charSequence);</span><br></pre></td></tr></table></figure></li><li>方法2<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Bitmap</span> <span class="variable">bitmap</span> <span class="operator">=</span> BitmapFactory.decodeResource(getResources(),  </span><br><span class="line">        images[randomId]);  </span><br><span class="line"><span class="comment">// 得到SpannableString对象,主要用于拆分字符串  </span></span><br><span class="line"><span class="type">SpannableString</span> <span class="variable">spannableString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpannableString</span>(<span class="string">&quot;image&quot;</span>);  </span><br><span class="line"><span class="comment">// 得到ImageSpan对象  </span></span><br><span class="line"><span class="type">ImageSpan</span> <span class="variable">imageSpan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImageSpan</span>(MainActivity.<span class="built_in">this</span>, bitmap);  </span><br><span class="line"><span class="comment">// 调用spannableString的setSpan()方法  </span></span><br><span class="line">spannableString.setSpan(imageSpan, <span class="number">0</span>, <span class="number">5</span>,  </span><br><span class="line">        Spannable.SPAN_INCLUSIVE_EXCLUSIVE);  </span><br><span class="line"><span class="comment">// 给EditText追加spannableString  </span></span><br><span class="line">editText.append(spannableString);</span><br></pre></td></tr></table></figure></li></ul><h4 id="6-ScrollView嵌套RecyclerView自动滑动问题"><a href="#6-ScrollView嵌套RecyclerView自动滑动问题" class="headerlink" title="6. ScrollView嵌套RecyclerView自动滑动问题"></a>6. ScrollView嵌套RecyclerView自动滑动问题</h4><p>这貌似是RecyclerView的一个Bug，具体请看这里：<br><a href="https://issuetracker.google.com/issues/37120277">https://issuetracker.google.com/issues/37120277</a></p><p><a href="https://stackoverflow.com/questions/37782485/android-prevent-nested-recyclerview-from-automatically-repositioning">https://stackoverflow.com/questions/37782485/android-prevent-nested-recyclerview-from-automatically-repositioning</a></p><p>ScrollView里面套一个RecyclerView使用时，会发现当RecyclerView填充满数据后，ScrollView会自动滑动到RecyclerView所在位置。原因是RecyclerView抢占了焦点，解决方案当然也多种多样了，能够阻止RecyclerView获取焦点即可。因为我的布局中是ScrollView包含LinearLayout，LinearLayout又包含RecyclerView，所以在LinearLayout中添加如下属性即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:descendantFocusability=<span class="string">&quot;blocksDescendants&quot;</span></span><br></pre></td></tr></table></figure><h4 id="7-SharePreference升级兼容问题"><a href="#7-SharePreference升级兼容问题" class="headerlink" title="7. SharePreference升级兼容问题"></a>7. SharePreference升级兼容问题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setSettingTextSize</span><span class="params">(<span class="type">int</span> time)</span> &#123;</span><br><span class="line">    defaultConfig.setValue(KEY_SETTING_TEXT_SIZE, time);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSettingTextSize</span><span class="params">(<span class="type">int</span> defaultValue)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> defaultConfig.getValue(KEY_SETTING_TEXT_SIZE, defaultValue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setSettingTextSizeNew</span><span class="params">(<span class="type">int</span> time)</span> &#123;</span><br><span class="line">    defaultConfig.setValue(KEY_SETTING_TEXT_SIZE_NEW, time);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSettingTextSizeNew</span><span class="params">(<span class="type">int</span> defaultValue)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">currentValue</span> <span class="operator">=</span> defaultConfig.getValue(KEY_SETTING_TEXT_SIZE_NEW, defaultValue);</span><br><span class="line">    <span class="comment">// 说明可能是第一次使用新版本，则需要兼容一下老版本</span></span><br><span class="line">    <span class="keyword">if</span> (currentValue == defaultValue) &#123;</span><br><span class="line">        <span class="comment">// milk之前存放的字体顺序是特大-0、大-1、中-2、小-3，milk之后改成小-0、中-1、大-2、特大-3</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">oldValue</span> <span class="operator">=</span> getSettingTextSize(-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (oldValue &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">            defaultConfig.delValue(KEY_SETTING_TEXT_SIZE);</span><br><span class="line">            setSettingTextSizeNew(<span class="number">3</span> - oldValue);</span><br><span class="line">            <span class="comment">// 此处改变一下映射关系</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">3</span> - oldValue ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> currentValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-IllegalStateException-Can-not-perform-this-action-after-onSaveInstanceState"><a href="#8-IllegalStateException-Can-not-perform-this-action-after-onSaveInstanceState" class="headerlink" title="8. IllegalStateException: Can not perform this action after onSaveInstanceState"></a>8. IllegalStateException: Can not perform this action after onSaveInstanceState</h4><ul><li>解决方法1</li></ul><p>重写activity onSaveInstanceState方法，并且不要调用父类方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onSaveInstanceState</span><span class="params">(Bundle outState)</span> &#123;</span><br><span class="line">    <span class="comment">//No call for super(). Bug on API Level &gt; 11.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>解决方法2</li></ul><p>重写activity onSaveInstanceState方法，并且在调用父类方法之前，随意传一个参数，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onSaveInstanceState</span><span class="params">(Bundle outState)</span> &#123;</span><br><span class="line">    outState.putString(<span class="string">&quot;WORKAROUND_FOR_BUG_19917_KEY&quot;</span>, <span class="string">&quot;WORKAROUND_FOR_BUG_19917_VALUE&quot;</span>);</span><br><span class="line">    <span class="built_in">super</span>.onSaveInstanceState(outState);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<br><a href="https://stackoverflow.com/questions/7469082/getting-exception-illegalstateexception-can-not-perform-this-action-after-onsa/10261438#10261438">https://stackoverflow.com/questions/7469082/getting-exception-illegalstateexception-can-not-perform-this-action-after-onsa/10261438#10261438</a></p><p><a href="http://www.androiddesignpatterns.com/2013/08/fragment-transaction-commit-state-loss.html">http://www.androiddesignpatterns.com/2013/08/fragment-transaction-commit-state-loss.html</a></p><h4 id="9-获取java-泛型T对应class"><a href="#9-获取java-泛型T对应class" class="headerlink" title="9. 获取java 泛型T对应class"></a>9. 获取java 泛型T对应class</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;T&gt; entityClass = (Class&lt;T&gt;) ((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>参考：<a href="http://blog.csdn.net/u013692310/article/details/53706283">http://blog.csdn.net/u013692310/article/details/53706283</a></p><h4 id="10-布局Preview失效"><a href="#10-布局Preview失效" class="headerlink" title="10. 布局Preview失效"></a>10. 布局Preview失效</h4><p>解决方案：删除工程根目录下build目录，然后重新build一次即可。</p><h4 id="11-动态设置layout-marginTop"><a href="#11-动态设置layout-marginTop" class="headerlink" title="11. 动态设置layout_marginTop"></a>11. 动态设置layout_marginTop</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ViewGroup.<span class="type">LayoutParams</span> <span class="variable">params</span> <span class="operator">=</span> mBackView.getLayoutParams();</span><br><span class="line">        <span class="keyword">if</span> (params <span class="keyword">instanceof</span> ViewGroup.MarginLayoutParams) &#123;</span><br><span class="line">            ((ViewGroup.MarginLayoutParams) params).setMargins(</span><br><span class="line">                    <span class="number">0</span>,</span><br><span class="line">                    SystemUtils.getStatusBarHeight(), <span class="comment">// marginTop</span></span><br><span class="line">                    <span class="number">0</span>,</span><br><span class="line">                    <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mActionBarView.setLayoutParams(params);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>View.post(Runnable)为何能拿到View的测量宽高</title>
      <link href="/2017/11/11/How-View-Post-Runnable-Execute/"/>
      <url>/2017/11/11/How-View-Post-Runnable-Execute/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在上一篇文章<a href="https://nancyyihao.github.io/2017/10/29/Android-Font-Selector/">自定义字体选择控件</a>中，我们使用了View.post(Runnable)的方法获取了View的测量宽高，为什么这样是可行的呢？</p><span id="more"></span><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>下面，就让我们从源码角度来分析一下吧。注：本文所用源码为Android 7.0 （API 24）</p><h4 id="View-post"><a href="#View-post" class="headerlink" title="View.post"></a>View.post</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Causes the Runnable to be added to the message queue.</span></span><br><span class="line"><span class="comment"> * The runnable will be run on the user interface thread.&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> action The Runnable that will be executed.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Returns true if the Runnable was successfully placed in to the</span></span><br><span class="line"><span class="comment"> *         message queue.  Returns false on failure, usually because the</span></span><br><span class="line"><span class="comment"> *         looper processing the message queue is exiting.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #postDelayed</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #removeCallbacks</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">post</span><span class="params">(Runnable action)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">AttachInfo</span> <span class="variable">attachInfo</span> <span class="operator">=</span> mAttachInfo;</span><br><span class="line">    <span class="keyword">if</span> (attachInfo != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> attachInfo.mHandler.post(action);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Postpone the runnable until we know on which thread it needs to run.</span></span><br><span class="line">    <span class="comment">// Assume that the runnable will be successfully placed after attach.</span></span><br><span class="line">    getRunQueue().post(action);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="View-getRunQueue"><a href="#View-getRunQueue" class="headerlink" title="View.getRunQueue()"></a>View.getRunQueue()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the queue of runnable for this view.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the queue of runnables for this view</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> HandlerActionQueue <span class="title function_">getRunQueue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mRunQueue == <span class="literal">null</span>) &#123;</span><br><span class="line">        mRunQueue = <span class="keyword">new</span> <span class="title class_">HandlerActionQueue</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mRunQueue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HandlerActionQueue"><a href="#HandlerActionQueue" class="headerlink" title="HandlerActionQueue"></a>HandlerActionQueue</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">post</span><span class="params">(Runnable action)</span> &#123;</span><br><span class="line">    postDelayed(action, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postDelayed</span><span class="params">(Runnable action, <span class="type">long</span> delayMillis)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">HandlerAction</span> <span class="variable">handlerAction</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HandlerAction</span>(action, delayMillis);</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mActions == <span class="literal">null</span>) &#123;</span><br><span class="line">            mActions = <span class="keyword">new</span> <span class="title class_">HandlerAction</span>[<span class="number">4</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        mActions = GrowingArrayUtils.append(mActions, mCount, handlerAction);</span><br><span class="line">        mCount++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，这些Runnable其实是没有被立即执行，而是保存到了HandlerActionQueue的mActions中，那它们什么时候被执行呢？答案是executeActions</p><h4 id="HandlerActionQueue-executeActions"><a href="#HandlerActionQueue-executeActions" class="headerlink" title="HandlerActionQueue.executeActions()"></a>HandlerActionQueue.executeActions()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">executeActions</span><span class="params">(Handler handler)</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> HandlerAction[] actions = mActions;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, count = mCount; i &lt; count; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">HandlerAction</span> <span class="variable">handlerAction</span> <span class="operator">=</span> actions[i];</span><br><span class="line">            handler.postDelayed(handlerAction.action, handlerAction.delay);</span><br><span class="line">        &#125;</span><br><span class="line">        mActions = <span class="literal">null</span>;</span><br><span class="line">        mCount = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是调用了Handler.postDelayed()，那什么时候调用executeActions(Handler handler)呢？我们回到View中，搜索executeActions，发现只有一处调用了该方法</p><h4 id="View-dispatchAttachedToWindow"><a href="#View-dispatchAttachedToWindow" class="headerlink" title="View.dispatchAttachedToWindow()"></a>View.dispatchAttachedToWindow()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> info the &#123;<span class="doctag">@link</span> android.view.View.AttachInfo&#125; to associated with</span></span><br><span class="line"><span class="comment"> *        this view</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">dispatchAttachedToWindow</span><span class="params">(AttachInfo info, <span class="type">int</span> visibility)</span> &#123;</span><br><span class="line">    mAttachInfo = info;</span><br><span class="line">    <span class="keyword">if</span> (mOverlay != <span class="literal">null</span>) &#123;</span><br><span class="line">        mOverlay.getOverlayView().dispatchAttachedToWindow(info, visibility);</span><br><span class="line">    &#125;</span><br><span class="line">    mWindowAttachCount++;</span><br><span class="line">    <span class="comment">// We will need to evaluate the drawable state at least once.</span></span><br><span class="line">    mPrivateFlags |= PFLAG_DRAWABLE_STATE_DIRTY;</span><br><span class="line">    <span class="keyword">if</span> (mFloatingTreeObserver != <span class="literal">null</span>) &#123;</span><br><span class="line">        info.mTreeObserver.merge(mFloatingTreeObserver);</span><br><span class="line">        mFloatingTreeObserver = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    registerPendingFrameMetricsObservers();</span><br><span class="line">    <span class="keyword">if</span> ((mPrivateFlags&amp;PFLAG_SCROLL_CONTAINER) != <span class="number">0</span>) &#123;</span><br><span class="line">        mAttachInfo.mScrollContainers.add(<span class="built_in">this</span>);</span><br><span class="line">        mPrivateFlags |= PFLAG_SCROLL_CONTAINER_ADDED;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Transfer all pending runnables.</span></span><br><span class="line">    <span class="keyword">if</span> (mRunQueue != <span class="literal">null</span>) &#123;</span><br><span class="line">        mRunQueue.executeActions(info.mHandler);</span><br><span class="line">        mRunQueue = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    performCollectViewAttributes(mAttachInfo, visibility);</span><br><span class="line">    onAttachedToWindow();</span><br><span class="line">    <span class="type">ListenerInfo</span> <span class="variable">li</span> <span class="operator">=</span> mListenerInfo;</span><br><span class="line">    <span class="keyword">final</span> CopyOnWriteArrayList&lt;OnAttachStateChangeListener&gt; listeners =</span><br><span class="line">            li != <span class="literal">null</span> ? li.mOnAttachStateChangeListeners : <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (listeners != <span class="literal">null</span> &amp;&amp; listeners.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> because of the use of CopyOnWriteArrayList, we *must* use an iterator to</span></span><br><span class="line">        <span class="comment">// perform the dispatching. The iterator is a safe guard against listeners that</span></span><br><span class="line">        <span class="comment">// could mutate the list by calling the various add/remove methods. This prevents</span></span><br><span class="line">        <span class="comment">// the array from being modified while we iterate it.</span></span><br><span class="line">        <span class="keyword">for</span> (OnAttachStateChangeListener listener : listeners) &#123;</span><br><span class="line">            listener.onViewAttachedToWindow(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">vis</span> <span class="operator">=</span> info.mWindowVisibility;</span><br><span class="line">    <span class="keyword">if</span> (vis != GONE) &#123;</span><br><span class="line">        onWindowVisibilityChanged(vis);</span><br><span class="line">        <span class="keyword">if</span> (isShown()) &#123;</span><br><span class="line">            <span class="comment">// Calling onVisibilityChanged directly here since the subtree will also</span></span><br><span class="line">            <span class="comment">// receive dispatchAttachedToWindow and this same call</span></span><br><span class="line">            onVisibilityAggregated(vis == VISIBLE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Send onVisibilityChanged directly instead of dispatchVisibilityChanged.</span></span><br><span class="line">    <span class="comment">// As all views in the subtree will already receive dispatchAttachedToWindow</span></span><br><span class="line">    <span class="comment">// traversing the subtree again here is not desired.</span></span><br><span class="line">    onVisibilityChanged(<span class="built_in">this</span>, visibility);</span><br><span class="line">    <span class="keyword">if</span> ((mPrivateFlags&amp;PFLAG_DRAWABLE_STATE_DIRTY) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// If nobody has evaluated the drawable state yet, then do it now.</span></span><br><span class="line">        refreshDrawableState();</span><br><span class="line">    &#125;</span><br><span class="line">    needGlobalAttributesUpdate(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，好像我们的线索断了，因为我们发现这里只是把哪些Runnable添加到了info.handler中，就没了。显然我们对这个结果是不满意的。接下来我们再看一下这个handler之前到底有么有添加其他的Runnable.</p><p>全局搜索了一下，发现mAttachInfo只有在View.dispatchAttachedToWindow()的时候赋非空值，而在View.dispatchDetachedFromWindow()的时候赋值为空。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A set of information given to a view when it is attached to its parent</span></span><br><span class="line"><span class="comment"> * window.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AttachInfo</span> &#123;</span><br><span class="line">    <span class="comment">// ... 省略部分代码</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A Handler supplied by a view&#x27;s &#123;<span class="doctag">@link</span> android.view.ViewRootImpl&#125;. This</span></span><br><span class="line"><span class="comment">     * handler can be used to pump events in the UI events queue.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> Handler mHandler;</span><br><span class="line">    <span class="comment">// ... 省略部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看了AttachInfo类中mHandler的定义，我们发现这个Handler就是主线程的Handler。到这里，显然还没有没有发现Handler之前到底有没有其他的Runnable。不甘心，于是又去Debug源码，发现是ViewRootImpl这个类里调用了View.dispatchAttachedToWindow()，而且只有一处，真是天助我也！</p><h4 id="ViewRootImpl-performTraversals"><a href="#ViewRootImpl-performTraversals" class="headerlink" title="ViewRootImpl.performTraversals()"></a>ViewRootImpl.performTraversals()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">performTraversals</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// cache mView since it is used so much below...</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">View</span> <span class="variable">host</span> <span class="operator">=</span> mView;</span><br><span class="line">        <span class="comment">// ... 省略部分源码</span></span><br><span class="line">        <span class="keyword">if</span> (mFirst) &#123;</span><br><span class="line">            <span class="comment">// ... 省略部分源码</span></span><br><span class="line">            <span class="comment">// We used to use the following condition to choose 32 bits drawing caches:</span></span><br><span class="line">            <span class="comment">// PixelFormat.hasAlpha(lp.format) || lp.format == PixelFormat.RGBX_8888</span></span><br><span class="line">            <span class="comment">// However, windows are now always 32 bits by default, so choose 32 bits</span></span><br><span class="line">            mAttachInfo.mUse32BitDrawingCache = <span class="literal">true</span>;</span><br><span class="line">            mAttachInfo.mHasWindowFocus = <span class="literal">false</span>;</span><br><span class="line">            mAttachInfo.mWindowVisibility = viewVisibility;</span><br><span class="line">            mAttachInfo.mRecomputeGlobalAttributes = <span class="literal">false</span>;</span><br><span class="line">            mLastConfiguration.setTo(host.getResources().getConfiguration());</span><br><span class="line">            mLastSystemUiVisibility = mAttachInfo.mSystemUiVisibility;</span><br><span class="line">            <span class="comment">// Set the layout direction if it has not been set before (inherit is the default)</span></span><br><span class="line">            <span class="keyword">if</span> (mViewLayoutDirectionInitial == View.LAYOUT_DIRECTION_INHERIT) &#123;</span><br><span class="line">                host.setLayoutDirection(mLastConfiguration.getLayoutDirection());</span><br><span class="line">            &#125;</span><br><span class="line">            host.dispatchAttachedToWindow(mAttachInfo, <span class="number">0</span>);</span><br><span class="line">            mAttachInfo.mTreeObserver.dispatchOnWindowAttachedChange(<span class="literal">true</span>);</span><br><span class="line">            dispatchApplyInsets(host);</span><br><span class="line">            <span class="comment">//Log.i(mTag, &quot;Screen on initialized: &quot; + attachInfo.mKeepScreenOn);</span></span><br><span class="line">            <span class="comment">// ... 省略部分源码</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ... 省略部分源码</span></span><br><span class="line">        peformMeasure();</span><br><span class="line">        <span class="comment">// ... 省略部分源码</span></span><br><span class="line">        peformLayout();</span><br><span class="line">        <span class="comment">// ... 省略部分源码</span></span><br><span class="line">        peformDraw();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// ... 省略部分源码</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>继续看mAttachInfo在哪里初始化，我们发现mAttachInfo在构造方法里被赋值了。</p><h4 id="ViewRootImpl-ViewRootImpl"><a href="#ViewRootImpl-ViewRootImpl" class="headerlink" title="ViewRootImpl.ViewRootImpl()"></a>ViewRootImpl.ViewRootImpl()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ViewRootImpl</span><span class="params">(Context context, Display display)</span> &#123;</span><br><span class="line">    <span class="comment">// ... 省略部分源码</span></span><br><span class="line">    mAttachInfo = <span class="keyword">new</span> <span class="title class_">View</span>.AttachInfo(mWindowSession, mWindow, display, <span class="built_in">this</span>, mHandler, <span class="built_in">this</span>);</span><br><span class="line">    <span class="comment">// ... 省略部分源码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续看Handler在哪里赋值，直接就在成员变量中赋值了。</p><p>final ViewRootHandler mHandler &#x3D; new ViewRootHandler();<br>到这里，我们该关心mHandler什么时候往消息队列中发消息了。还记得之前说的performTraversals吗？再继续看，哪个地方调用了该方法。</p><h4 id="ViewRootImpl-doTraversal"><a href="#ViewRootImpl-doTraversal" class="headerlink" title="ViewRootImpl.doTraversal()"></a>ViewRootImpl.doTraversal()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">doTraversal</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mTraversalScheduled) &#123;</span><br><span class="line">        mTraversalScheduled = <span class="literal">false</span>;</span><br><span class="line">        mHandler.getLooper().getQueue().removeSyncBarrier(mTraversalBarrier);</span><br><span class="line">        <span class="keyword">if</span> (mProfile) &#123;</span><br><span class="line">            Debug.startMethodTracing(<span class="string">&quot;ViewAncestor&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        performTraversals();</span><br><span class="line">        <span class="keyword">if</span> (mProfile) &#123;</span><br><span class="line">            Debug.stopMethodTracing();</span><br><span class="line">            mProfile = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>又是哪里调用了doTraversal()呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TraversalRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        doTraversal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> <span class="type">TraversalRunnable</span> <span class="variable">mTraversalRunnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TraversalRunnable</span>();</span><br></pre></td></tr></table></figure><p>到这里，你应该有点眉目了，是放在一个Runnable中。</p><p>调用这个Runnable，也即往主线程队列发消息的地方有两处</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">scheduleTraversals</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!mTraversalScheduled) &#123;</span><br><span class="line">        mTraversalScheduled = <span class="literal">true</span>;</span><br><span class="line">        mTraversalBarrier = mHandler.getLooper().getQueue().postSyncBarrier();</span><br><span class="line">        mChoreographer.postCallback(</span><br><span class="line">                Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (!mUnbufferedInputDispatch) &#123;</span><br><span class="line">            scheduleConsumeBatchedInput();</span><br><span class="line">        &#125;</span><br><span class="line">        notifyRendererOfFramePending();</span><br><span class="line">        pokeDrawLockIfNeeded();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">unscheduleTraversals</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mTraversalScheduled) &#123;</span><br><span class="line">        mTraversalScheduled = <span class="literal">false</span>;</span><br><span class="line">        mHandler.getLooper().getQueue().removeSyncBarrier(mTraversalBarrier);</span><br><span class="line">        mChoreographer.removeCallbacks(</span><br><span class="line">                Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里又不得不提一下Android的消息驱动模型了。我们知道，Android程序的入口其实是在ActivityThread里面的main方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">&quot;ActivityThreadMain&quot;</span>);</span><br><span class="line">    SamplingProfilerIntegration.start();</span><br><span class="line">    <span class="comment">// CloseGuard defaults to true and can be quite spammy.  We</span></span><br><span class="line">    <span class="comment">// disable it here, but selectively enable it later (via</span></span><br><span class="line">    <span class="comment">// StrictMode) on debug builds, but using DropBox, not logs.</span></span><br><span class="line">    CloseGuard.setEnabled(<span class="literal">false</span>);</span><br><span class="line">    Environment.initForCurrentUser();</span><br><span class="line">    <span class="comment">// Set the reporter for event logging in libcore</span></span><br><span class="line">    EventLogger.setReporter(<span class="keyword">new</span> <span class="title class_">EventLoggingReporter</span>());</span><br><span class="line">    <span class="comment">// Make sure TrustedCertificateStore looks in the right place for CA certificates</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">File</span> <span class="variable">configDir</span> <span class="operator">=</span> Environment.getUserConfigDirectory(UserHandle.myUserId());</span><br><span class="line">    TrustedCertificateStore.setDefaultUserDirectory(configDir);</span><br><span class="line">    Process.setArgV0(<span class="string">&quot;&lt;pre-initialized&gt;&quot;</span>);</span><br><span class="line">    Looper.prepareMainLooper();</span><br><span class="line">    <span class="type">ActivityThread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActivityThread</span>();</span><br><span class="line">    thread.attach(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (sMainThreadHandler == <span class="literal">null</span>) &#123;</span><br><span class="line">        sMainThreadHandler = thread.getHandler();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">        Looper.myLooper().setMessageLogging(<span class="keyword">new</span></span><br><span class="line">                <span class="title class_">LogPrinter</span>(Log.DEBUG, <span class="string">&quot;ActivityThread&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// End of event ActivityThreadMain.</span></span><br><span class="line">    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">    Looper.loop();</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Main thread loop unexpectedly exited&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里创建了主线程的Handler和Looper，并且最后执行了Looper.loop()进入循环。它一直在等待消息去驱动它继续执行下去。而像我们post的那个Runnable就是消息的一种了。</p><p>讲到这里，你大概明白了。因为Android应用程序是靠消息驱动的，当前运行的performTraversals()其实是通过一个mTraversalRunnable投递到主线程的消息队列中执行的，因为performTraversals()中又执行了peformMeasure()、peformLayout()、peformDraw()，因此执行完performTraversals()之后是可以拿到View的宽高的。而通过View.post(Runnable)投递过来的消息需要等到当前消息（即mTraversalRunnable，当中执行了performTraversals()）执行完成之后，才能接着执行。因此是能够拿到View的宽高的。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><p><a href="http://blog.csdn.net/scnuxisan225/article/details/49815269">post的Runnable何时被执行</a></p></li><li><p><a href="http://www.jianshu.com/p/dc35cb7f04ff">android View onMeasure&#x2F;onLayout&#x2F;onDraw的来龙去脉</a></p></li><li><p><a href="http://blog.csdn.net/farmer_cc/article/details/31454803">源码分析：onAttach, onMeasure, onLayout, onDraw 的顺序</a></p></li><li><p><a href="http://blog.csdn.net/luoshengyang/article/details/8661317/">Android视图SurfaceView的实现原理分析</a></p></li><li><p><a href="http://blog.csdn.net/scnuxisan225/article/details/50448996">Android进阶-如何写一个很屌的动画（1）—先实现一个简易的自定义动画框架</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android-Font-Selector</title>
      <link href="/2017/10/29/Android-Font-Selector/"/>
      <url>/2017/10/29/Android-Font-Selector/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前段时间设计师设计了一个字体选择页面，看了一下，其实还是比较简单，就当做练练手，巩固一下自定义View基础吧。</p><span id="more"></span><p><img src="/2017/10/29/Android-Font-Selector/p1.gif"></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>主要分三步走</p><ol><li>实现圆圈随手势滑动</li><li>文字绘制</li><li>文字和手势联动</li></ol><h3 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h3><ol><li>坐标居中点的计算</li><li>支持padding</li><li>手势联动</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mason.fontselector;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Bitmap;</span><br><span class="line"><span class="keyword">import</span> android.graphics.BitmapFactory;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Canvas;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Paint;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.ColorInt;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.text.TextPaint;</span><br><span class="line"><span class="keyword">import</span> android.text.TextUtils;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.MotionEvent;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by jasonkent27 on 2017/10/24.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FontSelector</span> <span class="keyword">extends</span> <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">DEBUG</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INVALID_POSITION</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_LINE_WIDTH</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_TEXT_SIZE</span> <span class="operator">=</span> <span class="number">13</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_GAP</span> <span class="operator">=</span> <span class="number">18</span>; <span class="comment">// gap between line and text in dp</span></span><br><span class="line">    <span class="keyword">private</span> OnPositionChangedListener mOnPositionChangedListener;</span><br><span class="line">    List&lt;String&gt; mDataList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Float&gt; mPoints = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@ColorInt</span> <span class="type">int</span> <span class="variable">mSelectedTextColor</span> <span class="operator">=</span> Color.rgb(<span class="number">0xdd</span>, <span class="number">0x0</span>, <span class="number">0x0</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@ColorInt</span> <span class="type">int</span> <span class="variable">mTextColor</span> <span class="operator">=</span> Color.rgb(<span class="number">0x66</span>, <span class="number">0x66</span>, <span class="number">0x66</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@ColorInt</span> <span class="type">int</span> <span class="variable">mLineColor</span> <span class="operator">=</span> Color.rgb(<span class="number">0xdd</span>, <span class="number">0x0</span>, <span class="number">0x0</span>);</span><br><span class="line">    <span class="keyword">private</span> Paint mLinePaint;</span><br><span class="line">    <span class="keyword">private</span> Paint mTextPaint;</span><br><span class="line">    <span class="keyword">private</span> Bitmap mCircleBitmap;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> mCircleHeight;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> mCircleWidth;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> mTextHeight;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> mDefaultHeight;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> mDefaultWidth;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> mCircleDrawX;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> mDefaultGap;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> mItemGap;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">mCurrentPosition</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">mLastPosition</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FontSelector</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(context, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FontSelector</span><span class="params">(Context context, AttributeSet attrs)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(context, attrs, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FontSelector</span><span class="params">(Context context, <span class="meta">@Nullable</span> AttributeSet attrs, <span class="type">int</span> defStyleAttr)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">        init(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        mLinePaint = <span class="keyword">new</span> <span class="title class_">Paint</span>(Paint.ANTI_ALIAS_FLAG);</span><br><span class="line">        mLinePaint.setStrokeWidth(dp2px(context, DEFAULT_LINE_WIDTH));</span><br><span class="line">        mLinePaint.setStyle(Paint.Style.FILL_AND_STROKE);</span><br><span class="line">        mLinePaint.setColor(mLineColor);</span><br><span class="line">        mTextPaint = <span class="keyword">new</span> <span class="title class_">TextPaint</span>(Paint.ANTI_ALIAS_FLAG);</span><br><span class="line">        mTextPaint.setTextSize(dp2px(context, DEFAULT_TEXT_SIZE));</span><br><span class="line">        mTextPaint.setTextAlign(Paint.Align.LEFT);</span><br><span class="line">        mTextPaint.setStyle(Paint.Style.FILL);</span><br><span class="line">        mTextPaint.setColor(mTextColor);</span><br><span class="line">        mCircleBitmap = BitmapFactory.decodeResource(getResources(),</span><br><span class="line">                R.mipmap.font_selector_icon);</span><br><span class="line">        mCircleHeight = mCircleBitmap.getHeight();</span><br><span class="line">        mCircleWidth = mCircleBitmap.getWidth();</span><br><span class="line">        mCircleDrawX = getPaddingLeft();</span><br><span class="line">        Paint.<span class="type">FontMetrics</span> <span class="variable">fm</span> <span class="operator">=</span> mTextPaint.getFontMetrics();</span><br><span class="line">        mTextHeight = (<span class="type">int</span>) Math.abs(fm.bottom - fm.top);</span><br><span class="line">        mDefaultGap = dp2px(context, DEFAULT_GAP);</span><br><span class="line">        <span class="keyword">final</span> String[] array = getResources().getStringArray(R.array.text_list);</span><br><span class="line">        mDataList.addAll(Arrays.asList(array));</span><br><span class="line">        setDefaultPosition(mCurrentPosition);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOnPositionChangedListener</span><span class="params">(OnPositionChangedListener listener)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mOnPositionChangedListener = listener;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDefaultPosition</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> position)</span> &#123;</span><br><span class="line">        post(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                mCurrentPosition = position;</span><br><span class="line">                adjustPosition(mCurrentPosition);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onMeasure</span><span class="params">(<span class="type">int</span> widthMeasureSpec, <span class="type">int</span> heightMeasureSpec)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">        <span class="type">int</span> <span class="variable">widthSpecMode</span> <span class="operator">=</span> MeasureSpec.getMode(widthMeasureSpec);</span><br><span class="line">        <span class="type">int</span> <span class="variable">widthSpecSize</span> <span class="operator">=</span> MeasureSpec.getSize(widthMeasureSpec);</span><br><span class="line">        <span class="type">int</span> <span class="variable">heightSpecMode</span> <span class="operator">=</span> MeasureSpec.getMode(heightMeasureSpec);</span><br><span class="line">        <span class="type">int</span> <span class="variable">heightSpecSize</span> <span class="operator">=</span> MeasureSpec.getSize(heightMeasureSpec);</span><br><span class="line">        mDefaultHeight = mCircleHeight + getPaddingTop() + getPaddingBottom()</span><br><span class="line">                + mTextHeight + (<span class="type">int</span>) mDefaultGap;</span><br><span class="line">        mDefaultWidth = mCircleWidth + getPaddingLeft() + getPaddingRight();</span><br><span class="line">        <span class="keyword">if</span> (widthSpecMode == MeasureSpec.AT_MOST &amp;&amp; heightSpecMode == MeasureSpec.AT_MOST) &#123;</span><br><span class="line">            setMeasuredDimension(mDefaultWidth, mDefaultHeight);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (widthSpecMode == MeasureSpec.AT_MOST) &#123;</span><br><span class="line">            setMeasuredDimension(mDefaultWidth, heightSpecSize);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (heightSpecMode == MeasureSpec.AT_MOST) &#123;</span><br><span class="line">            setMeasuredDimension(widthSpecSize, mDefaultHeight);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDraw</span><span class="params">(Canvas canvas)</span> &#123;</span><br><span class="line">        <span class="comment">// step #1 draw text</span></span><br><span class="line">        drawTopText(canvas);</span><br><span class="line">        <span class="type">float</span> <span class="variable">lineY</span> <span class="operator">=</span> getDrawTop() + mTextHeight + mDefaultGap + mCircleHeight / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// step #2 draw line</span></span><br><span class="line">        canvas.drawLine(mPoints.get(<span class="number">0</span>), lineY, mPoints.get(mPoints.size() - <span class="number">1</span>), lineY, mLinePaint);</span><br><span class="line">        <span class="comment">// step #3 finally, we draw the circle</span></span><br><span class="line">        canvas.drawBitmap(mCircleBitmap, mCircleDrawX, lineY - mCircleHeight / <span class="number">2</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">float</span> <span class="title function_">getDrawLeft</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getPaddingLeft() + mCircleWidth / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">float</span> <span class="title function_">getDrawTop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getPaddingTop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * must call before &#123;<span class="doctag">@link</span> FontSelector#onDraw(Canvas)&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">adjustPosition</span><span class="params">(<span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (position &gt;= mDataList.size() || position &lt; <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        resetPointsLocation();</span><br><span class="line">        mCircleDrawX = mPoints.get(position) - mCircleWidth / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">resetPointsLocation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> mDataList.size();</span><br><span class="line">        mPoints.clear();</span><br><span class="line">        <span class="keyword">if</span> (len &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">float</span> <span class="variable">textX</span> <span class="operator">=</span> getDrawLeft();</span><br><span class="line">            <span class="type">float</span> <span class="variable">availableWidth</span> <span class="operator">=</span> getMeasuredWidth() - getPaddingLeft()</span><br><span class="line">                    - getPaddingRight() - mCircleWidth;</span><br><span class="line">            <span class="keyword">for</span> (String text : mDataList) &#123;</span><br><span class="line">                availableWidth -= mTextPaint.measureText(text);</span><br><span class="line">            &#125;</span><br><span class="line">            mItemGap = availableWidth / (len - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> mDataList.get(i);</span><br><span class="line">                <span class="keyword">if</span> (!TextUtils.isEmpty(text)) &#123;</span><br><span class="line">                    <span class="type">float</span> <span class="variable">textWidth</span> <span class="operator">=</span> mTextPaint.measureText(text);</span><br><span class="line">                    mPoints.add(textX + textWidth / <span class="number">2</span>);</span><br><span class="line">                    textX += textWidth + mItemGap;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Data length must be greater than one!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Log.e(<span class="string">&quot;FontSelector&quot;</span>, <span class="string">&quot;Data length must be greater than one!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">drawTopText</span><span class="params">(Canvas canvas)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> mDataList.size();</span><br><span class="line">        <span class="keyword">if</span> (len &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            resetPointsLocation();</span><br><span class="line">            <span class="type">float</span> <span class="variable">textY</span> <span class="operator">=</span> getDrawTop() + mTextHeight;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> mDataList.get(i);</span><br><span class="line">                <span class="keyword">if</span> (!TextUtils.isEmpty(text)) &#123;</span><br><span class="line">                    <span class="type">float</span> <span class="variable">textWidth</span> <span class="operator">=</span> mTextPaint.measureText(text);</span><br><span class="line">                    mTextPaint.setColor(i == mCurrentPosition ?</span><br><span class="line">                            mSelectedTextColor : mTextColor);</span><br><span class="line">                    canvas.drawText(text, mPoints.get(i) - textWidth / <span class="number">2</span>, textY, mTextPaint);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Data length must be greater than one!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Log.e(<span class="string">&quot;FontSelector&quot;</span>, <span class="string">&quot;Data length must be greater than one!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onTouchEvent</span><span class="params">(MotionEvent event)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                mCircleDrawX = event.getX();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> getNearestPoint(mCircleDrawX);</span><br><span class="line">                <span class="keyword">if</span> (position != INVALID_POSITION) &#123;</span><br><span class="line">                    mCurrentPosition = position;</span><br><span class="line">                    <span class="keyword">if</span> (mOnPositionChangedListener != <span class="literal">null</span> &amp;&amp; mCurrentPosition != mLastPosition) &#123;</span><br><span class="line">                        mOnPositionChangedListener.onPositionChanged(mCurrentPosition);</span><br><span class="line">                    &#125;</span><br><span class="line">                    mLastPosition = mCurrentPosition;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">float</span> <span class="variable">right</span> <span class="operator">=</span> mPoints.get(mPoints.size() - <span class="number">1</span>) - mCircleWidth / <span class="number">2</span>;</span><br><span class="line">                <span class="type">float</span> <span class="variable">left</span> <span class="operator">=</span> mPoints.get(<span class="number">0</span>) - mCircleWidth / <span class="number">2</span>;</span><br><span class="line">                <span class="type">float</span> <span class="variable">moveX</span> <span class="operator">=</span> event.getX();</span><br><span class="line">                <span class="comment">// make sure the circle between [left , right]</span></span><br><span class="line">                mCircleDrawX = Float.compare(moveX, left) &lt; <span class="number">0</span> ? left :</span><br><span class="line">                        Float.compare(moveX, right) &gt;= <span class="number">0</span> ? right : moveX;</span><br><span class="line">                invalidate();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                <span class="type">float</span> <span class="variable">upX</span> <span class="operator">=</span> event.getX();</span><br><span class="line">                <span class="type">int</span> <span class="variable">targetPosition</span> <span class="operator">=</span> getNearestPoint(upX);</span><br><span class="line">                <span class="keyword">if</span> (targetPosition != INVALID_POSITION) &#123;</span><br><span class="line">                    mCircleDrawX = mPoints.get(targetPosition) - mCircleWidth / <span class="number">2</span>;</span><br><span class="line">                    mCurrentPosition = targetPosition;</span><br><span class="line">                    <span class="keyword">if</span> (mOnPositionChangedListener != <span class="literal">null</span> &amp;&amp; mCurrentPosition != mLastPosition) &#123;</span><br><span class="line">                        mOnPositionChangedListener.onPositionChanged(mCurrentPosition);</span><br><span class="line">                    &#125;</span><br><span class="line">                    mLastPosition = mCurrentPosition;</span><br><span class="line">                &#125;</span><br><span class="line">                invalidate();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getNearestPoint</span><span class="params">(<span class="type">float</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mPoints.size(); i++) &#123;</span><br><span class="line">            <span class="type">Float</span> <span class="variable">point</span> <span class="operator">=</span> mPoints.get(i);</span><br><span class="line">            <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> mDataList.get(i);</span><br><span class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(text) &amp;&amp;</span><br><span class="line">                    Math.abs(point - x) &lt; (mTextPaint.measureText(text) + mItemGap) / <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INVALID_POSITION;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OnPositionChangedListener</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">onPositionChanged</span><span class="params">(<span class="type">int</span> position)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">dp2px</span><span class="params">(Context context, <span class="type">float</span> dipValue)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">float</span> <span class="variable">scale</span> <span class="operator">=</span> context.getResources().getDisplayMetrics().density;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) (dipValue * scale + <span class="number">0.5f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="待优化"><a href="#待优化" class="headerlink" title="待优化"></a>待优化</h3><p>把常用属性如字体大小、字体颜色、选中颜色、线条颜色等抽离，做成自定义属性，可以直接在xml文件配置</p><h3 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h3><p><a href="https://github.com/nancyyihao/FontSelector/tree/master">FontSelector</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java单例模式</title>
      <link href="/2017/10/29/Java-Singleton-Pattern/"/>
      <url>/2017/10/29/Java-Singleton-Pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>大道至简，单例模式说简单也简单，说复杂也复杂。今天我们就来说说Java的单例模式。</p><span id="more"></span><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><h4 id="最简单的单例"><a href="#最简单的单例" class="headerlink" title="最简单的单例"></a>最简单的单例</h4><p>如果你是个Java程序员，我想你闭着眼睛也能写出如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这可以说是最简单的单例了，类的实例化由JVM来完成，因此可以保证线程安全。因此访问效率很高。缺点是不能懒加载，如果不调用getInstance()方法，就会白白占用内存。懒汉式单例模式也因此而提出。</p><h4 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h4><p>明白了恶汉式的弊端，你很快就能写出懒汉式代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">  <span class="comment">// 懒汉式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然懒汉式单例可以实现懒加载，但是这样也是有代价的，为了保证实例化时线程安全，加入了同步synchronized，增加了访问开销。每次访问getInstance()方法时都要进行同步，这其实是很浪费的。我们想要的，仅仅是第一次实例化的时候保证同步就可以了，后面的访问getInstance()方法的时候没必要再加锁了。双重检查方式就是为了解决这个问题的。</p><h4 id="双重检查"><a href="#双重检查" class="headerlink" title="双重检查"></a>双重检查</h4><p>知道了原因，你不假思索就写出了如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> field1, field2 ...</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">// This is incorrect: don&#x27;t do it at home, kids!</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这样真的是没有任何问题吗？然而并不是，原因是instance &#x3D; new Singleton();这句话并不是原子操作，这个实例化过程其实可以分成三步：1、 开辟一块内存；2、生成Singleton实例并调用Singleton构造方法；3、将生成的实例地址指向instance。JVM存在指令重排优化，不能保证1–&gt;2—&gt;3的执行顺序，调用链可能是1–&gt;3—&gt;2，3完成的时候，有些field并没有完成初始化，此时若有其他线程进入，因为instance，所以就有可能访问到非法的field，如下图所示：</p><p><img src="/2017/10/29/Java-Singleton-Pattern/p1.png"></p><p>那如何解决这个问题呢？答案是加volatile关键字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> field1, field2 ...</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">// This is incorrect: don&#x27;t do it at home, kids!</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么这样是可行的呢？其实是Java 5之后对volatile关键字做了修改，它能够禁止编译器进行指令重排，简单地说就是加了volatile关键字之后，编译器能够保证1–&gt;2–&gt;3的执行顺序，因此也就没有上述问题了。更多关于volatile关键字，点击：<a href="http://www.cnblogs.com/dolphin0520/p/3920373.html">http://www.cnblogs.com/dolphin0520/p/3920373.html</a></p><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><p>懒汉式和双重检查方式都要判断实例是否为空，显得不够优雅，下面使用静态内部类的方式则不需要手动写代码判断，线程安由JVM来保证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;     </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;    </span><br><span class="line">    <span class="keyword">return</span> SingletonHolder.INSTANCE;    </span><br><span class="line">    &#125;    </span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> &#123;    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();    </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式可以说是兼具了懒汉式和恶汉式的优点，避免了懒汉式和恶汉式的缺点。</p><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Singleton</span> &#123;     </span><br><span class="line">    INSTANCE(<span class="string">&quot;field2_vaules&quot;</span>)</span><br><span class="line">    <span class="keyword">private</span> String field2;</span><br><span class="line">  Singleton(String f) &#123;</span><br><span class="line">       field2 = f;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;    </span><br><span class="line">    <span class="keyword">return</span> INSTANCE;    </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举的方式是Java大牛Josh Bloch （《Effective Java》作者）推荐使用的，由JVM来保证线程安全，并且能防止反序列化重新生成对象。实在是很妙！</p><h4 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h4><p>有人对这几种单例进行了测试，并得出了如下结果（出处：<a href="http://blog.csdn.net/qq_22706515/article/details/74202814%EF%BC%89%EF%BC%9A">http://blog.csdn.net/qq_22706515/article/details/74202814）：</a></p><p><img src="/2017/10/29/Java-Singleton-Pattern/p2.png"></p><p>当然，这结果在不同机子可能不同，但是可以作为一个参考。</p><p>测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">APP</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">threadCount</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">CountLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountLock</span>(threadCount);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; threadCount; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10000000</span>; j++) &#123;</span><br><span class="line">                    <span class="comment">//通过更换此处，来测试不同单例实现方式在多线程环境下的性能</span></span><br><span class="line">                        <span class="type">SingleDemo5</span> <span class="variable">demo</span> <span class="operator">=</span> SingleDemo5.INSTANCE;</span><br><span class="line">                    &#125;</span><br><span class="line">                    lock.finish();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//等待所有线程执行完</span></span><br><span class="line">        lock.waitForWrok();</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;总共耗时&quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountLock</span> &#123;</span><br><span class="line">    <span class="comment">//线程的总数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CountLock</span><span class="params">(<span class="type">int</span> count)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当一个线程完成任务以后，调用一次这个方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">finish</span><span class="params">()</span> &#123;</span><br><span class="line">        count--;</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">            notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要等待其他线程执行完的线程，调用此方法。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">waitForWrok</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>推荐使用静态内部类和枚举来实现单例。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.javamex.com/tutorials/double_checked_locking.shtml">Double-checked Locking (DCL) and how to fix it</a></p><p><a href="http://blog.csdn.net/qq_22706515/article/details/74202814">单例的五种实现方式及其性能分析</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈 Java-voliatile-and-synchronized</title>
      <link href="/2017/10/29/Talk-about-Java-Volatile-and-Synchronized/"/>
      <url>/2017/10/29/Talk-about-Java-Volatile-and-Synchronized/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我们知道，在多线程环境下使用竞争资源，为了保证程序正确性，进入临界区之前需要加锁保护。Java中的volatile和synchonized两个关键字作为同步手段常常令人疑惑。什么时候该用volatile，什么时候该用synchonized，一直不太明确，今天就来捋捋吧。</p><span id="more"></span><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>关于两者的区别，老外有篇文章列了个表，此处引用一下（出处：<a href="https://www.javamex.com/tutorials/synchronization_volatile.shtml%EF%BC%89%EF%BC%9A">https://www.javamex.com/tutorials/synchronization_volatile.shtml）：</a></p><p><img src="/2017/10/29/Talk-about-Java-Volatile-and-Synchronized/p1.png"></p><h3 id="volatile用法"><a href="#volatile用法" class="headerlink" title="volatile用法"></a>volatile用法</h3><h4 id="用法1"><a href="#用法1" class="headerlink" title="用法1"></a>用法1</h4><p>在多线程环境下改变标志位，这也是volatile关键字最典型的用法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StoppableTask</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">  <span class="comment">//If the variable were not declared volatile (and without other synchronization), then it would be legal for the thread running the loop to cache the value of the variable at the start of the loop and never read it again.</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">boolean</span> pleaseStop;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (!pleaseStop) &#123;</span><br><span class="line">      <span class="comment">// do some stuff...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tellMeToStop</span><span class="params">()</span> &#123;</span><br><span class="line">    pleaseStop = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用法2"><a href="#用法2" class="headerlink" title="用法2"></a>用法2</h3><p>在单例模式中使用。至于为何要加volatile关键字，可以看此处：<a href="https://www.javamex.com/tutorials/double_checked_locking_fixing.shtml#%E3%80%82">https://www.javamex.com/tutorials/double_checked_locking_fixing.shtml#。</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> field1, field2 ...</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="synchronized用法"><a href="#synchronized用法" class="headerlink" title="synchronized用法"></a>synchronized用法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">Object</span> <span class="variable">count</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">work1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">work2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work4</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 效果同work2</span></span><br><span class="line">    <span class="keyword">synchronized</span> (Test.class) &#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work5</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work6</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// 不推荐使用</span></span><br><span class="line">    <span class="keyword">synchronized</span> (count) &#123; </span><br><span class="line">        <span class="comment">//因为锁对象在锁代码块中有可能发生改变，会导致锁的对象不是同一个如 count = new Object();</span></span><br><span class="line">        <span class="comment">//所以应该把锁对象声明成final</span></span><br><span class="line">        <span class="comment">// 当然，如果可以确定count对象只是修改对象属性值，不会修改对象引用，也是可以这么做的。</span></span><br><span class="line">        </span><br><span class="line">      <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>下方是几种比较常见加锁的方案。自己使用锁（work1()）可能会比synchronized快一丢丢，但是Java中synchronized关键字大部分情况下已满足需求，不到万不得已，没必要自己写锁保护。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="comment">//说明：零长度的byte数组对象创建起来将比任何对象都经济――查看编译后的字节码：生成零长度的byte[]对象只需3条操作码，而Object lock = new Object()则需要7行操作码。</span></span><br><span class="line">  <span class="keyword">private</span> <span class="type">byte</span>[] obj = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work1</span><span class="params">()</span> &#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">        <span class="comment">// update count value</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 适用场景：http://blog.csdn.net/xiao__gui/article/details/8188833</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work4</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (Test.class) &#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><p><a href="https://www.javamex.com/tutorials/double_checked_locking_fixing.shtml">Double-checked Locking (DCL)</a></p></li><li><p><a href="https://www.javamex.com/tutorials/double_checked_locking_fixing.shtml">Double-checked Locking (DCL) and how to fix it (ctd)</a></p></li><li><p><a href="https://www.javamex.com/tutorials/synchronization_volatile.shtml">The volatile keyword in Java</a></p></li><li><p><a href="https://www.javamex.com/tutorials/synchronization_concurrency_synchronized1.shtml#">The synchronized keyword in Java</a></p></li><li><p><a href="http://www.cnblogs.com/dolphin0520/p/3920373.html">Java并发编程：volatile关键字解析</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Voliatile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于ListPopupWindow的问题分析</title>
      <link href="/2017/10/13/Android-ListPopupWindow/"/>
      <url>/2017/10/13/Android-ListPopupWindow/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近做需求，使用了ListPopupWindow，但是发现在ListView列表中，显示PopupWindow时，有可能会往上滚动（见下图），觉得有点奇怪，就花了点时间去找原因。</p><span id="more"></span><p><img src="/2017/10/13/Android-ListPopupWindow/p1.gif"></p><h3 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h3><p>从哪里入手呢？当然是一步一步来，从ListPopupWindow.show()源码开始看起</p><h4 id="ListPopupWindow-show"><a href="#ListPopupWindow-show" class="headerlink" title="ListPopupWindow.show()"></a>ListPopupWindow.show()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Show the popup list. If the list is already showing, this method</span></span><br><span class="line"><span class="comment">     * will recalculate the popup&#x27;s size and position.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> buildDropDown();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">noInputMethod</span> <span class="operator">=</span> isInputMethodNotNeeded();</span><br><span class="line">        PopupWindowCompat.setWindowLayoutType(mPopup, mDropDownWindowLayoutType);</span><br><span class="line">        <span class="keyword">if</span> (mPopup.isShowing()) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> widthSpec;</span><br><span class="line">            <span class="keyword">if</span> (mDropDownWidth == ViewGroup.LayoutParams.MATCH_PARENT) &#123;</span><br><span class="line">                <span class="comment">// The call to PopupWindow&#x27;s update method below can accept -1 for any</span></span><br><span class="line">                <span class="comment">// value you do not want to update.</span></span><br><span class="line">                widthSpec = -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mDropDownWidth == ViewGroup.LayoutParams.WRAP_CONTENT) &#123;</span><br><span class="line">                widthSpec = getAnchorView().getWidth();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                widthSpec = mDropDownWidth;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> heightSpec;</span><br><span class="line">            <span class="keyword">if</span> (mDropDownHeight == ViewGroup.LayoutParams.MATCH_PARENT) &#123;</span><br><span class="line">                <span class="comment">// The call to PopupWindow&#x27;s update method below can accept -1 for any</span></span><br><span class="line">                <span class="comment">// value you do not want to update.</span></span><br><span class="line">                heightSpec = noInputMethod ? height : ViewGroup.LayoutParams.MATCH_PARENT;</span><br><span class="line">                <span class="keyword">if</span> (noInputMethod) &#123;</span><br><span class="line">                    mPopup.setWidth(mDropDownWidth == ViewGroup.LayoutParams.MATCH_PARENT ?</span><br><span class="line">                            ViewGroup.LayoutParams.MATCH_PARENT : <span class="number">0</span>);</span><br><span class="line">                    mPopup.setHeight(<span class="number">0</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    mPopup.setWidth(mDropDownWidth == ViewGroup.LayoutParams.MATCH_PARENT ?</span><br><span class="line">                                    ViewGroup.LayoutParams.MATCH_PARENT : <span class="number">0</span>);</span><br><span class="line">                    mPopup.setHeight(ViewGroup.LayoutParams.MATCH_PARENT);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mDropDownHeight == ViewGroup.LayoutParams.WRAP_CONTENT) &#123;</span><br><span class="line">                heightSpec = height;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                heightSpec = mDropDownHeight;</span><br><span class="line">            &#125;</span><br><span class="line">            mPopup.setOutsideTouchable(!mForceIgnoreOutsideTouch &amp;&amp; !mDropDownAlwaysVisible);</span><br><span class="line">            mPopup.update(getAnchorView(), mDropDownHorizontalOffset,</span><br><span class="line">                            mDropDownVerticalOffset, (widthSpec &lt; <span class="number">0</span>)? -<span class="number">1</span> : widthSpec,</span><br><span class="line">                            (heightSpec &lt; <span class="number">0</span>)? -<span class="number">1</span> : heightSpec);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> widthSpec;</span><br><span class="line">            <span class="keyword">if</span> (mDropDownWidth == ViewGroup.LayoutParams.MATCH_PARENT) &#123;</span><br><span class="line">                widthSpec = ViewGroup.LayoutParams.MATCH_PARENT;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (mDropDownWidth == ViewGroup.LayoutParams.WRAP_CONTENT) &#123;</span><br><span class="line">                    widthSpec = getAnchorView().getWidth();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    widthSpec = mDropDownWidth;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> heightSpec;</span><br><span class="line">            <span class="keyword">if</span> (mDropDownHeight == ViewGroup.LayoutParams.MATCH_PARENT) &#123;</span><br><span class="line">                heightSpec = ViewGroup.LayoutParams.MATCH_PARENT;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (mDropDownHeight == ViewGroup.LayoutParams.WRAP_CONTENT) &#123;</span><br><span class="line">                    heightSpec = height;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    heightSpec = mDropDownHeight;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            mPopup.setWidth(widthSpec);</span><br><span class="line">            mPopup.setHeight(heightSpec);</span><br><span class="line">            setPopupClipToScreenEnabled(<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">// use outside touchable to dismiss drop down when touching outside of it, so</span></span><br><span class="line">            <span class="comment">// only set this if the dropdown is not always visible</span></span><br><span class="line">            mPopup.setOutsideTouchable(!mForceIgnoreOutsideTouch &amp;&amp; !mDropDownAlwaysVisible);</span><br><span class="line">            mPopup.setTouchInterceptor(mTouchInterceptor);</span><br><span class="line">            PopupWindowCompat.showAsDropDown(mPopup, getAnchorView(), mDropDownHorizontalOffset,</span><br><span class="line">                    mDropDownVerticalOffset, mDropDownGravity);</span><br><span class="line">            mDropDownList.setSelection(ListView.INVALID_POSITION);</span><br><span class="line">            <span class="keyword">if</span> (!mModal || mDropDownList.isInTouchMode()) &#123;</span><br><span class="line">                clearListSelection();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!mModal) &#123;</span><br><span class="line">                mHandler.post(mHideSelector);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="PopupWindowCompat-showAsDropDown"><a href="#PopupWindowCompat-showAsDropDown" class="headerlink" title="PopupWindowCompat.showAsDropDown()"></a>PopupWindowCompat.showAsDropDown()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showAsDropDown</span><span class="params">(PopupWindow popup, View anchor, <span class="type">int</span> xoff, <span class="type">int</span> yoff,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> gravity)</span> &#123;</span><br><span class="line">    IMPL.showAsDropDown(popup, anchor, xoff, yoff, gravity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="BasePopupWindowImpl-showAsDropDown"><a href="#BasePopupWindowImpl-showAsDropDown" class="headerlink" title="BasePopupWindowImpl.showAsDropDown()"></a>BasePopupWindowImpl.showAsDropDown()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showAsDropDown</span><span class="params">(PopupWindow popup, View anchor, <span class="type">int</span> xoff, <span class="type">int</span> yoff,</span></span><br><span class="line"><span class="params">                <span class="type">int</span> gravity)</span> &#123;</span><br><span class="line">            popup.showAsDropDown(anchor, xoff, yoff);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="PopupWindow-showAsDropDown"><a href="#PopupWindow-showAsDropDown" class="headerlink" title="PopupWindow.showAsDropDown()"></a>PopupWindow.showAsDropDown()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showAsDropDown</span><span class="params">(View anchor, <span class="type">int</span> xoff, <span class="type">int</span> yoff)</span> &#123;</span><br><span class="line">    showAsDropDown(anchor, xoff, yoff, DEFAULT_ANCHORED_GRAVITY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="PopupWindow-showAsDropDown-1"><a href="#PopupWindow-showAsDropDown-1" class="headerlink" title="PopupWindow.showAsDropDown()"></a>PopupWindow.showAsDropDown()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showAsDropDown</span><span class="params">(View anchor, <span class="type">int</span> xoff, <span class="type">int</span> yoff, <span class="type">int</span> gravity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isShowing() || mContentView == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    TransitionManager.endTransitions(mDecorView);</span><br><span class="line">    attachToAnchor(anchor, xoff, yoff, gravity);</span><br><span class="line">    mIsShowing = <span class="literal">true</span>;</span><br><span class="line">    mIsDropdown = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">final</span> WindowManager.<span class="type">LayoutParams</span> <span class="variable">p</span> <span class="operator">=</span> createPopupLayoutParams(anchor.getWindowToken());</span><br><span class="line">    preparePopup(p);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">aboveAnchor</span> <span class="operator">=</span> findDropDownPosition(anchor, p, xoff, yoff,</span><br><span class="line">            p.width, p.height, gravity);</span><br><span class="line">    updateAboveAnchor(aboveAnchor);</span><br><span class="line">    p.accessibilityIdOfAnchor = (anchor != <span class="literal">null</span>) ? anchor.getAccessibilityViewId() : -<span class="number">1</span>;</span><br><span class="line">    invokePopup(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="PopupWindow-findDropDownPosition"><a href="#PopupWindow-findDropDownPosition" class="headerlink" title="PopupWindow.findDropDownPosition()"></a>PopupWindow.findDropDownPosition()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">findDropDownPosition</span><span class="params">(View anchor, WindowManager.LayoutParams outParams,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> xOffset, <span class="type">int</span> yOffset, <span class="type">int</span> width, <span class="type">int</span> height, <span class="type">int</span> gravity)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">anchorHeight</span> <span class="operator">=</span> anchor.getHeight();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">anchorWidth</span> <span class="operator">=</span> anchor.getWidth();</span><br><span class="line">    <span class="keyword">if</span> (mOverlapAnchor) &#123;</span><br><span class="line">        yOffset -= anchorHeight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Initially, align to the bottom-left corner of the anchor plus offsets.</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span>[] drawingLocation = mTmpDrawingLocation;</span><br><span class="line">    anchor.getLocationInWindow(drawingLocation);</span><br><span class="line">    outParams.x = drawingLocation[<span class="number">0</span>] + xOffset;</span><br><span class="line">    outParams.y = drawingLocation[<span class="number">1</span>] + anchorHeight + yOffset;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Rect</span> <span class="variable">displayFrame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rect</span>();</span><br><span class="line">    anchor.getWindowVisibleDisplayFrame(displayFrame);</span><br><span class="line">    <span class="keyword">if</span> (width == MATCH_PARENT) &#123;</span><br><span class="line">        width = displayFrame.right - displayFrame.left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (height == MATCH_PARENT) &#123;</span><br><span class="line">        height = displayFrame.bottom - displayFrame.top;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Let the window manager know to align the top to y.</span></span><br><span class="line">    outParams.gravity = Gravity.LEFT | Gravity.TOP;</span><br><span class="line">    outParams.width = width;</span><br><span class="line">    outParams.height = height;</span><br><span class="line">    <span class="comment">// If we need to adjust for gravity RIGHT, align to the bottom-right</span></span><br><span class="line">    <span class="comment">// corner of the anchor (still accounting for offsets).</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">hgrav</span> <span class="operator">=</span> Gravity.getAbsoluteGravity(gravity, anchor.getLayoutDirection())</span><br><span class="line">            &amp; Gravity.HORIZONTAL_GRAVITY_MASK;</span><br><span class="line">    <span class="keyword">if</span> (hgrav == Gravity.RIGHT) &#123;</span><br><span class="line">        outParams.x -= width - anchorWidth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span>[] screenLocation = mTmpScreenLocation;</span><br><span class="line">    anchor.getLocationOnScreen(screenLocation);</span><br><span class="line">    <span class="comment">// First, attempt to fit the popup vertically without resizing.</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">fitsVertical</span> <span class="operator">=</span> tryFitVertical(outParams, yOffset, height,</span><br><span class="line">            anchorHeight, drawingLocation[<span class="number">1</span>], screenLocation[<span class="number">1</span>], displayFrame.top,</span><br><span class="line">            displayFrame.bottom, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// Next, attempt to fit the popup horizontally without resizing.</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">fitsHorizontal</span> <span class="operator">=</span> tryFitHorizontal(outParams, xOffset, width,</span><br><span class="line">            anchorWidth, drawingLocation[<span class="number">0</span>], screenLocation[<span class="number">0</span>], displayFrame.left,</span><br><span class="line">            displayFrame.right, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// If the popup still doesn&#x27;t fit, attempt to scroll the parent.</span></span><br><span class="line">    <span class="keyword">if</span> (!fitsVertical || !fitsHorizontal) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">scrollX</span> <span class="operator">=</span> anchor.getScrollX();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">scrollY</span> <span class="operator">=</span> anchor.getScrollY();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Rect</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rect</span>(scrollX, scrollY, scrollX + width + xOffset,</span><br><span class="line">                scrollY + height + anchorHeight + yOffset);</span><br><span class="line">        <span class="keyword">if</span> (mAllowScrollingAnchorParent &amp;&amp; anchor.requestRectangleOnScreen(r, <span class="literal">true</span>)) &#123;</span><br><span class="line">            <span class="comment">// Reset for the new anchor position.</span></span><br><span class="line">            anchor.getLocationInWindow(drawingLocation);</span><br><span class="line">            outParams.x = drawingLocation[<span class="number">0</span>] + xOffset;</span><br><span class="line">            outParams.y = drawingLocation[<span class="number">1</span>] + anchorHeight + yOffset;</span><br><span class="line">            <span class="comment">// Preserve the gravity adjustment.</span></span><br><span class="line">            <span class="keyword">if</span> (hgrav == Gravity.RIGHT) &#123;</span><br><span class="line">                outParams.x -= width - anchorWidth;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Try to fit the popup again and allowing resizing.</span></span><br><span class="line">        tryFitVertical(outParams, yOffset, height, anchorHeight, drawingLocation[<span class="number">1</span>],</span><br><span class="line">                screenLocation[<span class="number">1</span>], displayFrame.top, displayFrame.bottom, mClipToScreen);</span><br><span class="line">        tryFitHorizontal(outParams, xOffset, width, anchorWidth, drawingLocation[<span class="number">0</span>],</span><br><span class="line">                screenLocation[<span class="number">0</span>], displayFrame.left, displayFrame.right, mClipToScreen);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Return whether the popup&#x27;s top edge is above the anchor&#x27;s top edge.</span></span><br><span class="line">    <span class="keyword">return</span> outParams.y &lt; drawingLocation[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="anchor-View-requestRectangleOnScreen-r-true"><a href="#anchor-View-requestRectangleOnScreen-r-true" class="headerlink" title="anchor(View).requestRectangleOnScreen(r, true)"></a>anchor(View).requestRectangleOnScreen(r, true)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Request that a rectangle of this view be visible on the screen,</span></span><br><span class="line"><span class="comment">     * scrolling if necessary just enough.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;A View should call this if it maintains some notion of which part</span></span><br><span class="line"><span class="comment">     * of its content is interesting.  For example, a text editing view</span></span><br><span class="line"><span class="comment">     * should call this when its cursor moves.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The Rectangle passed into this method should be in the View&#x27;s content coordinate space.</span></span><br><span class="line"><span class="comment">     * It should not be affected by which part of the View is currently visible or its scroll</span></span><br><span class="line"><span class="comment">     * position.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;When &lt;code&gt;immediate&lt;/code&gt; is set to true, scrolling will not be</span></span><br><span class="line"><span class="comment">     * animated.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rectangle The rectangle in the View&#x27;s content coordinate space</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> immediate True to forbid animated scrolling, false otherwise</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Whether any parent scrolled.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">requestRectangleOnScreen</span><span class="params">(Rect rectangle, <span class="type">boolean</span> immediate)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mParent == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">View</span> <span class="variable">child</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="type">RectF</span> <span class="variable">position</span> <span class="operator">=</span> (mAttachInfo != <span class="literal">null</span>) ? mAttachInfo.mTmpTransformRect : <span class="keyword">new</span> <span class="title class_">RectF</span>();</span><br><span class="line">        position.set(rectangle);</span><br><span class="line">        <span class="type">ViewParent</span> <span class="variable">parent</span> <span class="operator">=</span> mParent;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">scrolled</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">            rectangle.set((<span class="type">int</span>) position.left, (<span class="type">int</span>) position.top,</span><br><span class="line">                    (<span class="type">int</span>) position.right, (<span class="type">int</span>) position.bottom);</span><br><span class="line">            scrolled |= parent.requestChildRectangleOnScreen(child, rectangle, immediate);</span><br><span class="line">            <span class="keyword">if</span> (!(parent <span class="keyword">instanceof</span> View)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// move it from child&#x27;s content coordinate space to parent&#x27;s content coordinate space</span></span><br><span class="line">            position.offset(child.mLeft - child.getScrollX(), child.mTop -child.getScrollY());</span><br><span class="line">            child = (View) parent;</span><br><span class="line">            parent = child.getParent();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> scrolled;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="parent-ViewParent-requestChildRectangleOnScreen-child-rectangle-immediate"><a href="#parent-ViewParent-requestChildRectangleOnScreen-child-rectangle-immediate" class="headerlink" title="parent(ViewParent).requestChildRectangleOnScreen(child, rectangle, immediate)"></a>parent(ViewParent).requestChildRectangleOnScreen(child, rectangle, immediate)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Called when a child of this group wants a particular rectangle to be</span></span><br><span class="line"><span class="comment"> * positioned onto the screen.  &#123;<span class="doctag">@link</span> ViewGroup&#125;s overriding this can trust</span></span><br><span class="line"><span class="comment"> * that:</span></span><br><span class="line"><span class="comment"> * &lt;ul&gt;</span></span><br><span class="line"><span class="comment"> *   &lt;li&gt;child will be a direct child of this group&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> *   &lt;li&gt;rectangle will be in the child&#x27;s content coordinates&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&#123;<span class="doctag">@link</span> ViewGroup&#125;s overriding this should uphold the contract:&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;ul&gt;</span></span><br><span class="line"><span class="comment"> *   &lt;li&gt;nothing will change if the rectangle is already visible&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> *   &lt;li&gt;the view port will be scrolled only just enough to make the</span></span><br><span class="line"><span class="comment"> *       rectangle visible&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;ul&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> child The direct child making the request.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rectangle The rectangle in the child&#x27;s coordinates the child</span></span><br><span class="line"><span class="comment"> *        wishes to be on the screen.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> immediate True to forbid animated or delayed scrolling,</span></span><br><span class="line"><span class="comment"> *        false otherwise</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Whether the group scrolled to handle the operation</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">requestChildRectangleOnScreen</span><span class="params">(View child, Rect rectangle,</span></span><br><span class="line"><span class="params">        <span class="type">boolean</span> immediate)</span>;</span><br></pre></td></tr></table></figure><p><strong>the view port will be scrolled only just enough to make the rectangle visible</strong><br>到这里我们可以确定确实ListPopupWindow在显示过程中有可能使父控件滑动，具体滑动多少距离，我们继续往下看<br><img src="/2017/10/13/Android-ListPopupWindow/p2.png"></p><p>因为我的代码中使用了ListView，这里就接着往下看ListView.requestChildRectangleOnScreen()方法</p><h4 id="ListView-requestChildRectangleOnScreen"><a href="#ListView-requestChildRectangleOnScreen" class="headerlink" title="ListView.requestChildRectangleOnScreen()"></a>ListView.requestChildRectangleOnScreen()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">requestChildRectangleOnScreen</span><span class="params">(View child, Rect rect, <span class="type">boolean</span> immediate)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rectTopWithinChild</span> <span class="operator">=</span> rect.top;</span><br><span class="line">        <span class="comment">// offset so rect is in coordinates of the this view</span></span><br><span class="line">        rect.offset(child.getLeft(), child.getTop());</span><br><span class="line">        rect.offset(-child.getScrollX(), -child.getScrollY());</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> getHeight();</span><br><span class="line">        <span class="type">int</span> <span class="variable">listUnfadedTop</span> <span class="operator">=</span> getScrollY();</span><br><span class="line">        <span class="type">int</span> <span class="variable">listUnfadedBottom</span> <span class="operator">=</span> listUnfadedTop + height;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">fadingEdge</span> <span class="operator">=</span> getVerticalFadingEdgeLength();</span><br><span class="line">        <span class="keyword">if</span> (showingTopFadingEdge()) &#123;</span><br><span class="line">            <span class="comment">// leave room for top fading edge as long as rect isn&#x27;t at very top</span></span><br><span class="line">            <span class="keyword">if</span> ((mSelectedPosition &gt; <span class="number">0</span>) || (rectTopWithinChild &gt; fadingEdge)) &#123;</span><br><span class="line">                listUnfadedTop += fadingEdge;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">childCount</span> <span class="operator">=</span> getChildCount();</span><br><span class="line">        <span class="type">int</span> <span class="variable">bottomOfBottomChild</span> <span class="operator">=</span> getChildAt(childCount - <span class="number">1</span>).getBottom();</span><br><span class="line">        <span class="keyword">if</span> (showingBottomFadingEdge()) &#123;</span><br><span class="line">            <span class="comment">// leave room for bottom fading edge as long as rect isn&#x27;t at very bottom</span></span><br><span class="line">            <span class="keyword">if</span> ((mSelectedPosition &lt; mItemCount - <span class="number">1</span>)</span><br><span class="line">                    || (rect.bottom &lt; (bottomOfBottomChild - fadingEdge))) &#123;</span><br><span class="line">                listUnfadedBottom -= fadingEdge;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">scrollYDelta</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (rect.bottom &gt; listUnfadedBottom &amp;&amp; rect.top &gt; listUnfadedTop) &#123;</span><br><span class="line">            <span class="comment">// need to MOVE DOWN to get it in view: move down just enough so</span></span><br><span class="line">            <span class="comment">// that the entire rectangle is in view (or at least the first</span></span><br><span class="line">            <span class="comment">// screen size chunk).</span></span><br><span class="line">            <span class="keyword">if</span> (rect.height() &gt; height) &#123;</span><br><span class="line">                <span class="comment">// just enough to get screen size chunk on</span></span><br><span class="line">                scrollYDelta += (rect.top - listUnfadedTop);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// get entire rect at bottom of screen</span></span><br><span class="line">                scrollYDelta += (rect.bottom - listUnfadedBottom);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// make sure we aren&#x27;t scrolling beyond the end of our children</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">distanceToBottom</span> <span class="operator">=</span> bottomOfBottomChild - listUnfadedBottom;</span><br><span class="line">            scrollYDelta = Math.min(scrollYDelta, distanceToBottom);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rect.top &lt; listUnfadedTop &amp;&amp; rect.bottom &lt; listUnfadedBottom) &#123;</span><br><span class="line">            <span class="comment">// need to MOVE UP to get it in view: move up just enough so that</span></span><br><span class="line">            <span class="comment">// entire rectangle is in view (or at least the first screen</span></span><br><span class="line">            <span class="comment">// size chunk of it).</span></span><br><span class="line">            <span class="keyword">if</span> (rect.height() &gt; height) &#123;</span><br><span class="line">                <span class="comment">// screen size chunk</span></span><br><span class="line">                scrollYDelta -= (listUnfadedBottom - rect.bottom);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// entire rect at top</span></span><br><span class="line">                scrollYDelta -= (listUnfadedTop - rect.top);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// make sure we aren&#x27;t scrolling any further than the top our children</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> getChildAt(<span class="number">0</span>).getTop();</span><br><span class="line">            <span class="type">int</span> <span class="variable">deltaToTop</span> <span class="operator">=</span> top - listUnfadedTop;</span><br><span class="line">            scrollYDelta = Math.max(scrollYDelta, deltaToTop);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">scroll</span> <span class="operator">=</span> scrollYDelta != <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (scroll) &#123;</span><br><span class="line">            scrollListItemsBy(-scrollYDelta);</span><br><span class="line">            positionSelector(INVALID_POSITION, child);</span><br><span class="line">            mSelectedTop = child.getTop();</span><br><span class="line">            invalidate();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> scroll;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>到这里我们可以发现，滑动的距离就是scrollYDelta.如果ListPopupWindow整个View高度较低，就滑动刚好可以使得ListPopupWindow整个View显示出来的距离。</p><h4 id="ListView-scrollListItemsBy-scrollYDelta"><a href="#ListView-scrollListItemsBy-scrollYDelta" class="headerlink" title="ListView.scrollListItemsBy(-scrollYDelta);"></a>ListView.scrollListItemsBy(-scrollYDelta);</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Scroll the children by amount, adding a view at the end and removing</span></span><br><span class="line"><span class="comment">    * views that fall off as necessary.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> amount The amount (positive or negative) to scroll.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">scrollListItemsBy</span><span class="params">(<span class="type">int</span> amount)</span> &#123;</span><br><span class="line">       offsetChildrenTopAndBottom(amount);</span><br><span class="line">       <span class="keyword">final</span> <span class="type">int</span> <span class="variable">listBottom</span> <span class="operator">=</span> getHeight() - mListPadding.bottom;</span><br><span class="line">       <span class="keyword">final</span> <span class="type">int</span> <span class="variable">listTop</span> <span class="operator">=</span> mListPadding.top;</span><br><span class="line">       <span class="keyword">final</span> AbsListView.<span class="type">RecycleBin</span> <span class="variable">recycleBin</span> <span class="operator">=</span> mRecycler;</span><br><span class="line">       <span class="keyword">if</span> (amount &lt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="comment">// shifted items up</span></span><br><span class="line">           <span class="comment">// may need to pan views into the bottom space</span></span><br><span class="line">           <span class="type">int</span> <span class="variable">numChildren</span> <span class="operator">=</span> getChildCount();</span><br><span class="line">           <span class="type">View</span> <span class="variable">last</span> <span class="operator">=</span> getChildAt(numChildren - <span class="number">1</span>);</span><br><span class="line">           <span class="keyword">while</span> (last.getBottom() &lt; listBottom) &#123;</span><br><span class="line">               <span class="keyword">final</span> <span class="type">int</span> <span class="variable">lastVisiblePosition</span> <span class="operator">=</span> mFirstPosition + numChildren - <span class="number">1</span>;</span><br><span class="line">               <span class="keyword">if</span> (lastVisiblePosition &lt; mItemCount - <span class="number">1</span>) &#123;</span><br><span class="line">                   last = addViewBelow(last, lastVisiblePosition);</span><br><span class="line">                   numChildren++;</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// may have brought in the last child of the list that is skinnier</span></span><br><span class="line">           <span class="comment">// than the fading edge, thereby leaving space at the end.  need</span></span><br><span class="line">           <span class="comment">// to shift back</span></span><br><span class="line">           <span class="keyword">if</span> (last.getBottom() &lt; listBottom) &#123;</span><br><span class="line">               offsetChildrenTopAndBottom(listBottom - last.getBottom());</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// top views may be panned off screen</span></span><br><span class="line">           <span class="type">View</span> <span class="variable">first</span> <span class="operator">=</span> getChildAt(<span class="number">0</span>);</span><br><span class="line">           <span class="keyword">while</span> (first.getBottom() &lt; listTop) &#123;</span><br><span class="line">               AbsListView.<span class="type">LayoutParams</span> <span class="variable">layoutParams</span> <span class="operator">=</span> (LayoutParams) first.getLayoutParams();</span><br><span class="line">               <span class="keyword">if</span> (recycleBin.shouldRecycleViewType(layoutParams.viewType)) &#123;</span><br><span class="line">                   recycleBin.addScrapView(first, mFirstPosition);</span><br><span class="line">               &#125;</span><br><span class="line">               detachViewFromParent(first);</span><br><span class="line">               first = getChildAt(<span class="number">0</span>);</span><br><span class="line">               mFirstPosition++;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">// shifted items down</span></span><br><span class="line">           <span class="type">View</span> <span class="variable">first</span> <span class="operator">=</span> getChildAt(<span class="number">0</span>);</span><br><span class="line">           <span class="comment">// may need to pan views into top</span></span><br><span class="line">           <span class="keyword">while</span> ((first.getTop() &gt; listTop) &amp;&amp; (mFirstPosition &gt; <span class="number">0</span>)) &#123;</span><br><span class="line">               first = addViewAbove(first, mFirstPosition);</span><br><span class="line">               mFirstPosition--;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// may have brought the very first child of the list in too far and</span></span><br><span class="line">           <span class="comment">// need to shift it back</span></span><br><span class="line">           <span class="keyword">if</span> (first.getTop() &gt; listTop) &#123;</span><br><span class="line">               offsetChildrenTopAndBottom(listTop - first.getTop());</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="type">int</span> <span class="variable">lastIndex</span> <span class="operator">=</span> getChildCount() - <span class="number">1</span>;</span><br><span class="line">           <span class="type">View</span> <span class="variable">last</span> <span class="operator">=</span> getChildAt(lastIndex);</span><br><span class="line">           <span class="comment">// bottom view may be panned off screen</span></span><br><span class="line">           <span class="keyword">while</span> (last.getTop() &gt; listBottom) &#123;</span><br><span class="line">               AbsListView.<span class="type">LayoutParams</span> <span class="variable">layoutParams</span> <span class="operator">=</span> (LayoutParams) last.getLayoutParams();</span><br><span class="line">               <span class="keyword">if</span> (recycleBin.shouldRecycleViewType(layoutParams.viewType)) &#123;</span><br><span class="line">                   recycleBin.addScrapView(last, mFirstPosition+lastIndex);</span><br><span class="line">               &#125;</span><br><span class="line">               detachViewFromParent(last);</span><br><span class="line">               last = getChildAt(--lastIndex);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       recycleBin.fullyDetachScrapViews();</span><br><span class="line">       removeUnusedFixedViews(mHeaderViewInfos);</span><br><span class="line">       removeUnusedFixedViews(mFooterViewInfos);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>至此，已经找到问题根源：<br>如果ListPopupWindow当前内容无法显示，为了保证ListPopupWindow显示内容尽可能可见，ListPopupWindow会自动挪动anchorView所在的可滑动ViewGroup的位置。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>知道问题根源所在，解决方案也不在话下了。自己写个方法判断，根据anchorView位置显示即可。这里以屏幕一半作为分割线，源码如下，当然具体应该如何调整，看需求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showMenuView</span><span class="params">(Context context, View anchorView)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (context == <span class="literal">null</span> || anchorView == <span class="literal">null</span> ) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mPopupWindow = <span class="keyword">new</span> <span class="title class_">ListPopupWindow</span>(context);</span><br><span class="line">    mPopupWindow.setModal(<span class="literal">true</span>);</span><br><span class="line">    mPopupWindow.setInputMethodMode(PopupWindow.INPUT_METHOD_NOT_NEEDED);</span><br><span class="line">    mPopupWindow.setContentWidth(measureContentWidth(context));</span><br><span class="line">    mPopupWindow.setAnchorView(anchorView);</span><br><span class="line">    mPopupWindow.setDropDownGravity(Gravity.END);</span><br><span class="line">    mPopupWindow.setHorizontalOffset(getHorizontalOffset(context, anchorView));</span><br><span class="line">    mPopupWindow.setVerticalOffset(getVerticalOffset(context, anchorView));</span><br><span class="line">    mPopupWindow.show();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">getHorizontalOffset</span><span class="params">(Context context, View anchorView)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">getVerticalOffset</span><span class="params">(Context context, View anchorView)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">popupWindowHeight</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (isExceedHalf(anchorView)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mAdapter <span class="keyword">instanceof</span> CommonMenuAdapter) &#123;</span><br><span class="line">            popupWindowHeight = mAdapter.getCount() * ((CommonMenuAdapter) mAdapter)</span><br><span class="line">                    .getItemHeight();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -anchorView.getHeight() - popupWindowHeight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isExceedHalf</span><span class="params">(View anchorView)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] locations = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">    anchorView.getLocationOnScreen(locations);</span><br><span class="line">    <span class="comment">// 控件在屏幕的y坐标</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> locations[<span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 系统屏幕高度一半</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">halfHeight</span> <span class="operator">=</span> SystemUtils.getScreenHeight() / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> y &gt; halfHeight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><p><img src="/2017/10/13/Android-ListPopupWindow/p3.png"></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> ListPopupWindow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android沉浸式状态栏趟坑之旅</title>
      <link href="/2017/10/13/Something-You-Should-Know-About-Android-Immersive-Statusbar/"/>
      <url>/2017/10/13/Something-You-Should-Know-About-Android-Immersive-Statusbar/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Android从4.4开始提出透明状态栏的概念，在5.0之后才有比较像样的沉浸式状态栏，虽然不能修改状态栏图标颜色，至少体验变得更好了，但是对于开发者来说，Android因为版本分裂，导致没法统一，对于开发者来说的确是一件比较头疼的事，下面让我们来看看其中的坑吧。</p><span id="more"></span><h3 id="沉浸式状态栏实现"><a href="#沉浸式状态栏实现" class="headerlink" title="沉浸式状态栏实现"></a>沉浸式状态栏实现</h3><p>5.0及以上手机想要做到沉浸式状态栏还是比较容易的（仅仅针对官方Android来说），代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">    <span class="type">Window</span> <span class="variable">window</span> <span class="operator">=</span> getActivity().getWindow();</span><br><span class="line">    window.getDecorView()</span><br><span class="line">            .setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);</span><br><span class="line">    window.setStatusBarColor(Color.TRANSPARENT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2017/10/13/Something-You-Should-Know-About-Android-Immersive-Statusbar/p1.png"><br>此时，你会发现另外一个问题（上图）：华为有些机型(EMUI 3.1，Android 5.0.2 ，PLK-AL10)就算是Android 5.0以上，也没法做到状态栏透明，会遮挡部分内容，这样的方案是绝对不会允许的。只能针对华为手机进行适配，判断如果是华为手机，则是用如下方案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">    <span class="type">Window</span> <span class="variable">window</span> <span class="operator">=</span> getActivity().getWindow();</span><br><span class="line">    window.getDecorView()</span><br><span class="line">            .setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);</span><br><span class="line">    window.setStatusBarColor(Color.TRANSPARENT);</span><br><span class="line">    <span class="keyword">if</span> (RomUtils.isEmui()) &#123;</span><br><span class="line">        <span class="comment">//适配华为手机</span></span><br><span class="line">        window.addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中RomUtils，由网友<a href="http://www.jianshu.com/u/f8310d55f6b5">@夏末m</a>提供，其代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RomUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> <span class="string">&quot;RomUtils&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ROM_MIUI</span> <span class="operator">=</span> <span class="string">&quot;MIUI&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ROM_EMUI</span> <span class="operator">=</span> <span class="string">&quot;EMUI&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ROM_FLYME</span> <span class="operator">=</span> <span class="string">&quot;FLYME&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ROM_OPPO</span> <span class="operator">=</span> <span class="string">&quot;OPPO&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ROM_SMARTISAN</span> <span class="operator">=</span> <span class="string">&quot;SMARTISAN&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ROM_VIVO</span> <span class="operator">=</span> <span class="string">&quot;VIVO&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ROM_QIKU</span> <span class="operator">=</span> <span class="string">&quot;QIKU&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_VERSION_MIUI</span> <span class="operator">=</span> <span class="string">&quot;ro.miui.ui.version.name&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_VERSION_EMUI</span> <span class="operator">=</span> <span class="string">&quot;ro.build.version.emui&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_VERSION_OPPO</span> <span class="operator">=</span> <span class="string">&quot;ro.build.version.opporom&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_VERSION_SMARTISAN</span> <span class="operator">=</span> <span class="string">&quot;ro.smartisan.version&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_VERSION_VIVO</span> <span class="operator">=</span> <span class="string">&quot;ro.vivo.os.version&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String sName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String sVersion;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isEmui</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> check(ROM_EMUI);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isMiui</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> check(ROM_MIUI);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isVivo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> check(ROM_VIVO);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isOppo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> check(ROM_OPPO);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isFlyme</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> check(ROM_FLYME);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">is360</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> check(ROM_QIKU) || check(<span class="string">&quot;360&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isSmartisan</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> check(ROM_SMARTISAN);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sName == <span class="literal">null</span>) &#123;</span><br><span class="line">            check(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getVersion</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sVersion == <span class="literal">null</span>) &#123;</span><br><span class="line">            check(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sVersion;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(String rom)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sName != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> sName.equals(rom);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!TextUtils.isEmpty(sVersion = getProp(KEY_VERSION_MIUI))) &#123;</span><br><span class="line">            sName = ROM_MIUI;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!TextUtils.isEmpty(sVersion = getProp(KEY_VERSION_EMUI))) &#123;</span><br><span class="line">            sName = ROM_EMUI;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!TextUtils.isEmpty(sVersion = getProp(KEY_VERSION_OPPO))) &#123;</span><br><span class="line">            sName = ROM_OPPO;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!TextUtils.isEmpty(sVersion = getProp(KEY_VERSION_VIVO))) &#123;</span><br><span class="line">            sName = ROM_VIVO;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!TextUtils.isEmpty(sVersion = getProp(KEY_VERSION_SMARTISAN))) &#123;</span><br><span class="line">            sName = ROM_SMARTISAN;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sVersion = Build.DISPLAY;</span><br><span class="line">            <span class="keyword">if</span> (sVersion.toUpperCase().contains(ROM_FLYME)) &#123;</span><br><span class="line">                sName = ROM_FLYME;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sVersion = Build.UNKNOWN;</span><br><span class="line">                sName = Build.MANUFACTURER.toUpperCase();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sName.equals(rom);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getProp</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">input</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Process</span> <span class="variable">p</span> <span class="operator">=</span> Runtime.getRuntime().exec(<span class="string">&quot;getprop &quot;</span> + name);</span><br><span class="line">            input = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(p.getInputStream()), <span class="number">1024</span>);</span><br><span class="line">            line = input.readLine();</span><br><span class="line">            input.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            NTLog.e(TAG, <span class="string">&quot;Unable to read prop &quot;</span> + name + ex);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (input != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    input.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> line;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2017/10/13/Something-You-Should-Know-About-Android-Immersive-Statusbar/p2.gif"><br>解决了状态栏的问题，又发现了另外一个问题（上图）：跟帖输入框在软键盘弹起时，被挡住了。没法办，继续寻找解决方案。在网上搜索了一番，发现这个是Android存在已久的bug，有人已经提供了解决方案，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AndroidBug5497Workaround</span> &#123;</span><br><span class="line">    <span class="comment">// For more information, see https://code.google.com/p/android/issues/detail?id=5497</span></span><br><span class="line">    <span class="comment">// To use this class, simply invoke assistActivity() on an Activity that already has its content view set.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">assistActivity</span> <span class="params">(Activity activity)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">AndroidBug5497Workaround</span>(activity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> View mChildOfContent;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> usableHeightPrevious;</span><br><span class="line">    <span class="keyword">private</span> FrameLayout.LayoutParams frameLayoutParams;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">AndroidBug5497Workaround</span><span class="params">(Activity activity)</span> &#123;</span><br><span class="line">        <span class="type">FrameLayout</span> <span class="variable">content</span> <span class="operator">=</span> (FrameLayout) activity.findViewById(android.R.id.content);</span><br><span class="line">        mChildOfContent = content.getChildAt(<span class="number">0</span>);</span><br><span class="line">        mChildOfContent.getViewTreeObserver().addOnGlobalLayoutListener(<span class="keyword">new</span> <span class="title class_">ViewTreeObserver</span>.OnGlobalLayoutListener() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onGlobalLayout</span><span class="params">()</span> &#123;</span><br><span class="line">                possiblyResizeChildOfContent();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        frameLayoutParams = (FrameLayout.LayoutParams) mChildOfContent.getLayoutParams();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">possiblyResizeChildOfContent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">usableHeightNow</span> <span class="operator">=</span> computeUsableHeight();</span><br><span class="line">        <span class="keyword">if</span> (usableHeightNow != usableHeightPrevious) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">usableHeightSansKeyboard</span> <span class="operator">=</span> mChildOfContent.getRootView().getHeight();</span><br><span class="line">            <span class="type">int</span> <span class="variable">heightDifference</span> <span class="operator">=</span> usableHeightSansKeyboard - usableHeightNow;</span><br><span class="line">            <span class="keyword">if</span> (heightDifference &gt; (usableHeightSansKeyboard/<span class="number">4</span>)) &#123;</span><br><span class="line">                <span class="comment">// keyboard probably just became visible</span></span><br><span class="line">                frameLayoutParams.height = usableHeightSansKeyboard - heightDifference;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// keyboard probably just became hidden</span></span><br><span class="line">                frameLayoutParams.height = usableHeightSansKeyboard;</span><br><span class="line">            &#125;</span><br><span class="line">            mChildOfContent.requestLayout();</span><br><span class="line">            usableHeightPrevious = usableHeightNow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">computeUsableHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Rect</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rect</span>();</span><br><span class="line">        mChildOfContent.getWindowVisibleDisplayFrame(r);</span><br><span class="line">        <span class="keyword">return</span> (r.bottom - r.top);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一开始看到这个方案的时候，纵观代码，没有其他大问题，而且因为根布局的UI和Activity的生命周期是一致的，因此不用mChildOfContent.getViewTreeObserver().removeOnGlobalLayoutListener()也不会发生内存泄露，因此可以先尝试一下。</p><p>其原理也十分简单，就是监听整个布局，如果布局发生了变化了超过屏幕1&#x2F;4高度，则可认为是键盘弹起了，此时，重新设置根布局LayoutParams即可。更详细信息可以参考：<a href="http://www.cnblogs.com/ldq2016/p/6223294.html">Android爬坑之旅：软键盘挡住输入框问题的终极解决方案</a>。</p><p><img src="/2017/10/13/Something-You-Should-Know-About-Android-Immersive-Statusbar/p3.png"></p><p>然而，并不管用！你会发现，输入框被虚拟键盘挡住了（上图）！不过，这个问题也不难解决，我们只需要把第一次根布局的高度记录下来，键盘收起的时候，把跟布局高度还原即可。最终代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by mason on 2017/10/11.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 解决输入框被软键盘隐藏的问题 <span class="doctag">@See</span> http://www.jianshu.com/p/a95a1b84da11 &lt;/br&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AndroidBug5497Workaround</span> &#123;</span><br><span class="line">    <span class="comment">// For more information, see https://code.google.com/p/android/issues/detail?id=5497</span></span><br><span class="line">    <span class="comment">// To use this class, simply invoke assistActivity() on an Activity that already has its</span></span><br><span class="line">    <span class="comment">// content view set.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">assistActivity</span><span class="params">(Activity activity)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">AndroidBug5497Workaround</span>(activity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> View mChildOfContent;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> mUsableHeightPrevious;</span><br><span class="line">    <span class="keyword">private</span> FrameLayout.LayoutParams mFrameLayoutParams;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> mContentHeight;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">mIsContentHeightMeasured</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">AndroidBug5497Workaround</span><span class="params">(Activity activity)</span> &#123;</span><br><span class="line">        <span class="type">FrameLayout</span> <span class="variable">content</span> <span class="operator">=</span> (FrameLayout) activity.findViewById(android.R.id.content);</span><br><span class="line">        mChildOfContent = content.getChildAt(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//界面变动监听</span></span><br><span class="line">        mChildOfContent.getViewTreeObserver().addOnGlobalLayoutListener(<span class="keyword">new</span> <span class="title class_">ViewTreeObserver</span></span><br><span class="line">                .OnGlobalLayoutListener() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onGlobalLayout</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> ( !mIsContentHeightMeasured ) &#123;</span><br><span class="line">                    <span class="comment">//记住第一次根布局高度，兼容华为等机型</span></span><br><span class="line">                    mContentHeight = mChildOfContent.getHeight();</span><br><span class="line">                    mIsContentHeightMeasured = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                possiblyResizeChildOfContent();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        mFrameLayoutParams = (FrameLayout.LayoutParams)</span><br><span class="line">                mChildOfContent.getLayoutParams();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调整根布局高度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">possiblyResizeChildOfContent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">usableHeightNow</span> <span class="operator">=</span> computeUsableHeight();</span><br><span class="line">        <span class="comment">//当前可见高度和上一次可见高度不一致 布局变动</span></span><br><span class="line">        <span class="keyword">if</span> (usableHeightNow != mUsableHeightPrevious) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">usableHeightSansKeyboard</span> <span class="operator">=</span> mChildOfContent.getRootView().getHeight();</span><br><span class="line">            <span class="type">int</span> <span class="variable">heightDifference</span> <span class="operator">=</span> usableHeightSansKeyboard - usableHeightNow;</span><br><span class="line">            <span class="keyword">if</span> (heightDifference &gt; (usableHeightSansKeyboard / <span class="number">4</span>)) &#123;</span><br><span class="line">                <span class="comment">// keyboard probably just became visible</span></span><br><span class="line">                <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</span><br><span class="line">                    mFrameLayoutParams.height = usableHeightSansKeyboard - heightDifference +</span><br><span class="line">                            SystemUtils.getStatusBarHeight();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    mFrameLayoutParams.height = usableHeightSansKeyboard - heightDifference;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mFrameLayoutParams.height = mContentHeight;</span><br><span class="line">            &#125;</span><br><span class="line">            mChildOfContent.requestLayout();</span><br><span class="line">            mUsableHeightPrevious = usableHeightNow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算mChildOfContent可见高度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">computeUsableHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Rect</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rect</span>();</span><br><span class="line">        mChildOfContent.getWindowVisibleDisplayFrame(r);</span><br><span class="line">        <span class="keyword">return</span> (r.bottom - r.top);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2017/10/13/Something-You-Should-Know-About-Android-Immersive-Statusbar/p4.png"><br><img src="/2017/10/13/Something-You-Should-Know-About-Android-Immersive-Statusbar/p5.png"><br>后来又发现，全屏状态下播放视频内容显示不全（上图），推测是因为添加了全局layout监听，并且重新改了跟布局的显示高度，因此在全屏播放时把监听去掉，非全屏播放时加上监听，再重新运行，终于正常了！最终代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by mason on 2017/10/12.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 解决输入框被软键盘隐藏的问题 <span class="doctag">@See</span> http://www.jianshu.com/p/a95a1b84da11 &lt;/br&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AndroidBug5497Workaround</span> &#123;</span><br><span class="line">    <span class="comment">// For more information, see https://code.google.com/p/android/issues/detail?id=5497</span></span><br><span class="line">    <span class="keyword">private</span> ViewTreeObserver.<span class="type">OnGlobalLayoutListener</span> <span class="variable">mOnGlobalLayoutListener</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> FrameLayout.LayoutParams mFrameLayoutParams;</span><br><span class="line">    <span class="keyword">private</span> FrameLayout.LayoutParams mOrigLayoutParams;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">mIsContentHeightMeasured</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> mUsableHeightPrevious;</span><br><span class="line">    <span class="keyword">private</span> View mChildOfContent;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> mContentHeight;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AndroidBug5497Workaround</span><span class="params">(Activity activity)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (activity != <span class="literal">null</span> &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</span><br><span class="line">            <span class="type">FrameLayout</span> <span class="variable">content</span> <span class="operator">=</span> (FrameLayout) activity.findViewById(android.R.id.content);</span><br><span class="line">            mChildOfContent = content.getChildAt(<span class="number">0</span>);</span><br><span class="line">            mFrameLayoutParams = (FrameLayout.LayoutParams)</span><br><span class="line">                    mChildOfContent.getLayoutParams();</span><br><span class="line">            mOrigLayoutParams = <span class="keyword">new</span> <span class="title class_">FrameLayout</span>.LayoutParams(mFrameLayoutParams);</span><br><span class="line">            addGlobalLayoutListener();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 全屏状态下如果还有OnGlobalLayoutListener监听会导致播放器内容显示不全</span></span><br><span class="line"><span class="comment">     * 因此需要在Activity变成全屏前手动移除监听，变成非全屏前手动添加监听</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addGlobalLayoutListener</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</span><br><span class="line">            removeGlobalLayoutListener();</span><br><span class="line">            mOnGlobalLayoutListener = <span class="keyword">new</span> <span class="title class_">ViewTreeObserver</span>.OnGlobalLayoutListener() &#123;</span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onGlobalLayout</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!mIsContentHeightMeasured) &#123;</span><br><span class="line">                        <span class="comment">//兼容华为等机型</span></span><br><span class="line">                        mContentHeight = mChildOfContent.getHeight();</span><br><span class="line">                        mIsContentHeightMeasured = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    possiblyResizeChildOfContent();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            mChildOfContent.getViewTreeObserver()</span><br><span class="line">                    .addOnGlobalLayoutListener(mOnGlobalLayoutListener);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeGlobalLayoutListener</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mOnGlobalLayoutListener != <span class="literal">null</span> &amp;&amp; mChildOfContent != <span class="literal">null</span>) &#123;</span><br><span class="line">                mFrameLayoutParams = <span class="keyword">new</span> <span class="title class_">FrameLayout</span>.LayoutParams(mOrigLayoutParams);</span><br><span class="line">                mChildOfContent.setLayoutParams(mFrameLayoutParams);</span><br><span class="line">                mChildOfContent.getViewTreeObserver()</span><br><span class="line">                        .removeOnGlobalLayoutListener(mOnGlobalLayoutListener);</span><br><span class="line">                mOnGlobalLayoutListener = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重新调整跟布局的高度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">possiblyResizeChildOfContent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">usableHeightNow</span> <span class="operator">=</span> computeUsableHeight();</span><br><span class="line">        <span class="comment">//当前可见高度和上一次可见高度不一致 布局变动</span></span><br><span class="line">        <span class="keyword">if</span> (usableHeightNow != mUsableHeightPrevious) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">usableHeightSansKeyboard</span> <span class="operator">=</span> mChildOfContent.getRootView().getHeight();</span><br><span class="line">            <span class="type">int</span> <span class="variable">heightDifference</span> <span class="operator">=</span> usableHeightSansKeyboard - usableHeightNow;</span><br><span class="line">            <span class="keyword">if</span> (heightDifference &gt; (usableHeightSansKeyboard / <span class="number">4</span>)) &#123;</span><br><span class="line">                <span class="comment">// keyboard probably just became visible</span></span><br><span class="line">                <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</span><br><span class="line">                    mFrameLayoutParams.height = usableHeightSansKeyboard - heightDifference +</span><br><span class="line">                            SystemUtils.getStatusBarHeight();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    mFrameLayoutParams.height = usableHeightSansKeyboard - heightDifference;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mFrameLayoutParams.height = mContentHeight;</span><br><span class="line">            &#125;</span><br><span class="line">            mChildOfContent.setLayoutParams(mFrameLayoutParams);</span><br><span class="line">            mChildOfContent.requestLayout();</span><br><span class="line">            mUsableHeightPrevious = usableHeightNow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算mChildOfContent可见高度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">computeUsableHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Rect</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rect</span>();</span><br><span class="line">        mChildOfContent.getWindowVisibleDisplayFrame(r);</span><br><span class="line">        <span class="keyword">return</span> (r.bottom - r.top);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该类是用方法也比较简单，新建一个对象，然后在监听横竖屏变化即可.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">AndroidBug5497Workaround mAndroidBugFixer;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="comment">// 使用自定义actionbar，也可以把该方法放到Fragment.onViewCreated()下执行</span></span><br><span class="line">        setCustomActionbar();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setCustomActionbar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (getActivity() == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        ActionBar.<span class="type">LayoutParams</span> <span class="variable">lp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActionBar</span>.LayoutParams(ActionBar.LayoutParams.MATCH_PARENT,</span><br><span class="line">                ActionBar.LayoutParams.MATCH_PARENT);</span><br><span class="line">        mActionBarView = LayoutInflater.from(getActivity())</span><br><span class="line">                .inflate(R.layout.news_video_detail_action_bar_layout, <span class="literal">null</span>);</span><br><span class="line">        mBackView = (ImageView) mActionBarView.findViewById(R.id.action_bar_back);</span><br><span class="line">        mBackView.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">        mTitleView = (TextView) mActionBarView.findViewById(R.id.action_bar_title);</span><br><span class="line">        <span class="type">ActionBar</span> <span class="variable">actionBar</span> <span class="operator">=</span> getActionBar();</span><br><span class="line">        <span class="keyword">if</span> (actionBar != <span class="literal">null</span>) &#123;</span><br><span class="line">            actionBar.setCustomView(mActionBarView, lp);</span><br><span class="line">            actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);</span><br><span class="line">            actionBar.setDisplayShowCustomEnabled(<span class="literal">true</span>);</span><br><span class="line">            actionBar.setDisplayShowHomeEnabled(<span class="literal">false</span>);</span><br><span class="line">            actionBar.setDisplayShowTitleEnabled(<span class="literal">false</span>);</span><br><span class="line">            actionBar.setBackgroundDrawable(</span><br><span class="line">                    getResources().getDrawable(android.R.color.transparent));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (SystemUtils.isLollipop()) &#123;</span><br><span class="line">            <span class="type">Window</span> <span class="variable">window</span> <span class="operator">=</span> getActivity().getWindow();</span><br><span class="line">            window.getDecorView()</span><br><span class="line">                    .setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);</span><br><span class="line">            <span class="keyword">if</span> (RomUtils.isEmui()) &#123;</span><br><span class="line">                <span class="comment">//适配华为手机</span></span><br><span class="line">                window.addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</span><br><span class="line">            &#125;</span><br><span class="line">            window.setStatusBarColor(Color.TRANSPARENT);</span><br><span class="line">            <span class="keyword">if</span> (getActivity() != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//修复输入框被软键盘覆盖问题</span></span><br><span class="line">                mAndroidBugFixer = <span class="keyword">new</span> <span class="title class_">AndroidBug5497Workaround</span>(getActivity());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onConfigurationChanged</span><span class="params">(Configuration newConfig)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onConfigurationChanged(newConfig);</span><br><span class="line">        <span class="keyword">if</span> (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mAndroidBugFixer != <span class="literal">null</span>) &#123;</span><br><span class="line">                mAndroidBugFixer.removeGlobalLayoutListener();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mAndroidBugFixer != <span class="literal">null</span>) &#123;</span><br><span class="line">                mAndroidBugFixer.addGlobalLayoutListener();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>PS：如果发现是用了该类，屏幕有跳一下，闪一下的现象，可以去掉adjustPan标记</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 去掉该行代码</span></span><br><span class="line">getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN);</span><br></pre></td></tr></table></figure><p>搞定了状态栏和输入框的问题，后来视觉又要求actionbar-title要居中，不过这也不是什么难事，自定义actionbar就可以了。最终代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">自定义actionbar view</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setCustomActionbar</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (getActivity() == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    ActionBar.<span class="type">LayoutParams</span> <span class="variable">lp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActionBar</span>.LayoutParams(ActionBar.LayoutParams.MATCH_PARENT,</span><br><span class="line">            ActionBar.LayoutParams.MATCH_PARENT);</span><br><span class="line">    mActionBarView = LayoutInflater.from(getActivity())</span><br><span class="line">            .inflate(R.layout.news_video_detail_action_bar_layout, <span class="literal">null</span>);</span><br><span class="line">    mBackView = mActionBarView.findViewById(R.id.action_bar_back);</span><br><span class="line">    mBackView.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">    mTitleView = (TextView) mActionBarView.findViewById(R.id.action_bar_title);</span><br><span class="line">    <span class="type">ActionBar</span> <span class="variable">actionBar</span> <span class="operator">=</span> getActionBar();</span><br><span class="line">    <span class="keyword">if</span> (actionBar != <span class="literal">null</span>) &#123;</span><br><span class="line">        actionBar.setCustomView(mActionBarView, lp);</span><br><span class="line">        actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);</span><br><span class="line">        actionBar.setDisplayShowCustomEnabled(<span class="literal">true</span>);</span><br><span class="line">        actionBar.setDisplayShowHomeEnabled(<span class="literal">false</span>);</span><br><span class="line">        actionBar.setDisplayShowTitleEnabled(<span class="literal">false</span>);</span><br><span class="line">        actionBar.setBackgroundDrawable(</span><br><span class="line">                getResources().getDrawable(android.R.color.transparent));</span><br><span class="line">        <span class="comment">//设置actionbar返回按钮图片</span></span><br><span class="line">        <span class="comment">//actionBar.setHomeAsUpIndicator(R.drawable.base_action_bar_back);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">        <span class="type">Window</span> <span class="variable">window</span> <span class="operator">=</span> getActivity().getWindow();</span><br><span class="line">        window.getDecorView()</span><br><span class="line">                .setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);</span><br><span class="line">        window.setStatusBarColor(Color.TRANSPARENT);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (RomUtils.isEmui()) &#123;</span><br><span class="line">            <span class="comment">//状态栏适配华为手机</span></span><br><span class="line">            window.addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</span><br><span class="line">        &#125;</span><br><span class="line">        window.setStatusBarColor(Color.TRANSPARENT);</span><br><span class="line">        <span class="keyword">if</span> (getActivity() != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//修复输入框被软键盘覆盖问题</span></span><br><span class="line">            mAndroidBugFixer = <span class="keyword">new</span> <span class="title class_">AndroidBug5497Workaround</span>(getActivity());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> ActionBar <span class="title function_">getActionBar</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (getActivity() <span class="keyword">instanceof</span> FragmentActivity) &#123;</span><br><span class="line">        <span class="keyword">return</span> ((FragmentActivity)getActivity()).getSupportActionBar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这次解决问题的过程参考了网上的解决方案， 经过了严格的测试，才把代码提交上去。个人对于网上第三方开源库其实是有些谨慎的，原因有二：其一，网上的开源库不一定适合当前项目，可能会有兼容问题（support-v4、support-v7）；其二，就算能解决，也不能保证该开源库没有其他问题。这也是这次做状态栏透明没有使用第三方开源库的原因。个人还是比较倾向于自己写，毕竟自己写的代码自己放心。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 状态栏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈MVP</title>
      <link href="/2017/10/08/Talk-about-MVP/"/>
      <url>/2017/10/08/Talk-about-MVP/</url>
      
        <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>MVP由MVC演变而来，Android的项目架构也是基于MVC的，V层主要由xml来承载，C层主要是Fragment&#x2F;Activity，M层主要是自己写的业务逻辑，这样划分没啥问题。可以理想很美好，现实很残酷，到后面你会发现很多的Fragment&#x2F;Activity即做了一些V层的工作（比如控制View的状态），又做了一些C层工作（操作Model、用户数据输入等），又做了一些M层工作（读写数据库，网络请求等），最终导致Fragment&#x2F;Activity越来越膨胀，上千行甚至几千行的Fragment&#x2F;Activity也屡见不鲜。</p><span id="more"></span><p><img src="/2017/10/08/Talk-about-MVP/p1.jpg"></p><p>MVC中，V可以直接访问M，导致V和M的关联性比较强，往往导致当V改变时，M也得跟着变动。而在移动客户端中，V变动很频繁（比如单列表改成双列表或者瀑布流），这样M又得跟着变动。那有没有另外一种比较好的方式呢？MVP应运而生。</p><p><img src="/2017/10/08/Talk-about-MVP/p2.jpg"></p><p>MVP主要思路是在M和V之间加一层表现层Presnter，用来隔绝M和V，由P来代替原先的Cotroller。这样，不管是M层或V层有变化时，只需要少量修改甚至是不修改Presnter（P层的接口是定好的）就可以达到目的。下面通过一个小例子说明MVP如何操作。</p><h3 id="2-如何操作"><a href="#2-如何操作" class="headerlink" title="2. 如何操作"></a>2. 如何操作</h3><h4 id="2-1-定义接口"><a href="#2-1-定义接口" class="headerlink" title="2.1 定义接口"></a>2.1 定义接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PluginContract</span> &#123;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">View</span> <span class="keyword">extends</span> <span class="title class_">BaseView</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">updateView</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Presenter</span> <span class="keyword">extends</span> <span class="title class_">BasePresenter</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">(Param param)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Param</span> &#123;</span><br><span class="line">        String url;</span><br><span class="line">         <span class="keyword">public</span> String <span class="title function_">getUrl</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> url;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUrl</span><span class="params">(String url)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.url = url;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BasePresenter</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">end</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BaseView</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-具体实现类"><a href="#2-2-具体实现类" class="headerlink" title="2.2 具体实现类"></a>2.2 具体实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PluginPresenter</span> <span class="keyword">implements</span> <span class="title class_">PluginContract</span>.Presenter &#123;</span><br><span class="line">    <span class="comment">// 如果有具体业务逻辑Model的话，Presenter也应该持有一个Model类引用</span></span><br><span class="line">    <span class="keyword">private</span> PluginContract.View mView; </span><br><span class="line">    <span class="keyword">private</span> PluginContract.Param mParam;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PluginPresenter</span><span class="params">(PluginContract.View view)</span> &#123;</span><br><span class="line">        mView = view;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PluginPresenter</span><span class="params">(PluginContract.View view, <span class="meta">@NonNull</span> PluginContract.Param param)</span> &#123;</span><br><span class="line">        mView = view;</span><br><span class="line">        mParam = param;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化操作</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">end</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">// 释放资源</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//其中可能会用到View的方法，如</span></span><br><span class="line">        <span class="comment">// mView.updateView(); </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">(PluginContract.Param param)</span> &#123;</span><br><span class="line">        <span class="comment">// 做具体业务逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般使用Fragment实现PluginContract.View接口，在fragment.onCreate()方法进行初始化，收到某些消息的时候去做某事，比如点击去请求网络</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PCFragment</span> <span class="keyword">extends</span> <span class="title class_">BaseFragment</span> <span class="keyword">implements</span> <span class="title class_">PluginContract</span>.View, View.OnClickListener &#123;</span><br><span class="line">    <span class="keyword">private</span> PluginContract.Presenter mFavPresenter;</span><br><span class="line">    <span class="keyword">private</span> String mUrl;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Bundle</span> <span class="variable">args</span> <span class="operator">=</span> getArguments();</span><br><span class="line">        <span class="keyword">if</span> (args != <span class="literal">null</span>) &#123;</span><br><span class="line">            mUrl = args.getString(PARAM_URL);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        PluginContract.<span class="type">Param</span> <span class="variable">param</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PluginContract</span>.Param();</span><br><span class="line">        param.setUrl(mUrl);</span><br><span class="line">        mPresenter = <span class="keyword">new</span> <span class="title class_">PluginPresenter</span>(<span class="built_in">this</span>, param);</span><br><span class="line">        mPresenter.start();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (v.getId()) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.do_something_layout:</span><br><span class="line">                <span class="keyword">if</span> (mPresenter != <span class="literal">null</span>) &#123;</span><br><span class="line">                    mPresenter.doSomething();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h3><p>目前，新闻的很多地方如分享，弹幕，收藏，直播，都采用了这种设计方式，代码看起来清晰了很多。这种组织代码方式的好处是解放了Fragment&#x2F;Activity，不用什么东西都往Fragment&#x2F;Activity堆，代码灵活性比较高，而且复用性比较好，一个PluginPresenter写好之后，其他地方也能复用。一些比较通用的组件如分享写成一个SharePresenter之后基本上不用做啥改动就可以复用到其他地方。而且这种方式写测试代码也比较容易。当然，如果能完全按照MVC来写代码，测试起来也相对容易，但是这种方式也有弊端：容易造成接口膨胀。这也印证了任何事物都有两面性，选择适合当前项目的架构，才是王道。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> MVP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Latex-in-Hexo</title>
      <link href="/2017/09/24/Latex-in-Markdown/"/>
      <url>/2017/09/24/Latex-in-Markdown/</url>
      
        <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>最近打算写一篇关于Android-Matrix的文章，中间涉及到不少数学公式，发现直接用文字很难把公式写出来。后来发现了mathjax这个神器，它可以把latex公式翻译成html直接展示在markdown文件中。于是花了点时间学了一下latex编辑公式的方法，顺便记录一下，供以后翻阅。</p><h3 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2. 准备工作"></a>2. 准备工作</h3><h4 id="2-1-安装插件"><a href="#2-1-安装插件" class="headerlink" title="2.1 安装插件"></a>2.1 安装插件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-math --save</span><br></pre></td></tr></table></figure><p>然后将如下配置放到站点config.xml文件末尾，详情请参考这里：<a href="https://github.com/hexojs/hexo-math">https://github.com/hexojs/hexo-math</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">math:</span><br><span class="line">  engine: &#x27;mathjax&#x27; # or &#x27;katex&#x27;</span><br><span class="line">  mathjax:</span><br><span class="line">    src: custom_mathjax_source</span><br><span class="line">    config:</span><br><span class="line">      # MathJax config</span><br><span class="line">  katex:</span><br><span class="line">    css: custom_css_source</span><br><span class="line">    js: custom_js_source # not used</span><br><span class="line">    config:</span><br><span class="line">      # KaTeX config</span><br></pre></td></tr></table></figure><p>同时找到主题配置文件config.xml，将mathjax插件打开，改成如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># MathJax Support</span><br><span class="line">mathjax:</span><br><span class="line">  enable: true</span><br><span class="line">  per_page: true</span><br><span class="line">  cdn: //cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML</span><br></pre></td></tr></table></figure><h4 id="2-2-使用"><a href="#2-2-使用" class="headerlink" title="2.2 使用"></a>2.2 使用</h4><p>latex语法以符号开头，以符号结束，这里为了在hexo中安装插件，代价就是需要在latex语言的起始处替换成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% math %&#125;</span><br></pre></td></tr></table></figure><p>在结尾处替换成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% endmath %&#125;</span><br></pre></td></tr></table></figure><p>如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% math %&#125;y_1=y_0+\Delta y&#123;% endmath %&#125;</span><br></pre></td></tr></table></figure><p>则显示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y1=y0+Δy</span><br></pre></td></tr></table></figure><h3 id="3-数学公式"><a href="#3-数学公式" class="headerlink" title="3. 数学公式"></a>3. 数学公式</h3><h4 id="3-1-指数"><a href="#3-1-指数" class="headerlink" title="3.1 指数"></a>3.1 指数</h4><p><img src="/2017/09/24/Latex-in-Markdown/p1.png"></p><h4 id="3-2-平方根"><a href="#3-2-平方根" class="headerlink" title="3.2 平方根"></a>3.2 平方根</h4><p><img src="/2017/09/24/Latex-in-Markdown/p2.png"></p><h4 id="3-3-下划线"><a href="#3-3-下划线" class="headerlink" title="3.3 下划线"></a>3.3 下划线</h4><p><img src="/2017/09/24/Latex-in-Markdown/p3.png"><br><img src="/2017/09/24/Latex-in-Markdown/p4.png"></p><h4 id="3-4-向量"><a href="#3-4-向量" class="headerlink" title="3.4 向量"></a>3.4 向量</h4><p><img src="/2017/09/24/Latex-in-Markdown/p5.png"></p><h4 id="3-5-分数"><a href="#3-5-分数" class="headerlink" title="3.5 分数"></a>3.5 分数</h4><p><img src="/2017/09/24/Latex-in-Markdown/p6.png"></p><h4 id="3-6-积分"><a href="#3-6-积分" class="headerlink" title="3.6 积分"></a>3.6 积分</h4><p><img src="/2017/09/24/Latex-in-Markdown/p7.png"></p><h4 id="3-7-极限"><a href="#3-7-极限" class="headerlink" title="3.7 极限"></a>3.7 极限</h4><p><img src="/2017/09/24/Latex-in-Markdown/p8.png"></p><h4 id="3-8-方程"><a href="#3-8-方程" class="headerlink" title="3.8 方程"></a>3.8 方程</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% math %&#125;</span><br><span class="line">\Gamma(z) = \int_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt\,. </span><br><span class="line">&#123;% endmath %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Γ(z)=∫∞0t^(z−1)e^(−t)dt</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% math %&#125;</span><br><span class="line">\frac&#123;\partial u&#125;&#123;\partial t&#125;</span><br><span class="line">= h^2 \left( \frac&#123;\partial^2 u&#125;&#123;\partial x^2&#125; </span><br><span class="line">+ \frac&#123;\partial^2 u&#125;&#123;\partial y^2&#125;  </span><br><span class="line">+ \frac&#123;\partial^2 u&#125;&#123;\partial z^2&#125;\right)</span><br><span class="line">&#123;% endmath %&#125;</span><br></pre></td></tr></table></figure><h4 id="3-9-矩阵"><a href="#3-9-矩阵" class="headerlink" title="3.9 矩阵"></a>3.9 矩阵</h4><h5 id="3-9-1-中括号矩阵"><a href="#3-9-1-中括号矩阵" class="headerlink" title="3.9.1 中括号矩阵"></a>3.9.1 中括号矩阵</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% math %&#125;</span><br><span class="line">\left[</span><br><span class="line">\begin&#123;matrix&#125;</span><br><span class="line"> 1      &amp; 2      &amp; \cdots &amp; 4      \\</span><br><span class="line"> 7      &amp; 6      &amp; \cdots &amp; 5      \\</span><br><span class="line"> \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\</span><br><span class="line"> 8      &amp; 9      &amp; \cdots &amp; 0      \\</span><br><span class="line">\end&#123;matrix&#125;</span><br><span class="line">\right]</span><br><span class="line">&#123;% endmath %&#125;</span><br></pre></td></tr></table></figure><h5 id="3-9-2-大括号矩阵"><a href="#3-9-2-大括号矩阵" class="headerlink" title="3.9.2 大括号矩阵"></a>3.9.2 大括号矩阵</h5><p>如果想要把中括号换成大括号，将[换成{即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% math %&#125;</span><br><span class="line">\left\&#123;</span><br><span class="line">\begin&#123;matrix&#125;</span><br><span class="line"> 1      &amp; 2      &amp; \cdots &amp; 4      \\</span><br><span class="line"> 7      &amp; 6      &amp; \cdots &amp; 5      \\</span><br><span class="line"> \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\</span><br><span class="line"> 8      &amp; 9      &amp; \cdots &amp; 0      \\</span><br><span class="line">\end&#123;matrix&#125;</span><br><span class="line">\right\&#125; </span><br><span class="line">&#123;% endmath %&#125;</span><br></pre></td></tr></table></figure><h5 id="3-9-3-带竖线矩阵"><a href="#3-9-3-带竖线矩阵" class="headerlink" title="3.9.3 带竖线矩阵"></a>3.9.3 带竖线矩阵</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% math %&#125;</span><br><span class="line">\left[</span><br><span class="line">    \begin&#123;array&#125;&#123;cc|c&#125;</span><br><span class="line">      1 &amp; 2 &amp; 3 \\</span><br><span class="line">      4 &amp; 5 &amp; 6</span><br><span class="line">    \end&#123;array&#125;</span><br><span class="line">\right] </span><br><span class="line">&#123;% endmath %&#125;</span><br></pre></td></tr></table></figure><p>[1425|36]</p><h3 id="4-常用符号"><a href="#4-常用符号" class="headerlink" title="4. 常用符号"></a>4. 常用符号</h3><p><img src="/2017/09/24/Latex-in-Markdown/p10.png"><br><img src="/2017/09/24/Latex-in-Markdown/p11.png"><br><img src="/2017/09/24/Latex-in-Markdown/p12.png"><br><img src="/2017/09/24/Latex-in-Markdown/p13.png"><br><img src="/2017/09/24/Latex-in-Markdown/p14.png"><br><img src="/2017/09/24/Latex-in-Markdown/p15.png"><br><img src="/2017/09/24/Latex-in-Markdown/p16.png"></p><h3 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h3><ul><li><a href="http://blog.csdn.net/fzch_struggling/article/details/44998901#latex%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95">编写LaTeX数学公式</a></li><li><a href="http://mohu.org/info/symbols/symbols.htm">常用数学符号的 LaTeX 表示方法</a></li><li><a href="http://www.mohu.org/info/lshort-cn.pdf">http://www.mohu.org/info/lshort-cn.pdf</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Latex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android-栏目管理</title>
      <link href="/2017/09/19/Newsapp-Column-Manager/"/>
      <url>/2017/09/19/Newsapp-Column-Manager/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近app准备大改版，整体视觉全部换新。栏目管理功能也需要进行全新设计和改变，新版中加了不少动画效果。因为老版架构使用GridView进行栏目展示，但是GridView在栏目增加和删除时播放动画比较困难，而且老架构中栏目管理功能代码混乱，到底是重构还是重写？经过认真评估，最终决定重写该功能。</p><span id="more"></span><p>设计师要求的效果图如下：</p><p><img src="/2017/09/19/Newsapp-Column-Manager/p1.gif"></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>该模块主要有三个部分：</p><ul><li>栏目添加、删除</li><li>栏目排序（拖拽）</li><li>动画</li></ul><h3 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h3><p>在具体实现之前，有不少问题是需要确认或者是探索的。</p><h4 id="问题1-GridView-or-RecyclerView"><a href="#问题1-GridView-or-RecyclerView" class="headerlink" title="问题1 GridView or RecyclerView ?"></a>问题1 GridView or RecyclerView ?</h4><p>首先，对于栏目元素的展示，用GridView、RecyclerView都可以，但是GridView做添加删除动画比较困难，而RecyclerView本身就支持添加删除动画，因此这里选RecyclerView作为栏目元素的展示。</p><h4 id="问题2-一个RecylerView-or-三个RecylerView"><a href="#问题2-一个RecylerView-or-三个RecylerView" class="headerlink" title="问题2 一个RecylerView or 三个RecylerView ?"></a>问题2 一个RecylerView or 三个RecylerView ?</h4><p>一开始，我把三个模块（我的栏目、最近删除、更多栏目）都放在一个RecylerView上，后来发现把所有的逻辑都放在一个RecylerView和一个Adapter中是非常不明智的：1、会使代码更加臃肿；2、需要不断计算位置来判断某个栏目是属于我的栏目、最近删除还是更多栏目，逻辑十分复杂；3、代码扩展性不高，如果哪天产品说不想要最近删除这个功能了，又得大改。基于如上几个因素，选用三个RecylerView。</p><h4 id="问题3-动画如何实现？"><a href="#问题3-动画如何实现？" class="headerlink" title="问题3 动画如何实现？"></a>问题3 动画如何实现？</h4><p>对于添加和删除动画，RecylcerView无缝支持，使用notifyItemInserted()和nofifyItemRemove()即可，对于漂移动画，就有点棘手了。一个比较简单的思路是：动画之前，先获取View截图，计算出起始坐标和终止坐标，然后添加到Activity根布局(contentView)中，做一个位移动画，然后再把该View截图从根布局中移除即可。</p><h4 id="问题4-拖拽排序功能如何实现？"><a href="#问题4-拖拽排序功能如何实现？" class="headerlink" title="问题4 拖拽排序功能如何实现？"></a>问题4 拖拽排序功能如何实现？</h4><p>类似于ListView、GridView的ViewDragHelper，RecyclerView也有对应的拖拽帮助类ItemTouchHelper，只需要实现Callback，并重写一些简单的方法，便可以轻松实现拖拽排序功能。</p><p>想清楚了上面几个问题，完成整个功能已经不在话下了。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>具体实现效果如下（为了压缩gif，丢了不少帧，真机效果要流畅很多）：<br><img src="/2017/09/19/Newsapp-Column-Manager/p2.gif"></p><p>主要功能已经实现了，剩下的就是迁移业务逻辑了。</p><p>代码架构如下：</p><p><img src="/2017/09/19/Newsapp-Column-Manager/p3.png"></p><p>adapter作为数据适配器而存在，为了更好地灵活的区分不同点击事件的不同行为，抽象出clickhandler专门处理栏目点击事件，每个adapter都持有一个clickhandler对象。clickhandler代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by jasonkent27 on 2017/9/14.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ClickHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Call when item click</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> holder which holder that user click.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isForbidMove true if this holder can be moved, false otherwise.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isInEditMode true if Adapter in Edit Mode, false otherwise.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">onItemClick</span><span class="params">(ColumnBaseAdapter.ItemViewHolder holder, <span class="type">boolean</span> isForbidMove, <span class="type">boolean</span> isInEditMode)</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Call when item long click</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> holder which holder that user click.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isForbidMove true if this holder can be moved, false otherwise.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isInEditMode true if Adapter in Edit Mode, false otherwise.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">onItemLongClick</span><span class="params">(ColumnBaseAdapter.ItemViewHolder holder, <span class="type">boolean</span> isForbidMove, <span class="type">boolean</span> isInEditMode)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是具体的点击事件单单由clickhandler来处理的话，需要传很多参数进去（如topRecyclerVIew，deleteRecyclerVIew，moreRecyclerView等），因此抽象出一个Controller，用来代理处理具体业务请求，Cotroller代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by jasonkent27 on 2017/9/13.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ColumnController</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">COLUMN_TYPE_TOP</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">COLUMN_TYPE_RECENT_DELETED</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">COLUMN_TYPE_MORE</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">moveMoreToTop</span><span class="params">(ColumnBaseAdapter.ItemViewHolder holder)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">gotoColumn</span><span class="params">(<span class="type">int</span> columnType, ColumnBaseAdapter.ItemViewHolder holder)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">moveRecentDeletedToTop</span><span class="params">(ColumnBaseAdapter.ItemViewHolder holder)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">startDrag</span><span class="params">(ColumnBaseAdapter.ItemViewHolder holder)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">moveTopToRecentDeleted</span><span class="params">(ColumnBaseAdapter.ItemViewHolder holder)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然，clickhandler也不需要做太多工作，比如MoreClickHandler代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by jasonkent27 on 2017/9/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MoreClickHandler</span> <span class="keyword">implements</span> <span class="title class_">ClickHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ColumnController mController;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MoreClickHandler</span><span class="params">(ColumnController controller)</span> &#123;</span><br><span class="line">        mController = controller;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onItemClick</span><span class="params">(ColumnBaseAdapter.ItemViewHolder holder, <span class="type">boolean</span> isForbidMove, <span class="type">boolean</span> isInEditMode)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isInEditMode) &#123;</span><br><span class="line">            <span class="comment">// step 1: remove more data and animation.</span></span><br><span class="line">            <span class="comment">// step 2: start translate animation.</span></span><br><span class="line">            <span class="comment">// step 3: add top data and animation.</span></span><br><span class="line">            mController.moveMoreToTop(holder);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mController.gotoColumn(ColumnController.COLUMN_TYPE_MORE, holder);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onItemLongClick</span><span class="params">(ColumnBaseAdapter.ItemViewHolder holder, <span class="type">boolean</span> isForbidMove, <span class="type">boolean</span> isInEditMode)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而真正具体的逻辑（添加、删除栏目、位移动画等）由谁来做比较合适呢？显然是ColumnTopEditFragment，因为ColumnTopEditFragment本身就持有topRecyclerVIew，deleteRecyclerVIew，moreRecyclerView这些对象，通过这些对象来实现具体逻辑是比较合适的。当然如果以后ColumnTopEditFragment代码越来越多，可以考虑把写另一个类实现ColumnController接口，并把需要的参数(topRecyclerVIew，deleteRecyclerVIew，moreRecyclerView)传进去，这样就可以把添加、删除、位移动画这部分逻辑挪出来。因此这里抽象出ColumnController是非常明智的，如果改天产品说更多栏目砍掉，现有代码框架也不需要做太多调整。</p><h3 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h3><p><a href="https://github.com/nancyyihao/ColumnManager">ColumnManager</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网易新闻-日夜间切换动画</title>
      <link href="/2017/09/17/Android-Custom-View-Three/"/>
      <url>/2017/09/17/Android-Custom-View-Three/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近在学习Android动画相关知识，正好公司视觉设计师设计了一个日夜间切换动画，个人感觉挺有趣，便着手实现。</p><span id="more"></span><p><img src="/2017/09/17/Android-Custom-View-Three/p1.gif"></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>可以看到动画其实是像水波纹一样向外扩展，因此可以通过自定义View，不断向外画半径即可。整个实现过程主要分为四步（以日间切换到夜间为例）：</p><ol><li>先获取到日间的View的截图（通过API-View.getDrawingCache()实现）</li><li>将该截图盖到整个屏幕上</li><li>将主题改成夜间（此时整个主题就是夜间，但是因为盖了一层日间图，所以看到的表象是还处于日间）</li><li>不断用画笔画透明圆即可（PorterDuff.Mode.CLEAR）。</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>代码实现非常简单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RippleView</span> <span class="keyword">extends</span> <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ANIMATION_TYPE_SPREAD</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ANIMATION_TYPE_SHRINK</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ANIMATION_TYPE_INVALID</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Interpolator</span> <span class="variable">mInterpolator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AccelerateDecelerateInterpolator</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">mAnimationType</span> <span class="operator">=</span> ANIMATION_TYPE_SPREAD;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> <span class="variable">mMaxRadius</span> <span class="operator">=</span> <span class="number">0.0f</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> <span class="variable">mClickX</span> <span class="operator">=</span> <span class="number">0.0f</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> <span class="variable">mClickY</span> <span class="operator">=</span> <span class="number">0.0f</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">mDuration</span> <span class="operator">=</span> <span class="number">500</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> mDrawParentAlready;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> <span class="variable">mClearRadius</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span>[] mCacheState;</span><br><span class="line">    ValueAnimator mValueAnimator;</span><br><span class="line">    <span class="keyword">private</span> Paint mClearPaint;</span><br><span class="line">    <span class="keyword">private</span> View mParentView;</span><br><span class="line">    <span class="keyword">private</span> Bitmap mBitmap;</span><br><span class="line">    ArrayList&lt;RippleAnimatorListener&gt; mListeners = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RippleView</span><span class="params">(Context context, View parent)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context);</span><br><span class="line">        <span class="built_in">this</span>.mParentView = parent;</span><br><span class="line">        mClearPaint = <span class="keyword">new</span> <span class="title class_">Paint</span>();</span><br><span class="line">        mClearPaint.setColor(Color.TRANSPARENT);</span><br><span class="line">        mClearPaint.setXfermode(<span class="keyword">new</span> <span class="title class_">PorterDuffXfermode</span>(PorterDuff.Mode.CLEAR));</span><br><span class="line">        setLayerType(LAYER_TYPE_SOFTWARE, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">go</span><span class="params">()</span> &#123;</span><br><span class="line">        mClearRadius = <span class="number">0</span>;</span><br><span class="line">        mMaxRadius = getDefaultMaxRadius();</span><br><span class="line">        doAnimation(mAnimationType == ANIMATION_TYPE_SPREAD ? <span class="number">0</span> : mMaxRadius,</span><br><span class="line">                  mAnimationType == ANIMATION_TYPE_SPREAD ? mMaxRadius : <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAnimationType</span><span class="params">(<span class="meta">@AnimationType</span> <span class="type">int</span> animationType)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mAnimationType = animationType;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addRippleAnimationListener</span><span class="params">(RippleAnimatorListener listener)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mListeners == <span class="literal">null</span>) &#123;</span><br><span class="line">            mListeners = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        mListeners.add(listener);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeAllRippleListeners</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mListeners != <span class="literal">null</span>) &#123;</span><br><span class="line">            mListeners.clear();</span><br><span class="line">            mListeners = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInterpolator</span><span class="params">(Interpolator interpolator)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mInterpolator = interpolator;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClickX</span><span class="params">(<span class="type">float</span> clickX)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mClickX = clickX;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClickY</span><span class="params">(<span class="type">float</span> clickY)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mClickY = clickY;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMaxRadius</span><span class="params">(<span class="type">float</span> maxRadius)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mMaxRadius = maxRadius;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDuration</span><span class="params">(<span class="type">int</span> duration)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mDuration = duration;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDraw</span><span class="params">(Canvas canvas)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * step 1: capture parent view background.</span></span><br><span class="line"><span class="comment">         * step 2: toggle theme.</span></span><br><span class="line"><span class="comment">         * step 3: draw current view over whole window.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        drawParentIfNeed();</span><br><span class="line">        canvas.drawCircle(mClickX, mClickY, mClearRadius, mClearPaint);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Capture the snapshot of parent view and set current view background.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">drawParentIfNeed</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!mDrawParentAlready) &#123;</span><br><span class="line">            mCacheState = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">2</span>];</span><br><span class="line">            mBitmap = ImgUtil.getBitmapFromView(mParentView, mCacheState);</span><br><span class="line">            <span class="keyword">if</span> (mBitmap != <span class="literal">null</span> &amp;&amp; !mBitmap.isRecycled()) &#123;</span><br><span class="line">                setBackgroundDrawable(<span class="keyword">new</span> <span class="title class_">BitmapDrawable</span>(mBitmap));</span><br><span class="line">            &#125;</span><br><span class="line">            ThemeSettingsHelper.getInstance().toggleTheme();</span><br><span class="line">            mDrawParentAlready = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doAnimation</span><span class="params">(<span class="type">float</span> start, <span class="type">float</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mValueAnimator != <span class="literal">null</span>) &#123;</span><br><span class="line">            mValueAnimator.removeAllListeners();</span><br><span class="line">            mValueAnimator.removeAllUpdateListeners();</span><br><span class="line">            mValueAnimator = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mValueAnimator = ValueAnimator.ofFloat(start, end);</span><br><span class="line">        mValueAnimator.setDuration(mDuration);</span><br><span class="line">        mValueAnimator.addUpdateListener(<span class="keyword">new</span> <span class="title class_">ValueAnimator</span>.AnimatorUpdateListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> &#123;</span><br><span class="line">                mClearRadius = (<span class="type">float</span>) animation.getAnimatedValue();</span><br><span class="line">                invalidate();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        mValueAnimator.addListener(<span class="keyword">new</span> <span class="title class_">Animator</span>.AnimatorListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAnimationStart</span><span class="params">(Animator animation)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (mListeners != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (RippleAnimatorListener listener : mListeners) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (listener != <span class="literal">null</span>) listener.onAnimationStart(animation);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAnimationEnd</span><span class="params">(Animator animation)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (mListeners != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (RippleAnimatorListener listener : mListeners) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (listener != <span class="literal">null</span>) listener.onAnimationEnd(animation);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Remember to recycle bitmap when animation end.</span></span><br><span class="line">                recycleBitmap();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAnimationCancel</span><span class="params">(Animator animation)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (mListeners != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (RippleAnimatorListener listener : mListeners) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (listener != <span class="literal">null</span>) listener.onAnimationCancel(animation);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Remember to recycle bitmap when animation cancel.</span></span><br><span class="line">                recycleBitmap();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAnimationRepeat</span><span class="params">(Animator animation)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (mListeners != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (RippleAnimatorListener listener : mListeners) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (listener != <span class="literal">null</span>) listener.onAnimationRepeat(animation);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        mValueAnimator.setInterpolator(mInterpolator);</span><br><span class="line">        mValueAnimator.start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Recycle bitmap if need.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">recycleBitmap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mBitmap != <span class="literal">null</span> &amp;&amp; !mBitmap.isRecycled()) &#123;</span><br><span class="line">            mBitmap.recycle();</span><br><span class="line">        &#125;</span><br><span class="line">        ImgUtil.restoreViewCacheState(mParentView, mCacheState);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDetachedFromWindow</span><span class="params">()</span> &#123;</span><br><span class="line">        removeAllRippleListeners();</span><br><span class="line">        <span class="keyword">if</span> (mValueAnimator != <span class="literal">null</span>) &#123;</span><br><span class="line">            mValueAnimator.removeAllListeners();</span><br><span class="line">            mValueAnimator.removeAllUpdateListeners();</span><br><span class="line">            mValueAnimator = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Remember to recycle bitmap when view destroy.</span></span><br><span class="line">        recycleBitmap();</span><br><span class="line">        <span class="built_in">super</span>.onDetachedFromWindow();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the max radius through four vertex (0,0), (0, Width),(height, 0), (width, height)</span></span><br><span class="line"><span class="comment">     * in windows.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> max radius.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">float</span> <span class="title function_">getDefaultMaxRadius</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">float</span> <span class="variable">screenHeight</span> <span class="operator">=</span> SystemUtils.getScreenHeight();</span><br><span class="line">        <span class="type">float</span> <span class="variable">screenWidth</span> <span class="operator">=</span> SystemUtils.getScreenWidth();</span><br><span class="line">        <span class="type">float</span> <span class="variable">line1</span> <span class="operator">=</span> (<span class="type">float</span>) Math.sqrt((mClickX - <span class="number">0</span>) * (mClickX - <span class="number">0</span>) + (mClickY - <span class="number">0</span>) * (mClickY</span><br><span class="line">                - <span class="number">0</span>));</span><br><span class="line">        <span class="type">float</span> <span class="variable">line2</span> <span class="operator">=</span> (<span class="type">float</span>) Math.sqrt((mClickX - screenWidth) * (mClickX - screenWidth) +</span><br><span class="line">                (mClickY - <span class="number">0</span>) * (mClickY - <span class="number">0</span>));</span><br><span class="line">        <span class="type">float</span> <span class="variable">line3</span> <span class="operator">=</span> (<span class="type">float</span>) Math.sqrt((mClickX - <span class="number">0</span>) * (mClickX - <span class="number">0</span>) + (mClickY - screenHeight)</span><br><span class="line">                * (mClickY - screenHeight));</span><br><span class="line">        <span class="type">float</span> <span class="variable">line4</span> <span class="operator">=</span> (<span class="type">float</span>) Math.sqrt((mClickX - screenWidth) * (mClickX - screenWidth) +</span><br><span class="line">                (mClickY - screenHeight) * (mClickY - screenHeight));</span><br><span class="line">        line1 = Math.max(line1, line2);</span><br><span class="line">        line1 = Math.max(line1, line3);</span><br><span class="line">        line1 = Math.max(line1, line4);</span><br><span class="line">        <span class="keyword">return</span> line1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@IntDef(&#123;ANIMATION_TYPE_SPREAD, ANIMATION_TYPE_SHRINK, ANIMATION_TYPE_INVALID&#125;)</span></span><br><span class="line">    <span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line">    <span class="meta">@interface</span> AnimationType &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RippleAnimatorListener</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">onAnimationStart</span><span class="params">(Animator animation)</span>;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">onAnimationEnd</span><span class="params">(Animator animation)</span>;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">onAnimationCancel</span><span class="params">(Animator animation)</span>;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">onAnimationRepeat</span><span class="params">(Animator animation)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Usage:</span></span><br><span class="line"><span class="comment"> &lt;p&gt;</span></span><br><span class="line"><span class="comment"> RippleAnimationController controller = new RippleAnimationController.Builder(getActivity()).build();</span></span><br><span class="line"><span class="comment"> controller.startAnimation();</span></span><br><span class="line"><span class="comment"> &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RippleAnimationController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@RippleView</span>.AnimationType <span class="type">int</span> <span class="variable">mAnimationType</span> <span class="operator">=</span> RippleView.ANIMATION_TYPE_SPREAD;</span><br><span class="line">    <span class="keyword">private</span> Interpolator mInterpolator;</span><br><span class="line">    <span class="keyword">private</span> RippleView mRippleView;</span><br><span class="line">    <span class="keyword">private</span> Activity mActivity;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> mMaxRadius;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> mClickX;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> mClickY;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> mDuration;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startAnimation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mActivity == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ViewGroup</span> <span class="variable">rootView</span> <span class="operator">=</span> (ViewGroup) mActivity.getWindow()</span><br><span class="line">                .getDecorView().findViewById(android.R.id.content);</span><br><span class="line">        <span class="keyword">if</span> (rootView == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mRippleView != <span class="literal">null</span>) &#123;</span><br><span class="line">            mRippleView.clearAnimation();</span><br><span class="line">            mRippleView.removeAllRippleListeners();</span><br><span class="line">            mRippleView = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mRippleView = <span class="keyword">new</span> <span class="title class_">RippleView</span>(mActivity, rootView);</span><br><span class="line">        mRippleView.setAnimationType(mAnimationType);</span><br><span class="line">        <span class="keyword">if</span> (mInterpolator != <span class="literal">null</span>) &#123;</span><br><span class="line">            mRippleView.setInterpolator(mInterpolator);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Float.compare(mMaxRadius, <span class="number">0.0f</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            mRippleView.setMaxRadius(mMaxRadius);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Float.compare(mClickX, <span class="number">0.0f</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            mRippleView.setClickX(mClickX);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Float.compare(mClickY, <span class="number">0.0f</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            mRippleView.setClickY(mClickY);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mDuration &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            mRippleView.setDuration(mDuration);</span><br><span class="line">        &#125;</span><br><span class="line">        rootView.addView(mRippleView);</span><br><span class="line">        mRippleView.addRippleAnimationListener(<span class="keyword">new</span> <span class="title class_">RippleView</span>.RippleAnimatorListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAnimationStart</span><span class="params">(Animator animation)</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAnimationEnd</span><span class="params">(Animator animation)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (rootView != <span class="literal">null</span>) &#123;</span><br><span class="line">                    rootView.removeView(mRippleView);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAnimationCancel</span><span class="params">(Animator animation)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (rootView != <span class="literal">null</span>) &#123;</span><br><span class="line">                    rootView.removeView(mRippleView);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAnimationRepeat</span><span class="params">(Animator animation)</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        mRippleView.go();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setActivity</span><span class="params">(Activity activity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mActivity = activity;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setMaxRadius</span><span class="params">(<span class="type">float</span> maxRadius)</span> &#123;</span><br><span class="line">        mMaxRadius = maxRadius;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setClickX</span><span class="params">(<span class="type">float</span> clickX)</span> &#123;</span><br><span class="line">        mClickX = clickX;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setClickY</span><span class="params">(<span class="type">float</span> clickY)</span> &#123;</span><br><span class="line">        mClickY = clickY;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setDuration</span><span class="params">(<span class="type">int</span> duration)</span> &#123;</span><br><span class="line">        mDuration = duration;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setInterpolator</span><span class="params">(Interpolator interpolator)</span> &#123;</span><br><span class="line">        mInterpolator = interpolator;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setAnimationType</span><span class="params">(<span class="type">int</span> animationType)</span> &#123;</span><br><span class="line">        mAnimationType = animationType;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">        <span class="meta">@RippleView</span>.AnimationType <span class="type">int</span> <span class="variable">mAnimationType</span> <span class="operator">=</span> RippleView.ANIMATION_TYPE_SPREAD;</span><br><span class="line">        RippleAnimationController mController;</span><br><span class="line">        Interpolator mInterpolator;</span><br><span class="line">        Activity mActivity;</span><br><span class="line">        <span class="type">float</span> mMaxRadius;</span><br><span class="line">        <span class="type">float</span> mClickX;</span><br><span class="line">        <span class="type">float</span> mClickY;</span><br><span class="line">        <span class="type">int</span> mDuration;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Builder</span><span class="params">(Activity activity)</span> &#123;</span><br><span class="line">            mController = <span class="keyword">new</span> <span class="title class_">RippleAnimationController</span>();</span><br><span class="line">            mActivity = activity;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">setMaxRadius</span><span class="params">(<span class="type">float</span> maxRadius)</span> &#123;</span><br><span class="line">            mMaxRadius = maxRadius;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">setClickX</span><span class="params">(<span class="type">float</span> clickX)</span> &#123;</span><br><span class="line">            mClickX = clickX;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">setClickY</span><span class="params">(<span class="type">float</span> clickY)</span> &#123;</span><br><span class="line">            mClickY = clickY;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">setDuration</span><span class="params">(<span class="type">int</span> duration)</span> &#123;</span><br><span class="line">            mDuration = duration;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">setInterpolator</span><span class="params">(Interpolator interpolator)</span> &#123;</span><br><span class="line">            mInterpolator = interpolator;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">setAnimationType</span><span class="params">(<span class="meta">@RippleView</span>.AnimationType <span class="type">int</span> animationType)</span> &#123;</span><br><span class="line">            mAnimationType = animationType;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> RippleAnimationController <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">            mController.setAnimationType(mAnimationType);</span><br><span class="line">            mController.setInterpolator(mInterpolator);</span><br><span class="line">            mController.setMaxRadius(mMaxRadius);</span><br><span class="line">            mController.setActivity(mActivity);</span><br><span class="line">            mController.setDuration(mDuration);</span><br><span class="line">            mController.setClickX(mClickX);</span><br><span class="line">            mController.setClickY(mClickY);</span><br><span class="line">            <span class="keyword">return</span> mController;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>日夜间切换逻辑由RippleVIew控制，对外提供了RippleAnimationController来设置一些属性（动画时间、加速器等），并控制整个View显示和删除。当动画启动时，拿到Activity的根布局rootView</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">ViewGroup</span> <span class="variable">rootView</span> <span class="operator">=</span> (ViewGroup) mActivity.getWindow()</span><br><span class="line">         .getDecorView().findViewById(android.R.id.content);</span><br></pre></td></tr></table></figure><p>然后生成一个RippleView，启动动画即可。</p><h3 id="待优化"><a href="#待优化" class="headerlink" title="待优化"></a>待优化</h3><p>由于直接拿根布局View的bitmap，因此每次执行动画都消耗非常大的内存，如果是1080p（1080 X 1920）的屏幕则View-Bitmap大小为8b X 1080 X 1920 约为 8Mb，而中间又因为该bitmap有可能在还原根布局View状态时有可能被回收，为了保证不crash，RippleView又copy了一份bitmap，约为16Mb。</p><p>在运行过程中明显会有内存抖动，通过Android Monitors可以看到有一个尖波峰，动画结束后，又立马下降。后面会尽量考虑把中间copy那份bitmap去掉，但每次执行动画仍会分配8Mb，仍会出现内存抖动，暂时没有想到比较好的方案。</p><p>不过从真机来看，效果还是挺流畅的。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蚂蚁花呗如何运作？</title>
      <link href="/2017/08/15/Business-Model-Of-Ant-Huabei/"/>
      <url>/2017/08/15/Business-Model-Of-Ant-Huabei/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前和同事聊起了蚂蚁花呗，对于这种先使用后付费的商业模式非常好奇。为什么这样的模式也能赚到钱？后来思索了一下，发现其中确实有不少套路。</p><span id="more"></span><h3 id="运作流程"><a href="#运作流程" class="headerlink" title="运作流程"></a>运作流程</h3><ul><li><p>对商家收费是蚂蚁花呗整个商业逻辑成立的核心。<br>蚁花呗收商家1%费用，而大部分银行主推的信用卡才收0.6%。因为蚂蚁花呗是按月还钱的，对商家收费1%，均摊下来，约相当于12%的年利率，这已经算非常高了。</p></li><li><p>我们来举个简单的例子，你消费了一笔钱（假设1万元），蚂蚁花呗把你消费的这笔钱，打包拿到市场上卖，假设利率是6%，银行把它买下，然后再次发行，名字叫做XXX号明星理财产品，年化利率是5%，你看着利率还不错，赶紧花钱买下。</p></li><li><p>我们来看看这中间到底发生了什么？银行相当于空手套白狼，啥钱都不用出，轻轻松松赚利差。对于蚂蚁花呗来说为什么不独享这12%利率，而是要拿去卖呢？原因很简单，它没有那么多钱。而对于商家来说，表面上显然是一桩亏本买卖，那他们为什么还要卖呢（商家卖出100元，蚂蚁花呗要抽掉1块钱提成）？其实帐不能这么算，假设商家多卖一件商品可以得到5元的利润，那蚂蚁花呗抽掉1块钱提成，还有4块钱的利润，有何理由不卖呢？对用户来说，可以用来自未来的钱来解当下的燃眉之急，不用白不用。要知道，如果用户不消费，那不管是银行、蚂蚁花呗还是商家都得不到任何好处。所以蚂蚁花呗推出不仅仅为了刺激消费，还让各方都得到了好处，可谓一举多得。</p></li><li><p>把消费者的信贷消费公开发行，拿到市场上去卖，这种行为有个专业名词叫资产证券化，简称ABS(Asset-backed Securities)。ABS的出现，对于那些急需现金的企业来说是莫大的福音。ABS的性质决定了它的利率空间不能小于银行利息同时也不能大于银行贷款。因为如果利率空间小于银行利息（不如把钱放银行划算），那么不会有投资者去买，如果利率大于银行贷款，那么也不会有企业去买单（不如跟银行贷款划算）。当然资产证券化其实很早就出现了，只是非专业人士很少知道而已。</p></li><li><p>上述例子中讲得非常轻松，但是实际操作起来是很有技术含量的。比如怎么判断用户是否有资格提前消费？怎么知道用户能够提前消费多少钱？这又不得不提到蚂蚁金服的芝麻信用了。芝麻信用通过收集你的行为偏好、身份特质、履约能力、人脉关系、信用历史等，然后通过一套复杂算法，得出一个分数。这个分数代表你个人的信用，也很大程度上决定了你最终能够预支多少钱。整套系统运作模式大致如下图所示。</p></li></ul><p><img src="/2017/08/15/Business-Model-Of-Ant-Huabei/p1.png"></p><ul><li><p>如果要评出阿里近年来在金融上神来之笔，个人认为余额宝是其一，花呗也应该算一个。花呗不仅刺激了消费，带动提升阿里GMV，得到更多消费数据，又进一步完善芝麻信用，芝麻信用的完善，又可以在此基础上，开辟更多场景，为用户提供更多的服务（如蚂蚁借呗），用户在此基础上产生的数据又进一步完善芝麻信用，从而在阿里整个闭环生态中形成一个良性循环。</p></li><li><p>这里不得不多提一嘴阿里最新股市大涨，市值突破4000亿美元。阿里的擅长布局为业内所知，也正是由于这种高瞻远瞩的布局，使得阿里有非常大的上升空间。电商新零售、物流、云计算、金融，每一个都有很大的想象力。现在说阿里巴巴是一家伟大的公司还为时尚早，但是阿里的确是一家了不起的公司。</p></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><p><a href="http://money.163.com/16/0804/17/BTL3ILAG00253B0H.html">蚂蚁花呗上交所挂牌消费信贷ABS 利率3.6%同行最低</a></p></li><li><p><a href="http://www.yicai.com/news/5081170.html">用了那么久花呗和白条，你需要知道它们的“内幕”</a></p></li><li><p><a href="https://www.yangqiu.cn/gh_a6d5437e92fa/1348512.html">五分钟看懂资产证券化ABS是什么</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Thinking </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重新认识 View（一）</title>
      <link href="/2017/08/07/Hello-View-Again-One/"/>
      <url>/2017/08/07/Hello-View-Again-One/</url>
      
        <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>Android中View的重要性堪比四大组件，甚至有过之而无不及。View是Android提供给开发者呈现UI的方式。在越来越重视用户体验的时代，UI是App的门面，想要快速高效地做出各种炫酷页面，必须要了解Android-View的工作原理。</p><span id="more"></span><h3 id="2-View的绘制"><a href="#2-View的绘制" class="headerlink" title="2. View的绘制"></a>2. View的绘制</h3><p>想象一下，如果让你来设计一套UI系统，用户可以往屏幕上画各式各样的图案。你会怎么设计呢？类似于画画，首先，我们需要确定图案大小，其次我们需要确定图案的位置，最后我们可能需要确定用什么颜色去画。这个过程其实和Android中View的绘制过程相差无几。View的绘制过程也会经历onLayout(位置)、onMesure(大小)、onDraw(着色)三个流程。</p><h4 id="2-1-measure过程"><a href="#2-1-measure过程" class="headerlink" title="2.1 measure过程"></a>2.1 measure过程</h4><p>measure过程有一个重要你的类MeasureSpec，通过这个类把一个int类型数据解包出View测量的模式和View绘制的大小.View的测量模式有三种</p><ul><li><p>EXACTLY<br>当View的layout_width或layout_height属性为match_parent或者固定值时，就是EXACTLY模式(如layout_width&#x3D;”20dp”或layout_width&#x3D;”match_parent”)</p></li><li><p>AT_MOST<br>当View的layout_width或layout_height属性为wrap_content时便是使用AT_MOST模式</p></li><li><p>UNSPECIFIED<br>不常见，View想要多大给多大。通常在自定义View才能使用得到。<br>注意：自定义View时，如果想要View支持wrap_content的方式，必须重写onMeasure方法，并返回默认值，否则在布局中使用wrap_content相当于match_parent。具体原因可以看ViewGroup.getChildMeasureSpec。wrap_conten模式下的SpecMode为AT_MOST，此时childSize就是parentSize。</p></li></ul><h4 id="2-2-layout过程"><a href="#2-2-layout过程" class="headerlink" title="2.2 layout过程"></a>2.2 layout过程</h4><p>layout主要是确定View在父控件中的位置，因为不同的控件layout方法不同，所以在View和ViewGroup中并没有真正实现onLayout方法，而是交给子类去实现。layout过程中会通过setFrame方法确定View四个顶点(mLeft、mTop、mRight、mBottom)位置，此时View的大小和位置便确定下来。</p><h4 id="2-3-draw过程"><a href="#2-3-draw过程" class="headerlink" title="2.3 draw过程"></a>2.3 draw过程</h4><p>draw过程相对简单，主要在前两步基础上在固定位置、画相应大小的图形即可。</p><ul><li>画背景background.draw(canvas)</li><li>画View本身 View.onDraw</li><li>画子View (dispatchDraw)</li><li>画其他(onDrawScrollBars)</li></ul><h3 id="3-自定义View常用方法"><a href="#3-自定义View常用方法" class="headerlink" title="3. 自定义View常用方法"></a>3. 自定义View常用方法</h3><ul><li><p>继承View 重写onMesure、onLayout、onDraw方法</p></li><li><p>继承系统View实现自定义效果(如继承TextView更改字体继承ViewGroup实现竖向ViewPager等等)，这是一种非常常见的自定义View方式</p></li><li><p>使用继承FrameLayout，然后使用View.inflate()添加自定义布局，这种适合封装成通用控件（如App的搜索框）</p></li></ul><h3 id="4-View的事件分发"><a href="#4-View的事件分发" class="headerlink" title="4. View的事件分发"></a>4. View的事件分发</h3><p>当一个事件MotionEvent产生后，系统需要把事件传递给各个View.其分发机制需要靠三个方法完成</p><ul><li>public boolean dispatchTouchEvent(MotionEvent ev) 用来传递View事件，如果事件能够传递到本View，则该方法一定会调用</li><li>public boolean onInterceptTouchEvent(MotionEvent ev) 表示在事件分发过程中，是否要拦截事件，如果拦截事件，则会调用本View的onTouchEvent方法</li><li>public boolean onTouchEvent(MotionEvent) 处理事件，如果该方法返回true，表示该事件已经被处理，不会再传递给下面的子view.<br>对于每一个层级的View来说，基本上都会走如下流程：<br>  先判断本View需不需要拦截View事件，如果需要拦截，则走到本View.onTouchEvent方法中如果不需要，则继续分发事件给子View.</li></ul><p>其伪代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> !onInterceptTouchEvent(ev) ? <span class="built_in">this</span>.onTouchEvent(ev) : child.dispatchTouchEvent(ev);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举个更形象的例子，假设公司只有三个人，CEO，Manager（你上司）、你，来了个活，CEO看了一下，这事so easy，交给下面的人办就可以了(onInterceptTouchEvent()&#x3D;false)，先把这活分给(dispatch)经理，经理也觉得这活比较简单，也直接(dispatch)给你了，这活给了你以后，你没有下属了，只能是自己来处理了（这也是View没有onInterceptTouchEvent方法和onTouchEvent默认返回true的原因之一）。如果你发现你自己仍然不能处理好该活(onTouchEvent&#x3D;false)，那只能继续上报你的经理，如果经理能处理(onTouchEvent&#x3D;true)，则不用再继续上报给CEO，自己处理就好了。</p><p>在另外一种场景之下，如果在事件分发阶段，CEO或者经理发现这事不需要下面的人去解决，自己搞定的话，只需把<strong>onInterceptTouchEvent() &#x3D; true</strong>，然后在自己的**onTouchEvent()**方法中处理该事件即可。</p><p>事件总是先传递到Activity，Activity再传递到window，经由window传递给view，如果事件传递过程中，中间没有任何对象消费掉该事件，则最后由Activity来处理(Activity.onTouchEvent)</p><p><img src="/2017/08/07/Hello-View-Again-One/p1.png"></p><h3 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h3><p>《Android开发艺术探索》<br>《Android群英传》</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图论算法专题之最短路径</title>
      <link href="/2017/08/03/Algorithm-Of-Single-Source-Shortest-Path/"/>
      <url>/2017/08/03/Algorithm-Of-Single-Source-Shortest-Path/</url>
      
        <content type="html"><![CDATA[<p>作者：jasonkent27<br>转载请注明出处：<a href="http://www.cnblogs.com/jasonkent27">www.cnblogs.com/jasonkent27</a></p><h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><h4 id="1-1-最短路引入"><a href="#1-1-最短路引入" class="headerlink" title="1.1 最短路引入"></a>1.1 最短路引入</h4><p>小明和小天现在住在海口(C1)，他们俩计划暑假到三亚(C4)玩一趟，在海口和三亚之间有许多中间城市（文昌，临高，乐东，万宁…）图中的边上的数字是他们到达该城市必须的花费，现在需要你帮他们俩找出一条从海口到三亚的最省钱的路径出来。</p><span id="more"></span><p><img src="/2017/08/03/Algorithm-Of-Single-Source-Shortest-Path/p1.png"></p><p>等等，图中的边的weight怎么会有负的呢？你暂且可以这么理解吧。图中的边上的weight可以当作他们旅途中必须的花费，但是他们俩在去三亚图中把钱花光了(真是败家)不得不通过搬砖赚钱，通过搬砖赚的钱不仅抵掉他们应该的花费，而且还赚了点小钱(但是他们不能一直搬砖啊，不然他们早就累挂了，哪里还能去玩)。</p><h4 id="1-2-松弛技术"><a href="#1-2-松弛技术" class="headerlink" title="1.2 松弛技术"></a>1.2 松弛技术</h4><p><strong>对于每个节点v,我们用dist[v] 来表示原点s到v的估算距离，用delta(s,v)表示s到v的最短距离</strong></p><p>对边进行松弛操作的过程如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">relax</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( dist[v]&gt; dist[u] + w )</span><br><span class="line">      dist[v] = dist[u] + w ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-初始化"><a href="#1-3-初始化" class="headerlink" title="1.3 初始化"></a>1.3 初始化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">init</span><span class="params">(<span class="type">int</span> v0)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> ; i &lt;= n ; i ++)</span><br><span class="line">        dist[i] = infinity ;</span><br><span class="line">    dist[v0] = <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-最短路径的几个性质"><a href="#2-最短路径的几个性质" class="headerlink" title="2. 最短路径的几个性质"></a>2. 最短路径的几个性质</h3><ul><li><p>最短路径具有最优子结构性质</p></li><li><p>路径松弛性质</p></li><li><p>上界性质</p></li><li><p>收敛性质</p></li><li><p>最短路径一定是简单路径<br>这几条性质是后面最短路算法的数学依据，如果想要彻底理解最短路的算法，有必要对其深究</p></li></ul><h4 id="2-1-最短路径的最优子结构性质"><a href="#2-1-最短路径的最优子结构性质" class="headerlink" title="2.1 最短路径的最优子结构性质"></a>2.1 最短路径的最优子结构性质</h4><p>即最短路径的子路径也是最短路径<br>简单证明：如果最短路径P的子路径不是最短路径，则可以找到一条更短的路径使得P更短，这与P是最短路径不符.</p><h4 id="2-2-路径松弛性质"><a href="#2-2-路径松弛性质" class="headerlink" title="2.2 路径松弛性质"></a>2.2 路径松弛性质</h4><p>如果P&#x3D;是从源点s&#x3D;v0到vk的一条最短路径，并且我们对P中的边所进行松弛的次序为(v0,v1),(v1,v2), …, (vk-1,vk)，则dist[vk] &#x3D; delta(s,vk)，why?<br>我们可以用归纳法进行证明：<br>1.当v &#x3D; s,时 dist[v] &#x3D; delta(s,s) &#x3D; 0，显然成立<br>2.假设当v &#x3D; vk-1时，dist[v] &#x3D; delta(s,v) &#x3D; delta(s,vk-1)成立，如果我们能推出dist[vk] &#x3D; delta(s,vk)，则命题成立。<br>因为<br>dist[vk] &gt;&#x3D; dist[vk-1] + w(vk-1,vk)<br>&#x3D; delta(s,vk-1) + w(vk-1,vk)<br>&#x3D; delta(s,vk) (收敛性质)<br>则原命题也是成立的.</p><h4 id="2-3-上界性质"><a href="#2-3-上界性质" class="headerlink" title="2.3 上界性质"></a>2.3 上界性质</h4><p>对于所有节点v, 有dist[v] &gt;&#x3D; delta(s,v)，且当dist[v]&#x3D;delta(s,v)之后，dist[v]的值不会再变化.<br>此性质亦可用归纳法证明：<br>1.进行init(v0)后，显然满足对所有v, dist[v] &gt;&#x3D; delta(s,v)<br>2.假设松弛前,对所有v, dist[v] &gt;&#x3D; delta(s,v)，我们只要再证明松弛后，该性质也成立，则原命题即能成立_</p><h4 id="2-4-收敛性质"><a href="#2-4-收敛性质" class="headerlink" title="2.4 收敛性质"></a>2.4 收敛性质</h4><p>假设s–&gt;u–&gt;v为s–&gt;v的一条最短路径，在某个时刻dist[u] &#x3D; delta(s,u)，则在边(u,v)松弛之后有dist[v] &#x3D; delta(s,v)<br>证明：在边松弛之后应该有<br>dist[v] &lt;&#x3D; dist[u] + w(u,v)<br>&#x3D; delta(s,u) + w(u,v)<br>&#x3D; delta(s,v) （最短路最优子结构性质）<br>而根据上界性质，dist[v] &gt;&#x3D; delta(s,v)，因此dist[v] &#x3D; delta(s,v)_</p><h4 id="2-5-最短路径一定是简单路径"><a href="#2-5-最短路径一定是简单路径" class="headerlink" title="2.5 最短路径一定是简单路径"></a>2.5 最短路径一定是简单路径</h4><p>why？为何最短路径一定是简单路径（即无环）<br>理由如下：假设最短路径有环，则有以下三种情况：<br>1.正环，然后去掉正环会使最短路径更短，不符合<br>2.零环，零环对最短路径没有影响，可以去掉<br>3.负环，如果存在负环，则不会有最短路径，因为我循环一圈都可以是u到v的路径更短._</p><h3 id="3-Bellman-Ford算法"><a href="#3-Bellman-Ford算法" class="headerlink" title="3. Bellman-Ford算法"></a>3. Bellman-Ford算法</h3><h4 id="3-1-算法思路"><a href="#3-1-算法思路" class="headerlink" title="3.1 算法思路"></a>3.1 算法思路</h4><p>Bellman-Ford算法通过不断构建以源点为根的最短路径树，不断扩展.<br>简单来说，先找出，扩展一条边，源点到达其他节点的最短路径，再找出扩展两条边，源点到达其他节点的最短路径，以此类推，找到通过扩展n-1条边，源点到达其他节点的最短路径，算法完毕。因为我们知道最短路径是简单路径，因此它无环，所以它最多有n-1条边.算法思路类似bfs.其正确性可以用路径松弛性质证明.</p><p>示意图如下（图片来自算法导论）：</p><p><img src="/2017/08/03/Algorithm-Of-Single-Source-Shortest-Path/p2.png"></p><p>先是从s扩展一条边，可以达到t,y(图b)，此时我们知道，在只扩展一条边的前提下，s到t,y的最短路径分别是dist[t],dist[y]，然后再通过t,y继续扩展边(图c)，这时我们有，在只扩展两条边的前提下，s到x,z的最短路径分别是dist[x],dist[z]。当然有个前提假设是s到其他节点都有最短路径.看看整个过程有没有觉得特别像通过bfs找最短路的过程.</p><h4 id="3-2-算法伪代码"><a href="#3-2-算法伪代码" class="headerlink" title="3.2 算法伪代码"></a>3.2 算法伪代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">bool <span class="title function_">Bellman_Ford</span><span class="params">(<span class="type">int</span> v0)</span></span><br><span class="line">&#123;</span><br><span class="line">    init(v0) ;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span> ; i&lt;=n-<span class="number">1</span> ; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span> ; j&lt;=m ; j++)</span><br><span class="line">        relax(edge[j].u,edge[j].v,edge[j].w);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span> ; i&lt;=m ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> edge[i].u ;</span><br><span class="line">        <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> edge[i].v ;</span><br><span class="line">        <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> edge[i].w ;</span><br><span class="line">        <span class="keyword">if</span> (dist[v] &gt; dist[u] + w)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-SPFA算法"><a href="#4-SPFA算法" class="headerlink" title="4. SPFA算法"></a>4. SPFA算法</h3><h4 id="4-1-算法思想"><a href="#4-1-算法思想" class="headerlink" title="4.1 算法思想"></a>4.1 算法思想</h4><p>我们可以轻松知道Bellman-Ford算法的时间复杂度是O(nm)的，我们再想想，是不是每次都需要对M条边进行松弛操作的，显然没必要，而且我们发现如果在某次循环中，发现对M条不管怎么relax，dist数组都不会变化，那么算法就可以停止了(上界性质).SPFA算法就是在这2点上对Bellman-Ford算法进行优化的。SPFA算法时间复杂度为O(qm)，其中q远远小于n.在实战中有不错的效率，不过可以造出让SPFA效率低的数据。因此在如果题目没有负边，个人倾向于基于优先队列实现的Dijkstra算法.</p><h4 id="4-2-算法伪代码"><a href="#4-2-算法伪代码" class="headerlink" title="4.2 算法伪代码"></a>4.2 算法伪代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">SPFA</span><span class="params">(<span class="type">int</span> v0)</span></span><br><span class="line">&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q ;</span><br><span class="line">    init(v0) ;</span><br><span class="line">    q.push(v0) ;</span><br><span class="line">    inq[v0] = <span class="literal">true</span> ;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> q.front(); q.pop();</span><br><span class="line">        inq[u] = <span class="literal">false</span> ;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span> ; i&lt;=n ; i++) <span class="comment">//此处若用邻接表则更快</span></span><br><span class="line">        <span class="keyword">if</span> (g[u][i] !=<span class="number">0</span> &amp;&amp; dist[i] &gt; dist[u]+g[u][i])</span><br><span class="line">        &#123;</span><br><span class="line">            dist[i] = dist[u]+g[u][i] ;</span><br><span class="line">            <span class="keyword">if</span> (inq[i] == <span class="literal">false</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                q.push(i);</span><br><span class="line">                inq[i] = <span class="literal">true</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-Dijkstra算法"><a href="#5-Dijkstra算法" class="headerlink" title="5. Dijkstra算法"></a>5. Dijkstra算法</h3><h4 id="5-1-算法思路"><a href="#5-1-算法思路" class="headerlink" title="5.1 算法思路"></a>5.1 算法思路</h4><p>维护集合U,用来保存那些已经计算过最短路的节点即dist[v] &#x3D; delta(s,v)的节点，不断增大集合U,直到U包含图中所有节点.<br>1.选出V-U集合中最小的dist[x]<br>2.把x加入到U中<br>3.用dist[x]去更新所有V-U集合的所有节点dist值，(U集合中的dist值已经达到下限delta(s,v)了，没必要再更新)</p><h4 id="5-2-算法伪代码"><a href="#5-2-算法伪代码" class="headerlink" title="5.2 算法伪代码"></a>5.2 算法伪代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">Dijkstra</span><span class="params">(<span class="type">int</span> v0)</span></span><br><span class="line">&#123;</span><br><span class="line">    init(v0) ;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span> ; i&lt;=n-<span class="number">1</span> ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        min = infinity ;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span> ; j&lt;=n ; j++)</span><br><span class="line">            <span class="keyword">if</span> (!inq[j] &amp;&amp; dist[j]&lt;min)</span><br><span class="line">            &#123;</span><br><span class="line">                min = dist[j] ;</span><br><span class="line">                k = j ;</span><br><span class="line">            &#125;</span><br><span class="line">        inq[k] = <span class="literal">true</span> ;    </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span> ; j&lt;=n ; j++)</span><br><span class="line">            <span class="keyword">if</span> (!inq[j] &amp;&amp; dist[j]&gt;dist[k]+g[k][j])</span><br><span class="line">                dist[j]&gt;dist[k]+g[k][j] ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3-算法理解"><a href="#5-3-算法理解" class="headerlink" title="5.3 算法理解"></a>5.3 算法理解</h4><p>算法执行过程</p><p><img src="/2017/08/03/Algorithm-Of-Single-Source-Shortest-Path/p3.png"></p><p>1.首先从V-U集合中选出dist值最小的节点s(图a)，然后拿它去更新其他节点(图b)<br>2.把节点s加入到U集合中<br>3.不断重复此过程，直到U&#x3D;V位置(图c,d,e,f)</p><p>要证明算法的正确性，我们只需要证明当节点u加入到集合U时，有dist[u]&#x3D;delta(s,u)即可.<br>用反证法：假设u是第一个加入到集合U时，满足dist[u] !&#x3D; delta(s,u)的节点.<br>由于节点s是第一个加入到集合U的，并且有dist[s] &#x3D; delta(s,s)&#x3D;0，因此节点u与节点s必然不同，因此一定存在某条从节点s到节点u的路径，否则dist[u] &#x3D; infinity，是不会被选入集合U中的.因为至少存在一条从s到u的路径，因此也存在一条从s到u的最短路径.</p><p><img src="/2017/08/03/Algorithm-Of-Single-Source-Shortest-Path/p4.png"></p><p>考虑这样一条路径s—-&gt;x–&gt;y—-&gt;u，其中,s,x在集合U中，y，u在V-U集合中，</p><ul><li><p>因为x在u加入之前就已经加入到U集合中了，因此有dist(x) &#x3D; delta(s,x)，而x是y前驱，对边(x,y) relax后，有dist[y] &#x3D; &gt; delta(s,y)(收敛性质)</p></li><li><p>因为y是u的前驱，且边权值非负，因此有dist[y] &#x3D; delta(s,y) &lt;&#x3D;delta(s,u)&lt;&#x3D;dist[u].</p></li><li><p>另外，算法选择u节点放进集合U的前提是u是所有V-U集合中dist值最小的，因此有dist[y] &gt;&#x3D; dist[u].<br>综上，有dist[y] &#x3D; dist[u] &#x3D; delta(s,u).这与假设dist[u] !&#x3D; delta(s,u)不符.因此原命题是成立的.</p></li></ul><h3 id="6-floyd算法"><a href="#6-floyd算法" class="headerlink" title="6. floyd算法"></a>6. floyd算法</h3><h4 id="6-1-算法引入"><a href="#6-1-算法引入" class="headerlink" title="6.1 算法引入"></a>6.1 算法引入</h4><p>floyd算法用来求图中任意点对之间的最短路径.将floyd算法之前我们先来看看另外一个用O(V^4)来解决图中任意点对之间最短路径的算法。</p><p>通过前面的知识我们知道，任意两个节点之间的最短路径无非就两种情况</p><ul><li>i, j 直接相连</li><li>i, j 间接相连<br>若是直接相连，则delta(i,j) &#x3D; g[i][j] ;<br>若间接相连，设其路径为i——&gt;k–&gt;j(k为j前驱)，则有delta(i,j) &#x3D; delta(i,k) + g[k]<a href="%E6%94%B6%E6%95%9B%E6%80%A7%E8%B4%A8">j</a><br>我们定义dist[m][i][j] 表示最多可以通过m条边,节点i,j之间的最短距离，则有<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dist[m][i][j] = min(dist[m-1][i][j],dist[m-1][i][k] + g[k][j]) = min(dist[m-1][i][k] + g[k][j])，其中1&lt;=k&lt;=V，dist[0][i][j] = g[i][j]</span><br></pre></td></tr></table></figure>伪代码如下<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">Shortest_Path_Pair</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> <span class="number">1</span> ; u&lt;=n-<span class="number">1</span> ; u++) <span class="comment">//因为最短路最多只有n-1条边</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span> ; i&lt;=n ; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span> ; j&lt;=n ;j++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k=<span class="number">1</span> ; k&lt;=n ; k++)</span><br><span class="line">        <span class="comment">//当然此处dist[u][i][j]可以降维成dist[i][j].</span></span><br><span class="line">        dist[u][i][j] = min(dist[u-<span class="number">1</span>][i][j],dist[u-<span class="number">1</span>][i][k]+g[k][j]) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="6-2-算法思路"><a href="#6-2-算法思路" class="headerlink" title="6.2 算法思路"></a>6.2 算法思路</h4><p>OK，热身结束！我们来看看floyd算法，上面算法类似于Bellman_Ford,他们都是从路径中边的性质来考虑的。现在我们换个思路，从中间节点开始考虑，考虑节点i,j间最短路径p与中间节点均取自{1,2,…,k-1}的关系.</p><ul><li><p>如果节点k不是路径p上的中间节点，则节点i,j路径上的中间节点均取自{1,2,…,k-1}的最短路径也是节点i,j路径上的中间节点均取自{1,2,…,k}的最短路径</p></li><li><p>如果节点k是路径p上的中间节点，则我们可以把路径分解成i—&gt;k—&gt;j，对于路径i–&gt;k，其路径上的节点也肯定全部来自{1,2,…,k-1}，因为k不是路径i–&gt;k的中间节点，路径k–&gt;j同理,看下图:</p></li></ul><p><img src="/2017/08/03/Algorithm-Of-Single-Source-Shortest-Path/p5.png"></p><p>因此我们可以定义d[k][i][j] 表示i,j之间节点编号最大为k时的最短距离，我们有<br>d[k][i][j] &#x3D; min(d[k-1][i][j], d[k-1][i][k]+d[k-1][k][j])<br>当然d[k][i][j]也是可以降维成d[i][j].其中1&lt;&#x3D;k&lt;&#x3D;V，d[0][i][j] &#x3D; g[i][j].</p><h4 id="6-3-伪代码"><a href="#6-3-伪代码" class="headerlink" title="6.3 伪代码"></a>6.3 伪代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">Floyd</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span> ; i&lt;=n ; k++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i&lt;=n ; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span> ; j&lt;=n ; j++)</span><br><span class="line">            <span class="keyword">if</span> (d[i][j] &gt; d[j][k] + d[k][j])</span><br><span class="line">                d[i][j] = d[j][k] + d[k][j] ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>本文对求最短路径的几种基本算法做了简单的讲解，力求做到简单，易懂，更严格的算法正确性的证明可以查阅参考书目，文中有任何错误之处请指出，我会尽快改正.另外有何问题，欢迎留言讨论.</p><h3 id="参考书目"><a href="#参考书目" class="headerlink" title="参考书目"></a>参考书目</h3><p>《算法导论》 第三版</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 最短路径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记（二） - 《编码：隐藏在计算机背后的语言》</title>
      <link href="/2017/07/09/Notes-2-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/"/>
      <url>/2017/07/09/Notes-2-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/</url>
      
        <content type="html"><![CDATA[<h3 id="程序的产生"><a href="#程序的产生" class="headerlink" title="程序的产生"></a>程序的产生</h3><p>接上一篇：<a href="https://nancyyihao.github.io/2017/07/09/Notes-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/">笔记（一） - 《编码：隐藏在计算机背后的语言》</a>，为了能够自动化操作我们的加法计算器，本文介绍了如何通过程序化的方法解决计算操作自动化问题。</p><span id="more"></span><p>摘自书籍第17章。</p><p><img src="/2017/07/09/Notes-2-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p22.png"><br><img src="/2017/07/09/Notes-2-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p23.png"><br><img src="/2017/07/09/Notes-2-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p24.png"><br><img src="/2017/07/09/Notes-2-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p25.png"><br><img src="/2017/07/09/Notes-2-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p26.png"><br><img src="/2017/07/09/Notes-2-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p27.png"><br><img src="/2017/07/09/Notes-2-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p28.png"><br><img src="/2017/07/09/Notes-2-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p29.png"><br><img src="/2017/07/09/Notes-2-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p30.png"><br><img src="/2017/07/09/Notes-2-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p31.png"><br><img src="/2017/07/09/Notes-2-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p32.png"><br><img src="/2017/07/09/Notes-2-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p33.png"><br><img src="/2017/07/09/Notes-2-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p34.png"><br><img src="/2017/07/09/Notes-2-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p35.png"><br><img src="/2017/07/09/Notes-2-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p36.png"><br><img src="/2017/07/09/Notes-2-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p37.png"><br><img src="/2017/07/09/Notes-2-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p38.png"><br><img src="/2017/07/09/Notes-2-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p39.png"><br><img src="/2017/07/09/Notes-2-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p40.png"><br><img src="/2017/07/09/Notes-2-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p41.png"><br><img src="/2017/07/09/Notes-2-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p42.png"><br><img src="/2017/07/09/Notes-2-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p43.png"></p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记（一） - 《编码：隐藏在计算机背后的语言》</title>
      <link href="/2017/07/09/Notes-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/"/>
      <url>/2017/07/09/Notes-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/</url>
      
        <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>最近一周，陆陆续续把《编码：隐藏在计算机背后的语言》看完了。不得不佩服作者深厚的计算机功底，更佩服作者能把抽象的计算机硬件和软件说得如此明白，透彻。通过简单小故事入手，深处浅出，娓娓道来。佩服的同时也在感叹，为啥这样一本好书，竟从没在计算机类书籍TOP100榜单中出现过。不可否认，如今的大部分程序员几乎不需要详细知道计算机底层相关知识也能把手头的工作做完，但知道了底层原理更能让我们如虎添翼，比别人走得更远。</p><span id="more"></span><h3 id="2-梗概"><a href="#2-梗概" class="headerlink" title="2. 梗概"></a>2. 梗概</h3><h4 id="2-1-信息的编码和传递"><a href="#2-1-信息的编码和传递" class="headerlink" title="2.1 信息的编码和传递"></a>2.1 信息的编码和传递</h4><p>作者从两个10岁小孩通信需求出发，讲述了他们如何利用手电筒和自定义的编码规则互相通信。一个简单的例子就是通过手电筒闪一次代表A，闪两次代表B，一次类推，闪26次代表Z，那么，如果要传送”HOW ARE YOU”，只需要闪相应次数即可。当然，每个字母闪完后，再闪下一个字母前，时间间隔要稍有不同，否则就没法分辨出此次闪是属于当前字母的还是下一个字母的。在这个例子中，其实涉及到了两个概念，信息的编码和解码：发送方和接收方事先定义好某些行为和某些含义的对应关系（映射表），发送方通过发送某些行为给接收方，接收方通过行为关系映射表便可查出发送方要传递的含义。莫尔斯电报机干的其实就是这事：发送端发送点和划，接收方通过下图解码还原出信息。</p><p><img src="/2017/07/09/Notes-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p1.png" alt="图1"></p><h4 id="2-2-电报机的原理"><a href="#2-2-电报机的原理" class="headerlink" title="2.2 电报机的原理"></a>2.2 电报机的原理</h4><p>电报机的原理基于电磁现象：如果你取一只铁棒，用细导线将它绕几百圈，然后让电流通过导线，铁棒变成了磁铁， 这时它就能吸引其他的铁和钢。移开电流，铁棒的磁性消失。</p><p><img src="/2017/07/09/Notes-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p2.png" alt="图2"></p><p><img src="/2017/07/09/Notes-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p3.png" alt="图3"></p><h4 id="2-3-继电器的发明"><a href="#2-3-继电器的发明" class="headerlink" title="2.3 继电器的发明"></a>2.3 继电器的发明</h4><p>电报机的发明极大地拓宽了人们传递信息的方式。但是电报机也有个很大的缺陷：当传输距离过长时，信号会变弱甚至失真。因此需要继电器：将上一个电报机发过来的信息再次发送出去。继电器是一个伟大的发明，通过继电器可以构造出一台计算机的大多数部件。</p><p><img src="/2017/07/09/Notes-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p4.png" alt="图4"></p><h4 id="2-4-继电器与逻辑门电路"><a href="#2-4-继电器与逻辑门电路" class="headerlink" title="2.4 继电器与逻辑门电路"></a>2.4 继电器与逻辑门电路</h4><h5 id="2-4-1-与门"><a href="#2-4-1-与门" class="headerlink" title="2.4.1 与门"></a>2.4.1 与门</h5><p><img src="/2017/07/09/Notes-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p5.png"></p><h5 id="2-4-2-或门"><a href="#2-4-2-或门" class="headerlink" title="2.4.2 或门"></a>2.4.2 或门</h5><p><img src="/2017/07/09/Notes-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p6.png"></p><h5 id="2-4-3-非门"><a href="#2-4-3-非门" class="headerlink" title="2.4.3 非门"></a>2.4.3 非门</h5><p><img src="/2017/07/09/Notes-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p7.png"></p><p>与或非是电路中最基础的三个电路，通过与或非可以组合出其他XOR、NAND、NOR等电路</p><h4 id="2-5-二进制计算机"><a href="#2-5-二进制计算机" class="headerlink" title="2.5 二进制计算机"></a>2.5 二进制计算机</h4><h5 id="2-5-1-加法"><a href="#2-5-1-加法" class="headerlink" title="2.5.1 加法"></a>2.5.1 加法</h5><p><img src="/2017/07/09/Notes-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p8.png"><br><img src="/2017/07/09/Notes-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p9.png"></p><h5 id="2-5-2-减法"><a href="#2-5-2-减法" class="headerlink" title="2.5.2 减法"></a>2.5.2 减法</h5><p>减法的原理十分巧妙，利用了补码的思想 ：减去一个数等于加上一个数的补码。对于无符号数来说，补码就是直接取反。所以减法计算器核心部件也是加法计算器，电路图如下：<br><img src="/2017/07/09/Notes-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p10.png"></p><h4 id="2-6-触发器"><a href="#2-6-触发器" class="headerlink" title="2.6 触发器"></a>2.6 触发器</h4><p>2.6.1 振荡器电路<br>思考一下如下电路：这幅图似乎在演示一种逻辑矛盾，反向器的输出是和其输入相反的，但是在这里，其输 出同时又是其输入。需要特别指出的是，反向器实际上是一个继电器，而继电器从一个状态 转换到另一个状态是需要时间的。所以，即使输入和输出是相等的，输出也会很快地改变， 成为输入的倒置。电路的输出是什么呢？其实就是提供电压和不提供电压之间的变换。或者说输出要么是 0， 要么是1。<br><img src="/2017/07/09/Notes-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p11.png"></p><p><img src="/2017/07/09/Notes-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p12.png"></p><p>2.6.2 触发器电路</p><p><img src="/2017/07/09/Notes-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p13.png"><br><img src="/2017/07/09/Notes-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p14.png"></p><p>触发器可以保存信息的这个特性使得它变成一个非常关键的工具。</p><p><img src="/2017/07/09/Notes-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p15.png"></p><p><img src="/2017/07/09/Notes-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p16.png"></p><h4 id="2-7-存储器"><a href="#2-7-存储器" class="headerlink" title="2.7 存储器"></a>2.7 存储器</h4><p>在2.6章节我们已经知道怎么使用D触发器来保存一位数据了，接下来我们就通过扩展来保存更多的信息</p><p><img src="/2017/07/09/Notes-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p17.png"></p><p>2.7.1 选择器</p><p><img src="/2017/07/09/Notes-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p18.png"></p><p>2.7.2 译码器和完整电路</p><p><img src="/2017/07/09/Notes-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p19.png"></p><p>扩展方式（1）：</p><p><img src="/2017/07/09/Notes-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p20.png"></p><p>扩展方式（2）：</p><p><img src="/2017/07/09/Notes-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/p21.png"></p><h4 id="2-8-程序的产生"><a href="#2-8-程序的产生" class="headerlink" title="2.8 程序的产生"></a>2.8 程序的产生</h4><p>由于篇幅太长，特意重新写了一篇，请看这里：<a href="https://nancyyihao.github.io/2017/07/09/Notes-2-about-Code-The-Hidden-Language-Of-Computer-Hardware-and-Software/">笔记（二）</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>从手电筒传递信息到莫尔斯电报机再到当今的计算机，虽然古老的传递方式已经废弃，触发器和继电器也不再应用于计算机当中，计算机技术的发展也日新月异，但是万变不离其宗，读了此书后，更加了解了计算机的本质，强烈推荐！</p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义Gradle插件（二）</title>
      <link href="/2017/06/27/AspectJ-with-android-Transform-API/"/>
      <url>/2017/06/27/AspectJ-with-android-Transform-API/</url>
      
        <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>本文在上一篇自定义gradle插件（一）的基础上，通过使用Android提供的transform-API和ApsectJ代码插桩，完成Android统计主线程方法耗时功能。</p><span id="more"></span><h3 id="2-思路分析"><a href="#2-思路分析" class="headerlink" title="2. 思路分析"></a>2. 思路分析</h3><p>如果使用传统方法，需要在每个方法的开始和结束的地方分别打点，这个工作量太大，显然不可行。而通过AspectJ强大的代码注入功能，可以让我们方便地对方法进行操作。</p><p>如何定制自己的transform可以查看参考</p><ul><li><a href="https://afterecho.uk/blog/create-a-standalone-gradle-plugin-for-android-part-4-the-transform-api.html">Create a Standalone Gradle plugin for Android - part 4 - the transform api</a></li><li><a href="http://google.github.io/android-gradle-dsl/javadoc/current/">Android Gradle API</a></li><li><a href="http://tools.android.com/tech-docs/new-build-system/transform-api">transform-API</a></li></ul><p>对AspectJ不熟悉的可以参考</p><ul><li><a href="http://blog.csdn.net/zl3450341/article/category/1169602">跟我学AspectJ</a></li></ul><p>有了这个基础，就可以打印所有线程方法的执行时间了。对于主线程，只需根据线程ID过滤一下即可。不过使用AspectJ会导致方法数增加一倍，具体为何，后面会提到。</p><h3 id="3-编写代码"><a href="#3-编写代码" class="headerlink" title="3. 编写代码"></a>3. 编写代码</h3><p>定制自己的transform大致可以分为两步：</p><ol><li>编写一个继承Transform的类</li><li>在Plugin的apply方法中调用project.registerTransform(transform)</li></ol><h4 id="3-1-编写transform继承类"><a href="#3-1-编写transform继承类" class="headerlink" title="3.1 编写transform继承类"></a>3.1 编写transform继承类</h4><p>需要覆写几个方法</p><ul><li>transform() 操作入口</li><li>getName() 名称</li><li>getInputTypes() 输入类型</li><li>getScopes() 作用域</li><li>isIncremental() 是否使用增量编译<br>先判断配置文件中是否需要代码插桩，若需要，则先进行插桩，否则直接输出源文件即可。部分代码如下<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AspectjTransform</span> <span class="keyword">extends</span> <span class="title class_">Transform</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String ASPECTJ_RUNTIME = <span class="string">&quot;aspectjrt&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">void</span> transform(Context context, Collection&lt;TransformInput&gt; inputs,</span><br><span class="line">                   Collection&lt;TransformInput&gt; referencedInputs,</span><br><span class="line">                   TransformOutputProvider outputProvider, <span class="type">boolean</span> isIncremental) <span class="keyword">throws</span> IOException, TransformException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">// clean</span></span><br><span class="line">        <span class="keyword">if</span> (!isIncremental) &#123;</span><br><span class="line">            outputProvider.deleteAll()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (hasAjcRunTime(inputs)) &#123;</span><br><span class="line">            doAspectTransform(outputProvider, inputs)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            doNoThing(outputProvider, inputs)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">void</span> doAspectTransform(TransformOutputProvider outputProvider,</span><br><span class="line">                                   Collection&lt;TransformInput&gt; inputs) &#123;</span><br><span class="line">        AspectjWeave aspectjWeave = <span class="keyword">new</span> AspectjWeave(project)</span><br><span class="line">        <span class="comment">// step 1: read config from project.</span></span><br><span class="line">        List&lt;String&gt; includeJar = project.extensions.aspectj.includeJarFilter</span><br><span class="line">        List&lt;String&gt; excludeJar = project.extensions.aspectj.excludeJarFilter</span><br><span class="line">        <span class="keyword">for</span> (TransformInput <span class="attr">transformInput :</span> inputs) &#123;</span><br><span class="line">            <span class="keyword">for</span> (DirectoryInput <span class="attr">directoryInput :</span> transformInput.directoryInputs) &#123;</span><br><span class="line">                <span class="comment">// put directoryInput.file into Collections.</span></span><br><span class="line">                aspectjWeave.aspectPath &lt;&lt; directoryInput.file</span><br><span class="line">                aspectjWeave.inPath &lt;&lt; directoryInput.file</span><br><span class="line">                aspectjWeave.classPath &lt;&lt; directoryInput.file</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (JarInput <span class="attr">jarInput :</span> transformInput.jarInputs) &#123;</span><br><span class="line">                aspectjWeave.aspectPath &lt;&lt; jarInput.file</span><br><span class="line">                aspectjWeave.classPath &lt;&lt; jarInput.file</span><br><span class="line">                String jarPath =jarInput.file.absolutePath</span><br><span class="line">                <span class="keyword">if</span> (isIncludeFilterMatched(jarPath, includeJar)</span><br><span class="line">                    &amp;&amp; !isExcludeFilterMatched(jarPath, excludeJar)) &#123;</span><br><span class="line">                    AspectjLog.i <span class="string">&quot;includeJar---$&#123;jarPath&#125;&quot;</span></span><br><span class="line">                    aspectjWeave.inPath &lt;&lt; jarInput.file</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    AspectjLog.i <span class="string">&quot;excludeJar---$&#123;jarPath&#125;&quot;</span></span><br><span class="line">                    copyJar(outputProvider, jarInput)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// step 2: weave code.</span></span><br><span class="line">        aspectjWeave.weaveCode()</span><br><span class="line">        <span class="comment">// step 3: merge jars file.</span></span><br><span class="line">        handleOutput(resultDir, outputProvider)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">void</span> doNoThing(TransformOutputProvider outputProvider,</span><br><span class="line">                           Collection&lt;TransformInput&gt; inputs) &#123;</span><br><span class="line">        AspectjLog.i <span class="string">&quot;There is no aspectjrt dependencies in classpath, &quot;</span> +</span><br><span class="line">                <span class="string">&quot;Have you declare in Dependencies ? &quot;</span></span><br><span class="line">        <span class="comment">// 原样输出</span></span><br><span class="line">        inputs.each &#123;</span><br><span class="line">            TransformInput input -&gt;</span><br><span class="line">                input.directoryInputs.each &#123;</span><br><span class="line">                    DirectoryInput directoryInput -&gt;</span><br><span class="line">                        <span class="keyword">def</span> dest = outputProvider.getContentLocation(</span><br><span class="line">                                directoryInput.name, directoryInput.contentTypes,</span><br><span class="line">                                directoryInput.scopes, Format.DIRECTORY)</span><br><span class="line">                        <span class="comment">// just copy dirs</span></span><br><span class="line">                        FileUtil.copyDir(directoryInput.file, dest)</span><br><span class="line">                &#125;</span><br><span class="line">                input.jarInputs.each &#123;</span><br><span class="line">                    JarInput jarInput -&gt;</span><br><span class="line">                        <span class="keyword">def</span> dest = outputProvider.getContentLocation(</span><br><span class="line">                                jarInput.name, jarInput.contentTypes,</span><br><span class="line">                                jarInput.scopes, Format.JAR)</span><br><span class="line">                        <span class="comment">// just copy jar files</span></span><br><span class="line">                        FileUtil.copyDir(jarInput.file, dest)</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">void</span> handleOutput(File resultDir, TransformOutputProvider outputProvider) &#123;</span><br><span class="line">        <span class="comment">//add class file to aspect result jar</span></span><br><span class="line">        <span class="keyword">if</span> (resultDir.listFiles().length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            File jarFile = outputProvider.getContentLocation(</span><br><span class="line">                    <span class="string">&quot;aspected&quot;</span>, outputTypes, scopes, Format.JAR)</span><br><span class="line">            FileUtils.mkdirs(jarFile.parentFile)</span><br><span class="line">            FileUtils.deleteIfExists(jarFile)</span><br><span class="line">            JarMerger jarMerger = <span class="keyword">new</span> JarMerger(jarFile)</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                jarMerger.setFilter(<span class="keyword">new</span> JarMerger.IZipEntryFilter() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="type">boolean</span> checkEntry(String archivePath)</span><br><span class="line">                            <span class="keyword">throws</span> JarMerger.IZipEntryFilter.ZipAbortException &#123;</span><br><span class="line">                        <span class="keyword">return</span> archivePath.endsWith(SdkConstants.DOT_CLASS)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                jarMerger.addFolder(resultDir)</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> TransformException(e)</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                jarMerger.close()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        FileUtils.deleteFolder(resultDir)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-2-编写Plugin继承类"><a href="#3-2-编写Plugin继承类" class="headerlink" title="3.2 编写Plugin继承类"></a>3.2 编写Plugin继承类</h4><p>Plugin继承类逻辑十分简单，主要就是调用project.android.registerTransform(transform)</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AspectPlugin</span> <span class="keyword">implements</span> <span class="title class_">Plugin</span>&lt;Project&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">void</span> apply(Project project) &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Create an aspectj extension so you can use in your build.gradle file.</span></span><br><span class="line"><span class="comment">         * e.g.</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;</span></span><br><span class="line"><span class="comment">         * aspectj &#123;</span></span><br><span class="line"><span class="comment">         *     includeJarFilter com.XXX.XXX, org.XXX.XXX</span></span><br><span class="line"><span class="comment">         *     excludeJarFilter</span></span><br><span class="line"><span class="comment">         * &#125;</span></span><br><span class="line"><span class="comment">         * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        project.extensions.create(<span class="string">&quot;aspectj&quot;</span>, AspectjExtension)</span><br><span class="line">        <span class="keyword">def</span> hasAppPlugin = project.plugins.hasPlugin(AppPlugin)</span><br><span class="line">        <span class="keyword">def</span> hasLibPlugin = project.plugins.hasPlugin(LibraryPlugin)</span><br><span class="line">        <span class="keyword">if</span> (hasAppPlugin || hasLibPlugin) &#123;</span><br><span class="line">            AspectjTransform aspectjTransform = <span class="keyword">new</span> AspectjTransform(project)</span><br><span class="line">            project.android.registerTransform(aspectjTransform)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> GradleException(<span class="string">&quot;Aspectj: &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;The &#x27;com.android.application&#x27; or &#x27;com.android.library&#x27; &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;plugin is required.&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-编写AspectjWeave进行代码插桩"><a href="#3-3-编写AspectjWeave进行代码插桩" class="headerlink" title="3.3 编写AspectjWeave进行代码插桩"></a>3.3 编写AspectjWeave进行代码插桩</h4><p>在步骤3.1中，我们把代码插桩的逻辑放到了AspectjWeave中，主要就是配置参数，并使用Aspect定制的编译器进行代码插桩</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AspectjWeave</span> &#123;</span><br><span class="line">    AspectjWeave(Project project) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.project = project</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> weaveCode() &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">def</span> log = project.logger</span><br><span class="line">        <span class="keyword">def</span> args = [</span><br><span class="line">                <span class="string">&quot;-showWeaveInfo&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-encoding&quot;</span>, encoding,</span><br><span class="line">                <span class="string">&quot;-source&quot;</span>, sourceCompatibility,</span><br><span class="line">                <span class="string">&quot;-target&quot;</span>, targetCompatibility,</span><br><span class="line">                <span class="string">&quot;-d&quot;</span>, destDir,</span><br><span class="line">                <span class="string">&quot;-classpath&quot;</span>, classPath.join(File.pathSeparator),</span><br><span class="line">                <span class="string">&quot;-bootclasspath&quot;</span>, bootClassPath</span><br><span class="line">        ]</span><br><span class="line">        MessageHandler handler = <span class="keyword">new</span> MessageHandler(<span class="literal">true</span>);</span><br><span class="line">        Main m = <span class="keyword">new</span> Main();</span><br><span class="line">        m.run(args <span class="keyword">as</span> String[], handler);</span><br><span class="line">        <span class="keyword">for</span> (IMessage <span class="attr">message :</span> handler.getMessages(<span class="literal">null</span>, <span class="literal">true</span>)) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (message.getKind()) &#123;</span><br><span class="line">                <span class="keyword">case</span> IMessage.<span class="attr">ABORT:</span></span><br><span class="line">                <span class="keyword">case</span> IMessage.<span class="attr">ERROR:</span></span><br><span class="line">                <span class="keyword">case</span> IMessage.<span class="attr">FAIL:</span></span><br><span class="line">                    log.error message.message, message.thrown</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> GradleException(message.message, message.thrown)</span><br><span class="line">                <span class="keyword">case</span> IMessage.<span class="attr">WARNING:</span></span><br><span class="line">                    log.warn message.message, message.thrown</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> IMessage.<span class="attr">INFO:</span></span><br><span class="line">                    log.info message.message, message.thrown</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> IMessage.<span class="attr">DEBUG:</span></span><br><span class="line">                    log.debug message.message, message.thrown</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        m.quit()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，Plugin相关工作已经完成，接下来我们需要根据AspectJ语法对需要计算时间的方法打点计时</p><h4 id="3-4-编写计算方法耗时代码"><a href="#3-4-编写计算方法耗时代码" class="headerlink" title="3.4 编写计算方法耗时代码"></a>3.4 编写计算方法耗时代码</h4><p>使用Around标识可以截获到原方法，可以在方法执行前后计算时间，最后根据线程Id过滤一下即可。对于Before、Around、After标识的作用可以看步骤2中的推荐教程，这里不再赘述</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对com.netease.demo包名下面的都全部进行代码插桩</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TraceAspect</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">POINTCUT_METHOD</span> <span class="operator">=</span></span><br><span class="line">            <span class="string">&quot;execution(* com.netease.demo..*.*(..))&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 截获原方法，并替换</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around(POINTCUT_METHOD)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">weaveJoinPoint</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span>  <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">if</span> (Thread.currentThread().getId() == BaseApplication.sUiThreadId) &#123;</span><br><span class="line">            Log.e(<span class="string">&quot;Aspectj&quot;</span>, joinPoint.getSignature().getName() + <span class="string">&quot; 总用时：&quot;</span> + (end-start) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-查看结果"><a href="#3-5-查看结果" class="headerlink" title="3.5 查看结果"></a>3.5 查看结果</h4><p><img src="/2017/06/27/AspectJ-with-android-Transform-API/p1.png" alt="图1"></p><p>通过上图可以看到onCreate方法执行了29毫秒</p><ol start="4"><li>原理分析<br>原始代码</li></ol><p><img src="/2017/06/27/AspectJ-with-android-Transform-API/p2.png" alt="图2"></p><p>编译后的代码</p><p><img src="/2017/06/27/AspectJ-with-android-Transform-API/p3.png" alt="图3"></p><p>通过对比，我们可以发现AspectJ对于原始代码中的方法，都插入了相应的方法。以onCreate方法为例，<br>原始onCreate方法中的处理逻辑都挪到了onCreate_aroundBody0()方法中，这样如果想在原始onCreate方法前后做些操作，只需在AjcClosure1类中的run方法前后做即可；如果想替换原始onCreate方法实现，则可以不调用AjcClosure1类中的run方法</p><p>因为代码插桩操作是编译时期就进行的，所以除了增加方法数外，对原来业务逻辑的影响可以说是微乎其微的。这正是AspectJ的强大之处！</p><h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h3><p>看了上面的结果你可能想：AspectJ竟能如此强大！既然可以动态替换方法，那岂不是可以作为热补丁修复代码？我可以明确告诉你，这完全可行。当然了，只能是方法级别的代码修复。理论上所有的业务代码都能进行代码插桩，但是有个缺点：方法数会增加一倍。不过有了Mutidex分包方案后，方法数这个问题也就迎刃而解了。这种热补丁修复方案实现简单、兼容性好、而且热补丁代码非常小，基本上(10K以内)，后面我会花时间把它整理出来，敬请期待！</p><h3 id="6-源码下载"><a href="#6-源码下载" class="headerlink" title="6. 源码下载"></a>6. 源码下载</h3><p><a href="https://github.com/nancyyihao/AspectJDemo">AspectJDemo</a></p><h3 id="7-参考"><a href="#7-参考" class="headerlink" title="7. 参考"></a>7. 参考</h3><p>本文中大部分代码都参考了aspectjx项目，特此感谢<br><a href="https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx">aspectjx项目</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最长上升子序列O(nlogn)</title>
      <link href="/2017/06/26/Longest-Increasing-Subsequence-With-O-nlogn/"/>
      <url>/2017/06/26/Longest-Increasing-Subsequence-With-O-nlogn/</url>
      
        <content type="html"><![CDATA[<h3 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h3><p>对于给定的序列，求该序列中最长上升子序列长度<br>如：<br>8 2 7 1 9 10 1 4 3 5</p><p>最终输出4（最长上升子序列为[2，7，9，10]）</p><span id="more"></span><h3 id="2-分析"><a href="#2-分析" class="headerlink" title="2. 分析"></a>2. 分析</h3><h4 id="2-1-方法一"><a href="#2-1-方法一" class="headerlink" title="2.1 方法一"></a>2.1 方法一</h4><p>很容易想到的就是O(n^2)的算法：<br>f[i]标识前i个元素中的最长不下降子序列的长度，则</p><p>f[i] &#x3D; max(f[j]) +1, 0&lt;j&lt;i &amp;&amp; a[j]&lt;a[i]</p><h4 id="2-2-方法二"><a href="#2-2-方法二" class="headerlink" title="2.2 方法二"></a>2.2 方法二</h4><p>换个思路，用d[i]标识以长度为i，最长上升子序列中元素的最小值，拿上面的例子来说<br>8 2 7 1 9 10 1 4 3 5</p><p>8<br>d[1] &#x3D; 8 （目前为止，长度为1，最长上升子序列最小值当然是8）</p><p>8 2<br>d[1] &#x3D; 2 （因为2比8小，同样长度为1，最小值需要更新，因为2比8更优）</p><p>8 2 7<br>d[1,2] &#x3D;2, 7 （我们发现d[1]&lt;a[3] &#x3D; 7,直接长度加1，并把7添加到d中）</p><p>8 2 7 1<br>d[1,2] &#x3D; 1,7 （为啥1的位置比2靠后，也能更新2？因为对于长度为1的最长不下降子序列，1作为结尾是最小的）</p><p>8 2 7 1 9<br>d[1,2,3] &#x3D; [1,7,9]</p><p>8 2 7 1 9 10<br>d[1,2,3,4] &#x3D; [1,7,9,10]</p><p>8 2 7 1 9 10 1<br>d[1,2,3,4] &#x3D; [1,7,9,10]</p><p>8 2 7 1 9 10 1 4<br>d[1,2,3,4] &#x3D; [1,4,9,10]</p><p>8 2 7 1 9 10 1 4 3<br>d[1,2,3,4] &#x3D; [1,3,9,10]</p><p>8 2 7 1 9 10 1 4 3 5<br>d[1,2,3,4] &#x3D; [1,3,5,10]<br>（为啥5的位置比9靠后，也能更新9？因为对于长度为3的最长不下降子序列，5作为结尾是最小的）</p><p>我们发现d数组并不是保存最终的最长上升子序列。假如已经计算出两个状态i，j满足A[i]i且i&gt;j）来说，i并不会比j差——如果j满足Aj&lt;Ak的条件，i也满足。换句话说，如果我们只保留i，一定不会丢失最优解。因此，对于相同的d值，只需要保留A数组中最小的一个即可。</p><pre><code>对于A数组中的所有元素 A[i] 1）若d[len] &lt; a[i]，则len = len + 1, d[len] = A[i]2）否则在d[1...len]中找到最大的t, 满足d[t]&lt;A[i]，此时用A[i]更新d，即d[t] = A[i]步骤1时间复杂度是O(n)，步骤2，因为d是递增的，所以可以用二分查找，时间复杂度是O(nlogn)，因此整个算法复杂度为O(nlogn)</code></pre><h3 id="3-代码"><a href="#3-代码" class="headerlink" title="3. 代码"></a>3. 代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 100000  </span></span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> a[MAXN],ans[MAXN],len;  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">binary_search</span><span class="params">(<span class="type">int</span> i)</span></span>&#123;  </span><br><span class="line">    <span class="type">int</span> left,right,mid;  </span><br><span class="line">    left=<span class="number">0</span>,right=len;  </span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;  </span><br><span class="line">        mid = left+(right-left)/<span class="number">2</span>;  </span><br><span class="line">        <span class="keyword">if</span>(ans[mid]&gt;=a[i]) right=mid;  </span><br><span class="line">        <span class="keyword">else</span> left=mid+<span class="number">1</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="type">int</span> T,N,i,j,k;  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);  </span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N);  </span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=N; ++i)  </span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);  </span><br><span class="line">          </span><br><span class="line">        ans[<span class="number">1</span>] = a[<span class="number">1</span>];  </span><br><span class="line">        len=<span class="number">1</span>;  </span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">2</span>; i&lt;=N; ++i)&#123;  </span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;ans[len])  </span><br><span class="line">                ans[++len]=a[i];  </span><br><span class="line">            <span class="keyword">else</span>&#123;  </span><br><span class="line">                <span class="type">int</span> pos=<span class="built_in">binary_search</span>(i);</span><br><span class="line">                ans[pos] = a[i];  </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span> ; j&lt;=len;j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,ans[j]);  </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">           </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,len);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 </span><br><span class="line">10 </span><br><span class="line">8 2 7 1 9 10 1 4 3 5</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2 </span><br><span class="line">2 7 </span><br><span class="line">1 7 </span><br><span class="line">1 7 9 </span><br><span class="line">1 7 9 10 </span><br><span class="line">1 7 9 10 </span><br><span class="line">1 4 9 10 </span><br><span class="line">1 3 9 10 </span><br><span class="line">1 3 5 10 </span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>和我们分析结果是一致的。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义gradle插件（一）</title>
      <link href="/2017/06/25/Build-Gradle-Plugin-With-Android-Studio/"/>
      <url>/2017/06/25/Build-Gradle-Plugin-With-Android-Studio/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>通常，在Android Studio中使用gradle插件有两种方法</p><ul><li>把插件源码放到rootProjectDir&#x2F;buildSrc&#x2F;src&#x2F;main&#x2F;groovy目录，自动编译</li><li>Plugin打包成jar，发布到仓库（本地或远程），项目直接引用如apply plugin: ‘com.android.application’<br>最常用的是第二种方式，今天我们就来分析一下怎么使用Android Studio自定义插件<span id="more"></span></li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="1-新建Android-Library"><a href="#1-新建Android-Library" class="headerlink" title="1. 新建Android Library"></a>1. 新建Android Library</h4><p>暂且就先起名叫HelloPlugin吧</p><p><img src="/2017/06/25/Build-Gradle-Plugin-With-Android-Studio/p1.png" alt="图1"></p><p>建好后整个工程目录结构如下：</p><p><img src="/2017/06/25/Build-Gradle-Plugin-With-Android-Studio/p2.png" alt="图2"></p><h4 id="2-修改目录结构"><a href="#2-修改目录结构" class="headerlink" title="2. 修改目录结构"></a>2. 修改目录结构</h4><p>把HelloPlugin库下面的文件androidTest、test、main下的java、resources、androidMenifest.xml全部删除掉，并在main下新建文件夹groovy、resources，在resources下新建META-INF&#x2F;gradle-plugins&#x2F;hello-plugin.properties文件，用来声明对应的插件类。建立好后的目录结构如下：</p><p><img src="/2017/06/25/Build-Gradle-Plugin-With-Android-Studio/p3.png" alt="图3"></p><h4 id="3-编写代码"><a href="#3-编写代码" class="headerlink" title="3. 编写代码"></a>3. 编写代码</h4><p><strong>3.1 新建Plugin类</strong><br>Plugin类的工作很简单，就是打印一句话</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.netease.plugin</span><br><span class="line"><span class="keyword">import</span> org.gradle.api.Plugin</span><br><span class="line"><span class="keyword">import</span> org.gradle.api.Project</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloPlugin</span> <span class="keyword">implements</span> <span class="title class_">Plugin</span>&lt;Project&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">void</span> apply(Project project) &#123;</span><br><span class="line">        println <span class="string">&quot;hello, this is plugin!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.2 编写配置文件hello-plugin.properties</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation-class=com.netease.aspectplugin.</span><br></pre></td></tr></table></figure><p>AspectPlugin<br>这个配置文件指明了插件类入口，插件类的apply方法，类似于C语言中的Main方法，是程序的入口。</p><p><strong>3.3 修改hello-plugin下的build.gradle文件</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;groovy&#x27;</span></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;maven&#x27;</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile gradleApi()</span><br><span class="line">    compile localGroovy()</span><br><span class="line">&#125;</span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双击一下右上角的build task，即可生成插件jar包</p><p><img src="/2017/06/25/Build-Gradle-Plugin-With-Android-Studio/p4.png" alt="图4"></p><h3 id="发布插件"><a href="#发布插件" class="headerlink" title="发布插件"></a>发布插件</h3><h4 id="修改helloplugin下的build-gradle文件"><a href="#修改helloplugin下的build-gradle文件" class="headerlink" title="修改helloplugin下的build.gradle文件"></a>修改helloplugin下的build.gradle文件</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;groovy&#x27;</span></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;maven&#x27;</span></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">    jcenter()</span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile gradleApi()</span><br><span class="line">    compile <span class="string">&#x27;com.android.tools.build:gradle:2.3.2&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">uploadArchives &#123; <span class="comment">// task名称不能乱改</span></span><br><span class="line">    repositories&#123;</span><br><span class="line">        mavenDeployer &#123;</span><br><span class="line">            pom.groupId = <span class="string">&#x27;com.netease.plugin&#x27;</span></span><br><span class="line">            pom.artifactId = <span class="string">&#x27;hello-plugin&#x27;</span></span><br><span class="line">            pom.version = <span class="string">&#x27;1.0.0&#x27;</span></span><br><span class="line">            repository(<span class="attr">url:</span> uri(<span class="string">&#x27;../release&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>uploadArchives就是一个gradle task，用来发布插件。本文使用本地maven仓库的方式，将插件发布到根目录&#x2F;release目录下。sync完成之后，再点击右上角的uploadArchives，即可把插件发布到本地maven库中，如下图所示</p><p><img src="/2017/06/25/Build-Gradle-Plugin-With-Android-Studio/p5.png" alt="图5"></p><p>修改app下build.gradle文件<br>apply plugin: ‘com.android.application’<br>&#x2F;&#x2F; 1. hello-plugin名字是hello-plugin.properties文件的前缀，必须保持一致</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;hello-plugin&#x27;</span></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">25</span></span><br><span class="line">    buildToolsVersion <span class="string">&quot;25.0.2&quot;</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">&quot;com.netease.plugin&quot;</span></span><br><span class="line">        minSdkVersion <span class="number">15</span></span><br><span class="line">        targetSdkVersion <span class="number">25</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">&quot;1.0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">&#x27;proguard-android.txt&#x27;</span>), <span class="string">&#x27;proguard-rules.pro&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile fileTree(<span class="attr">dir:</span> <span class="string">&#x27;libs&#x27;</span>, <span class="attr">include:</span> [<span class="string">&#x27;*.jar&#x27;</span>])</span><br><span class="line">    compile <span class="string">&#x27;com.android.support:appcompat-v7:25.2.0&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter &#123;</span><br><span class="line">            url <span class="string">&quot;http://jcenter.bintray.com/&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        maven &#123;</span><br><span class="line">            url <span class="string">&#x27;file:../release&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">&#x27;com.android.tools.build:gradle:2.3.2&#x27;</span></span><br><span class="line"><span class="comment">// 2. 标识分别是&#x27;groupid:artifactId:version&#x27;，和发布插件步骤中的配置必须一致</span></span><br><span class="line">        classpath <span class="string">&#x27;com.netease.plugin:hello-plugin:1.0.0&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">repositories &#123;</span><br><span class="line">    jcenter &#123;</span><br><span class="line">        url <span class="string">&quot;http://jcenter.bintray.com/&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，把app工程src目录下的androidTest、test全部删掉，重新build一下工程，就可以在gradle console看到如下信息：</p><p><img src="/2017/06/25/Build-Gradle-Plugin-With-Android-Studio/p6.png" alt="图6"></p><p>这说明我们自定义的插件生效了，至此，自定义插件流程结束。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文通过例子详细介绍了自定义gradle插件的流程，后面我们会通过Android Studio提供的transform API，结合AspectJ，完成打印所有主线程方法耗时的功能，敬请期待！</p><h3 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h3><p><a href="https://github.com/nancyyihao/GradlePlugin">Hello-Plugin</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://mp.weixin.qq.com/s/HJyYMGmVIpblJXJNKK1JTw">用AndroidStudio开发自定义 Gradle plugin</a></li><li><a href="http://blog.csdn.net/sbsujjbcy/article/details/50839263">Android 热修复使用Gradle Plugin1.5改造Nuwa插件</a></li><li><a href="http://wiki.jikexueyuan.com/project/deep-android-gradle/four-two.html">深入理解 Android 之 Gradle</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生活总是充满意外</title>
      <link href="/2017/06/25/Life-is-full-of-surprise/"/>
      <url>/2017/06/25/Life-is-full-of-surprise/</url>
      
        <content type="html"><![CDATA[<p>这周过得很郁闷。</p><span id="more"></span><h3 id="加班"><a href="#加班" class="headerlink" title="加班"></a>加班</h3><p>从端午放假回来，公司开始执行10&#x2F;9&#x2F;5上班制度。简单说，就是每天10点上班，晚上9点下班，一周上5天。明显感觉到不适应，身体很疲惫。</p><h3 id="中介"><a href="#中介" class="headerlink" title="中介"></a>中介</h3><p>这周房子到期了，和中介签了另一个房子，之前承诺的装空调，电脑桌，冰箱，啥都没装上，还一拖再拖。房子只有一把钥匙，还让打隔断的人给拿走了，我就只能待在门外傻傻等待。保洁也没有做，我就像一个流浪汉，带着各种东西，都没法安置，只有一张床在那里放着，说什么也不能和那样的中介签合同了。</p><h3 id="同事离职"><a href="#同事离职" class="headerlink" title="同事离职"></a>同事离职</h3><p>让我意外的另一件事是之前关系特别好的一个同事要准备离职了，他是那种不会轻易跳槽的人，工作也算兢兢业业，问了下原因，原来是公司想让他走，我忽然有很多的感触。他和你说是这个产品的元老，也算为这个产品做了不少贡献，结果公司就在业绩不太好的时候，把这样的元老给开了。一点情面都不给，确实让人很伤心。</p><h3 id="猎头"><a href="#猎头" class="headerlink" title="猎头"></a>猎头</h3><p>周二早上还没醒，就收到两个猎头打电话，还是同一家公司。都明确跟他们说暂时不考虑跳槽了（原因也说得很明白，自己还需要再沉淀），猎头还在那里一顿说，索性拉黑。</p><h3 id="人际关系"><a href="#人际关系" class="headerlink" title="人际关系"></a>人际关系</h3><p>跟一位产品同事关系还挺好，在新版本功能上有个需求忘了提，我没有实现。上线的时候就说是我的问题。结果就狂甩锅，说翻脸就翻脸，直接过来跟我吵，声音特别大，基本上整个楼层的人都知道了，影响非常不好。我们老大之后找我谈话，说人家是个小女生，得让着她点。说实话，我都不知道我怎么就惹毛她了，直接过来跟我翻脸，搞得我非常郁闷，有冤都没法喊。通过这件事，感觉自己还是太嫩了，处理事情的方式有待提高。基本上只要这些产品小女生一吵，一闹，一哭，没辙，就算不是你得错，你也已经错了。这是个深刻的教训。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aidl工具分析（二）</title>
      <link href="/2017/04/08/Android-aidl-tools-source-code-analysis/"/>
      <url>/2017/04/08/Android-aidl-tools-source-code-analysis/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这是Android打包过程分析系列文章的第二篇</p><span id="more"></span><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>aidl工具负责把aidl语言翻译成java语言</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IBookManager.aidl</span></span><br><span class="line"><span class="keyword">package</span> com.nancyyihao.aidlserver;</span><br><span class="line"><span class="comment">// Declare any non-default types here with import statements</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IBookManager</span> &#123;</span><br><span class="line">    List&lt;String&gt; <span class="title function_">getBookList</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addBook</span><span class="params">(in String book)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行如下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aidl com/nancyyihao/aidlserver/IBookManager.aidl</span><br></pre></td></tr></table></figure><p>上面的IBookManager.aidl经过aidl工具转换之后就变成下面的样子了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This file is auto-generated.  DO NOT MODIFY.</span></span><br><span class="line"><span class="comment"> * Original file: com/nancyyihao/aidlserver/IBookManager.aidl</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.nancyyihao.aidlserver;</span><br><span class="line"><span class="comment">// Declare any non-default types here with import statements</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IBookManager</span> <span class="keyword">extends</span> <span class="title class_">android</span>.os.IInterface</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/** Local-side IPC implementation stub class. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Stub</span> <span class="keyword">extends</span> <span class="title class_">android</span>.os.Binder <span class="keyword">implements</span> <span class="title class_">com</span>.nancyyihao.aidlserver.IBookManager</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> java.lang.<span class="type">String</span> <span class="variable">DESCRIPTOR</span> <span class="operator">=</span> <span class="string">&quot;com.nancyyihao.aidlserver.IBookManager&quot;</span>;</span><br><span class="line"><span class="comment">/** Construct the stub at attach it to the interface. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Stub</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">this</span>.attachInterface(<span class="built_in">this</span>, DESCRIPTOR);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Cast an IBinder object into an com.nancyyihao.aidlserver.IBookManager interface,</span></span><br><span class="line"><span class="comment"> * generating a proxy if needed.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> com.nancyyihao.aidlserver.IBookManager <span class="title function_">asInterface</span><span class="params">(android.os.IBinder obj)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((obj==<span class="literal">null</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">android.os.<span class="type">IInterface</span> <span class="variable">iin</span> <span class="operator">=</span> obj.queryLocalInterface(DESCRIPTOR);</span><br><span class="line"><span class="keyword">if</span> (((iin!=<span class="literal">null</span>)&amp;&amp;(iin <span class="keyword">instanceof</span> com.nancyyihao.aidlserver.IBookManager))) &#123;</span><br><span class="line"><span class="keyword">return</span> ((com.nancyyihao.aidlserver.IBookManager)iin);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">com</span>.nancyyihao.aidlserver.IBookManager.Stub.Proxy(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span> <span class="keyword">public</span> android.os.IBinder <span class="title function_">asBinder</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span> <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onTransact</span><span class="params">(<span class="type">int</span> code, android.os.Parcel data, android.os.Parcel reply, <span class="type">int</span> flags)</span> <span class="keyword">throws</span> android.os.RemoteException</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (code)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> INTERFACE_TRANSACTION:</span><br><span class="line">&#123;</span><br><span class="line">reply.writeString(DESCRIPTOR);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> TRANSACTION_getBookList:</span><br><span class="line">&#123;</span><br><span class="line">data.enforceInterface(DESCRIPTOR);</span><br><span class="line">java.util.List&lt;java.lang.String&gt; _result = <span class="built_in">this</span>.getBookList();</span><br><span class="line">reply.writeNoException();</span><br><span class="line">reply.writeStringList(_result);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> TRANSACTION_addBook:</span><br><span class="line">&#123;</span><br><span class="line">data.enforceInterface(DESCRIPTOR);</span><br><span class="line">java.lang.String _arg0;</span><br><span class="line">_arg0 = data.readString();</span><br><span class="line"><span class="built_in">this</span>.addBook(_arg0);</span><br><span class="line">reply.writeNoException();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">super</span>.onTransact(code, data, reply, flags);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">com</span>.nancyyihao.aidlserver.IBookManager</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> android.os.IBinder mRemote;</span><br><span class="line">Proxy(android.os.IBinder remote)</span><br><span class="line">&#123;</span><br><span class="line">mRemote = remote;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span> <span class="keyword">public</span> android.os.IBinder <span class="title function_">asBinder</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> mRemote;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> java.lang.String <span class="title function_">getInterfaceDescriptor</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> DESCRIPTOR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span> <span class="keyword">public</span> java.util.List&lt;java.lang.String&gt; getBookList() <span class="keyword">throws</span> android.os.RemoteException</span><br><span class="line">&#123;</span><br><span class="line">android.os.<span class="type">Parcel</span> <span class="variable">_data</span> <span class="operator">=</span> android.os.Parcel.obtain();</span><br><span class="line">android.os.<span class="type">Parcel</span> <span class="variable">_reply</span> <span class="operator">=</span> android.os.Parcel.obtain();</span><br><span class="line">java.util.List&lt;java.lang.String&gt; _result;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">_data.writeInterfaceToken(DESCRIPTOR);</span><br><span class="line">mRemote.transact(Stub.TRANSACTION_getBookList, _data, _reply, <span class="number">0</span>);</span><br><span class="line">_reply.readException();</span><br><span class="line">_result = _reply.createStringArrayList();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">_reply.recycle();</span><br><span class="line">_data.recycle();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> _result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBook</span><span class="params">(java.lang.String book)</span> <span class="keyword">throws</span> android.os.RemoteException</span><br><span class="line">&#123;</span><br><span class="line">android.os.<span class="type">Parcel</span> <span class="variable">_data</span> <span class="operator">=</span> android.os.Parcel.obtain();</span><br><span class="line">android.os.<span class="type">Parcel</span> <span class="variable">_reply</span> <span class="operator">=</span> android.os.Parcel.obtain();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">_data.writeInterfaceToken(DESCRIPTOR);</span><br><span class="line">_data.writeString(book);</span><br><span class="line">mRemote.transact(Stub.TRANSACTION_addBook, _data, _reply, <span class="number">0</span>);</span><br><span class="line">_reply.readException();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">_reply.recycle();</span><br><span class="line">_data.recycle();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TRANSACTION_getBookList</span> <span class="operator">=</span> (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class="number">0</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TRANSACTION_addBook</span> <span class="operator">=</span> (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> java.util.List&lt;java.lang.String&gt; getBookList() <span class="keyword">throws</span> android.os.RemoteException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBook</span><span class="params">(java.lang.String book)</span> <span class="keyword">throws</span> android.os.RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：aidl文件等级已经要和aidl文件中定义的package保持一致，不然会报错</p><h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><p><img src="/2017/04/08/Android-aidl-tools-source-code-analysis/p1.png" alt="图1"></p><p>refusing to generate code from aidl file defining parcelable</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><p><a href="http://blog.csdn.net/u014015972/article/details/51480680">Lex Yacc (一) 入门</a></p></li><li><p><a href="http://blog.chinaunix.net/uid-24774106-id-3566855.html">flex and bison ：做个计算器</a></p></li><li><p><a href="https://item.jd.com/10798154.html">O’Reilly：flex与bison（中文版）</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> AIDL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android打包流程</title>
      <link href="/2017/04/03/Android-package-flow/"/>
      <url>/2017/04/03/Android-package-flow/</url>
      
        <content type="html"><![CDATA[<h3 id="1-基本流程"><a href="#1-基本流程" class="headerlink" title="1. 基本流程"></a>1. 基本流程</h3><ul><li>使用aapt工具分析资源文件，生成R.java</li><li>使用aild工具把所有aidl文件转成java文件</li><li>使用javac编译所有的java文件，生成class文件</li><li>使用dx工具把class文件转成dex文件</li><li>使用apkbuilder生成apk</li><li>使用jarsigner给apk签名</li><li>使用zipalign对齐<span id="more"></span>流程图如下</li></ul><p><img src="/2017/04/03/Android-package-flow/p1.png" alt="图1"></p><p>更全流程：</p><p><img src="/2017/04/03/Android-package-flow/p2.png" alt="图2"><br>图片来源：<a href="http://tools.android.com/tech-docs/new-build-system/build-workflow">Build Workflow</a></p><h3 id="2-参考"><a href="#2-参考" class="headerlink" title="2. 参考"></a>2. 参考</h3><ul><li><p><a href="https://stuff.mit.edu/afs/sipb/project/android/docs/tools/building/index.html#detailed-build">build-and-run</a></p></li><li><p><a href="https://github.com/dogriffiths/HeadFirstAndroid/wiki/How-Android-Apps-are-Built-and-Run">How Android Apps are Built and Run</a></p></li><li><p><a href="http://blog.csdn.net/luoshengyang/article/details/8744683">Android应用程序资源的编译和打包过程分析</a></p></li><li><p><a href="http://www.jianshu.com/p/d2dc78eb7bd9">手动命令行编译APK</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 打包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android-卸载反馈</title>
      <link href="/2017/03/06/Android-uninstall-feedback/"/>
      <url>/2017/03/06/Android-uninstall-feedback/</url>
      
        <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>PC时代，把某些软件卸载后会弹出一个网页，用来收集反馈信息，以便产品更好决策。在移动时代，Android其实也可以做到同样的功能。</p><span id="more"></span><h3 id="2-分析"><a href="#2-分析" class="headerlink" title="2. 分析"></a>2. 分析</h3><p>当用户卸载app时，Android系统会自动杀掉app所在进程，在framework层，并没有提供app卸载监听方法。我们知道Android是基于Linux的，Linux内核提供了许多进程管理的方法，通过fork函数我们可以轻松创建一个子进程，结合Java语言的JNI机制，就可以在app启动时创建一个子进程实时监测当前app的包名是否被删除，当包名被删除时，通过命令打开网页即可。</p><h3 id="3-实现"><a href="#3-实现" class="headerlink" title="3. 实现"></a>3. 实现</h3><p>先通过JNI调用，fork一个子进程实时监控包名</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">JNIEXPORT <span class="type">void</span> JNICALL</span></span><br><span class="line"><span class="function"><span class="title">Java_com_netease_uninstallmonitor_MainActivity_monitorUsingPoll</span><span class="params">(JNIEnv *env, jobject instance,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                                jstring pkgDir_, jint sdkVersion_,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                                jstring openUrl_)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *pkgDir = env-&gt;<span class="built_in">GetStringUTFChars</span>(pkgDir_, <span class="number">0</span>);</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *openUrl = env-&gt;<span class="built_in">GetStringUTFChars</span>(openUrl_, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// need to clear old process</span></span><br><span class="line">    <span class="built_in">clearOldProcessByName</span>(monitorProcessName);</span><br><span class="line">    <span class="type">int</span> state = fork();</span><br><span class="line">    <span class="keyword">if</span> (state &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">LOGD</span>(<span class="string">&quot;parent process = %d&quot;</span>, state);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">LOGD</span>(<span class="string">&quot;child process = %d&quot;</span>, state);</span><br><span class="line">        <span class="type">int</span> stop = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!stop) &#123;</span><br><span class="line">            <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">            FILE *file = <span class="built_in">fopen</span>(pkgDir, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="built_in">LOGD</span>(<span class="string">&quot;app uninstalled already!&quot;</span>);</span><br><span class="line">                <span class="built_in">loadUrl</span>(sdkVersion_, openUrl);</span><br><span class="line">                stop = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">LOGD</span>(<span class="string">&quot;Error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    env-&gt;<span class="built_in">ReleaseStringUTFChars</span>(pkgDir_, pkgDir);</span><br><span class="line">    env-&gt;<span class="built_in">ReleaseStringUTFChars</span>(openUrl_, openUrl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当包名被删除时打开url即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">loadUrl</span><span class="params">(<span class="type">int</span> sdkVersion, <span class="type">const</span> <span class="type">char</span> *url)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">LOGD</span>(<span class="string">&quot;start open url....&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (sdkVersion &lt; <span class="number">17</span>) &#123;</span><br><span class="line">        <span class="built_in">execlp</span>(<span class="string">&quot;am&quot;</span>, <span class="string">&quot;am&quot;</span>, <span class="string">&quot;start&quot;</span>, <span class="string">&quot;-a&quot;</span>, <span class="string">&quot;android.intent.action.VIEW&quot;</span>, <span class="string">&quot;-d&quot;</span>, url, <span class="literal">NULL</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">execlp</span>(<span class="string">&quot;am&quot;</span>, <span class="string">&quot;am&quot;</span>, <span class="string">&quot;start&quot;</span>, <span class="string">&quot;--user&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;-a&quot;</span>,</span><br><span class="line">               <span class="string">&quot;android.intent.action.VIEW&quot;</span>, <span class="string">&quot;-d&quot;</span>, url, (<span class="type">char</span> *) <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">LOGD</span>(<span class="string">&quot;stop open url....&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-优化"><a href="#4-优化" class="headerlink" title="4. 优化"></a>4. 优化</h3><p>上述方案使用while语句一直循环监听，浪费资源，我们可以基于linux的文件删除通知机制来进行优化。</p><h4 id="优化点一："><a href="#优化点一：" class="headerlink" title="优化点一："></a>优化点一：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">JNIEXPORT <span class="type">void</span> JNICALL</span></span><br><span class="line"><span class="function"><span class="title">Java_com_netease_uninstallmonitor_MainActivity_monitorUsingNotify</span><span class="params">(JNIEnv *env, jobject instance,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                                  jstring pkgDir_, jint sdkVersion,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                                  jstring openUrl_)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *pkgDir = env-&gt;<span class="built_in">GetStringUTFChars</span>(pkgDir_, <span class="number">0</span>);</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *openUrl = env-&gt;<span class="built_in">GetStringUTFChars</span>(openUrl_, <span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> pid = fork();</span><br><span class="line">    <span class="keyword">if</span> (pid &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">LOGD</span>(<span class="string">&quot;parent process = %d&quot;</span>, pid);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">LOGD</span>(<span class="string">&quot;child process = %d&quot;</span>, pid);</span><br><span class="line">        <span class="built_in">prctl</span>(PR_SET_NAME, monitorProcessName);</span><br><span class="line">        <span class="comment">// register notify listener</span></span><br><span class="line">        <span class="type">int</span> fd = <span class="built_in">inotify_init</span>();</span><br><span class="line">        <span class="keyword">if</span> (fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">LOGD</span>(<span class="string">&quot;inofity_init failed!!!&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> wd = <span class="built_in">inotify_add_watch</span>(fd, pkgDir, IN_DELETE);</span><br><span class="line">        <span class="keyword">if</span> (wd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">LOGD</span>(<span class="string">&quot;inotify_add_watch failed !!!&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// handle an event once a time</span></span><br><span class="line">        <span class="type">void</span> *p_buf = <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(inotify_event));</span><br><span class="line">        <span class="keyword">if</span> (p_buf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">LOGD</span>(<span class="string">&quot;malloc failed!!!&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">LOGD</span>(<span class="string">&quot;start listen&quot;</span>);</span><br><span class="line">        <span class="comment">// block session until file delete</span></span><br><span class="line">        <span class="built_in">read</span>(fd, p_buf, <span class="built_in">sizeof</span>(<span class="keyword">struct</span> inotify_event));</span><br><span class="line">        <span class="built_in">free</span>(p_buf);</span><br><span class="line">        <span class="built_in">inotify_rm_watch</span>(fd, IN_DELETE);</span><br><span class="line">        <span class="built_in">loadUrl</span>(sdkVersion, openUrl);</span><br><span class="line">        <span class="built_in">LOGD</span>(<span class="string">&quot;end listen&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">LOGD</span>(<span class="string">&quot;Error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    env-&gt;<span class="built_in">ReleaseStringUTFChars</span>(pkgDir_, pkgDir);</span><br><span class="line">    env-&gt;<span class="built_in">ReleaseStringUTFChars</span>(openUrl_, openUrl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优化点二："><a href="#优化点二：" class="headerlink" title="优化点二："></a>优化点二：</h4><p>上述放方案中，当app卸载重装后，之前的监听进程可能没有被系统杀死，因此可能导致系统中可能同时存在多个监听进程，浪费资源。因此在创建监听进程前最好把之前的监听进程杀死。</p><h3 id="5-最终代码"><a href="#5-最终代码" class="headerlink" title="5. 最终代码"></a>5. 最终代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/inotify.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span>          <span class="comment">/*for prctl function*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dirent.h&gt;</span>             <span class="comment">/*for DIR struct*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;android/log.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOG_TAG <span class="string">&quot;uninstall_tag&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOGD(...) __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOGE(...) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> monitorProcessName[] = <span class="string">&quot;ntes_uninstall&quot;</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loadUrl</span><span class="params">(<span class="type">int</span> sdkVersion, <span class="type">const</span> <span class="type">char</span> *url)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">LOGD</span>(<span class="string">&quot;start open url....&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (sdkVersion &lt; <span class="number">17</span>) &#123;</span><br><span class="line">        <span class="built_in">execlp</span>(<span class="string">&quot;am&quot;</span>, <span class="string">&quot;am&quot;</span>, <span class="string">&quot;start&quot;</span>, <span class="string">&quot;-a&quot;</span>, <span class="string">&quot;android.intent.action.VIEW&quot;</span>, <span class="string">&quot;-d&quot;</span>, url, <span class="literal">NULL</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">execlp</span>(<span class="string">&quot;am&quot;</span>, <span class="string">&quot;am&quot;</span>, <span class="string">&quot;start&quot;</span>, <span class="string">&quot;--user&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;-a&quot;</span>,</span><br><span class="line">               <span class="string">&quot;android.intent.action.VIEW&quot;</span>, <span class="string">&quot;-d&quot;</span>, url, (<span class="type">char</span> *) <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">LOGD</span>(<span class="string">&quot;stop open url....&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find_pid_by_name</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *ProcName, <span class="type">int</span> *foundpid)</span> </span>&#123;</span><br><span class="line">    DIR *dir;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">dirent</span> *d;</span><br><span class="line">    <span class="type">int</span> pid, i;</span><br><span class="line">    <span class="type">char</span> *s;</span><br><span class="line">    <span class="type">int</span> pnlen;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    foundpid[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    pnlen = <span class="built_in">strlen</span>(ProcName);</span><br><span class="line">    <span class="comment">/* Open the /proc directory. */</span></span><br><span class="line">    dir = <span class="built_in">opendir</span>(<span class="string">&quot;/proc&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!dir) &#123;</span><br><span class="line">        <span class="built_in">LOGE</span>(<span class="string">&quot;cannot open /proc&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* Walk through the directory. */</span></span><br><span class="line">    <span class="keyword">while</span> ((d = <span class="built_in">readdir</span>(dir)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="type">char</span> exe[PATH_MAX + <span class="number">1</span>];</span><br><span class="line">        <span class="type">char</span> path[PATH_MAX + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="type">int</span> namelen;</span><br><span class="line">        <span class="comment">/* See if this is a process */</span></span><br><span class="line">        <span class="keyword">if</span> ((pid = <span class="built_in">atoi</span>(d-&gt;d_name)) == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">snprintf</span>(exe, <span class="built_in">sizeof</span>(exe), <span class="string">&quot;/proc/%s/exe&quot;</span>, d-&gt;d_name);</span><br><span class="line">        <span class="keyword">if</span> ((len = <span class="built_in">readlink</span>(exe, path, PATH_MAX)) &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        path[len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="comment">/* Find ProcName */</span></span><br><span class="line">        s = <span class="built_in">strrchr</span>(path, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="literal">NULL</span>) <span class="keyword">continue</span>;</span><br><span class="line">        s++;</span><br><span class="line">        <span class="comment">/* we don&#x27;t need small name len */</span></span><br><span class="line">        namelen = <span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">if</span> (namelen &lt; pnlen) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strncmp</span>(ProcName, s, pnlen)) &#123;</span><br><span class="line">            <span class="comment">/* to avoid subname like search proc tao but proc taolinke matched */</span></span><br><span class="line">            <span class="keyword">if</span> (s[pnlen] == <span class="string">&#x27; &#x27;</span> || s[pnlen] == <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">                foundpid[i] = pid;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    foundpid[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">closedir</span>(dir);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clearOldProcessByName</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *monitorProcessName)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i, killFailed, findResult, oldPids[<span class="number">128</span>];</span><br><span class="line">    findResult = <span class="built_in">find_pid_by_name</span>(monitorProcessName, oldPids);</span><br><span class="line">    <span class="keyword">if</span> (!findResult) &#123;</span><br><span class="line">        <span class="keyword">if</span> (oldPids[<span class="number">0</span>] == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">LOGD</span>(<span class="string">&quot;have no old process!&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; oldPids[i] != <span class="number">0</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">LOGD</span>(<span class="string">&quot;old process pid=%d &quot;</span>, oldPids[i]);</span><br><span class="line">            <span class="comment">// return zero if kill process successfully</span></span><br><span class="line">            killFailed = <span class="built_in">kill</span>(oldPids[i], SIGKILL);</span><br><span class="line">            <span class="keyword">if</span> (killFailed) &#123;</span><br><span class="line">                <span class="built_in">LOGD</span>(<span class="string">&quot;kill old process pid=%d failed!&quot;</span>, oldPids[i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">LOGD</span>(<span class="string">&quot;kill old process pid=%d success!&quot;</span>, oldPids[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">LOGE</span>(<span class="string">&quot;clear old process failed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">JNIEXPORT <span class="type">void</span> JNICALL</span></span><br><span class="line"><span class="function"><span class="title">Java_com_netease_uninstallmonitor_MainActivity_monitorUsingPoll</span><span class="params">(JNIEnv *env, jobject instance,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                                jstring pkgDir_, jint sdkVersion_,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                                jstring openUrl_)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *pkgDir = env-&gt;<span class="built_in">GetStringUTFChars</span>(pkgDir_, <span class="number">0</span>);</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *openUrl = env-&gt;<span class="built_in">GetStringUTFChars</span>(openUrl_, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// need to clear old process</span></span><br><span class="line">    <span class="built_in">clearOldProcessByName</span>(monitorProcessName);</span><br><span class="line">    <span class="type">int</span> state = fork();</span><br><span class="line">    <span class="keyword">if</span> (state &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">LOGD</span>(<span class="string">&quot;parent process = %d&quot;</span>, state);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">LOGD</span>(<span class="string">&quot;child process = %d&quot;</span>, state);</span><br><span class="line">        <span class="type">int</span> stop = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!stop) &#123;</span><br><span class="line">            <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">            FILE *file = <span class="built_in">fopen</span>(pkgDir, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="built_in">LOGD</span>(<span class="string">&quot;app uninstalled already!&quot;</span>);</span><br><span class="line">                <span class="built_in">loadUrl</span>(sdkVersion_, openUrl);</span><br><span class="line">                stop = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">LOGD</span>(<span class="string">&quot;Error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    env-&gt;<span class="built_in">ReleaseStringUTFChars</span>(pkgDir_, pkgDir);</span><br><span class="line">    env-&gt;<span class="built_in">ReleaseStringUTFChars</span>(openUrl_, openUrl);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">JNIEXPORT <span class="type">void</span> JNICALL</span></span><br><span class="line"><span class="function"><span class="title">Java_com_netease_uninstallmonitor_MainActivity_monitorUsingNotify</span><span class="params">(JNIEnv *env, jobject instance,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                                  jstring pkgDir_, jint sdkVersion,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                                  jstring openUrl_)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *pkgDir = env-&gt;<span class="built_in">GetStringUTFChars</span>(pkgDir_, <span class="number">0</span>);</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *openUrl = env-&gt;<span class="built_in">GetStringUTFChars</span>(openUrl_, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// need to clear old process</span></span><br><span class="line">    <span class="built_in">clearOldProcessByName</span>(monitorProcessName);</span><br><span class="line">    <span class="type">int</span> pid = fork();</span><br><span class="line">    <span class="keyword">if</span> (pid &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">LOGD</span>(<span class="string">&quot;parent process = %d&quot;</span>, pid);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">LOGD</span>(<span class="string">&quot;child process = %d&quot;</span>, pid);</span><br><span class="line">        <span class="built_in">prctl</span>(PR_SET_NAME, monitorProcessName);</span><br><span class="line">        <span class="comment">// register notify listener</span></span><br><span class="line">        <span class="type">int</span> fd = <span class="built_in">inotify_init</span>();</span><br><span class="line">        <span class="keyword">if</span> (fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">LOGD</span>(<span class="string">&quot;inofity_init failed!!!&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> wd = <span class="built_in">inotify_add_watch</span>(fd, pkgDir, IN_DELETE);</span><br><span class="line">        <span class="keyword">if</span> (wd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">LOGD</span>(<span class="string">&quot;inotify_add_watch failed !!!&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// handle an event once a time</span></span><br><span class="line">        <span class="type">void</span> *p_buf = <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(inotify_event));</span><br><span class="line">        <span class="keyword">if</span> (p_buf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">LOGD</span>(<span class="string">&quot;malloc failed!!!&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">LOGD</span>(<span class="string">&quot;start listen&quot;</span>);</span><br><span class="line">        <span class="comment">// block session until file delete</span></span><br><span class="line">        <span class="built_in">read</span>(fd, p_buf, <span class="built_in">sizeof</span>(<span class="keyword">struct</span> inotify_event));</span><br><span class="line">        <span class="built_in">free</span>(p_buf);</span><br><span class="line">        <span class="built_in">inotify_rm_watch</span>(fd, IN_DELETE);</span><br><span class="line">        <span class="built_in">loadUrl</span>(sdkVersion, openUrl);</span><br><span class="line">        <span class="built_in">LOGD</span>(<span class="string">&quot;end listen&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">LOGD</span>(<span class="string">&quot;Error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    env-&gt;<span class="built_in">ReleaseStringUTFChars</span>(pkgDir_, pkgDir);</span><br><span class="line">    env-&gt;<span class="built_in">ReleaseStringUTFChars</span>(openUrl_, openUrl);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.netease.uninstallmonitor;</span><br><span class="line"><span class="keyword">import</span> android.os.Build;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="type">TextView</span> <span class="variable">tv</span> <span class="operator">=</span> (TextView) findViewById(R.id.sample_text);</span><br><span class="line">        tv.setText(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">pkgDir</span> <span class="operator">=</span> <span class="string">&quot;/data/data/&quot;</span> + getPackageName();</span><br><span class="line">        monitorUsingNotify(pkgDir, Build.VERSION.SDK_INT, <span class="string">&quot;https://www.google.com&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">monitorUsingPoll</span><span class="params">(String pkgDir, <span class="type">int</span> sdkVersion, String openUrl)</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * recommend using this way</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pkgDir</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sdkVersion</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> openUrl</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">monitorUsingNotify</span><span class="params">(String pkgDir, <span class="type">int</span> sdkVersion, String openUrl)</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;uninstall_feedback&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-缺陷"><a href="#6-缺陷" class="headerlink" title="6. 缺陷"></a>6. 缺陷</h3><p>Android 5.0之后，对后台进程的限制更加严格。当应用卸载后，和应用同在一个用户组的进程也会被杀掉，这意味着通过fork函数创建出来的子进程在app卸载时，也会同时被系统杀死，导致方法失效。</p><h3 id="7-源码"><a href="#7-源码" class="headerlink" title="7. 源码"></a>7. 源码</h3><p><a href="https://github.com/nancyyihao/UninstallMonitor">UninstallMonitor</a></p><h3 id="8-参考"><a href="#8-参考" class="headerlink" title="8. 参考"></a>8. 参考</h3><p><a href="http://blog.csdn.net/wang_shaner/article/details/41543787">android卸载反馈实现</a></p><p><a href="http://blog.csdn.net/jiangwei0910410003/article/details/42177117">Android卸载程序之后跳转到指定的反馈页面</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 卸载反馈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android-动态切换主题</title>
      <link href="/2017/02/27/Android-Change-Theme-Dynamically/"/>
      <url>/2017/02/27/Android-Change-Theme-Dynamically/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>对于资讯阅读类app的来说，夜间模式是必不可少的。本文提供一种不重启Activity实现动态切换主题的方案。</p><span id="more"></span><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>基于接口回调机制，每个基类(BaseActivity)都实现同一个接口 ThemeChangeCallback</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ThemeChangeCallback</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">onChangeTheme</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用一个列表保存ThemeChangeCallback</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;ThemeChangeCallback&gt; sCallbacks = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;ThemeChangeCallback&gt;();</span><br></pre></td></tr></table></figure><p>当改变主题时，对每个ThemeChangeCallback调用onChangeTheme，然后在BaseActivity的onChangeTheme方法中实现背景或者资源的切换即可.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">changeTheme</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (ThemeChangeCallback callback : sCallbacks)</span><br><span class="line">        <span class="keyword">if</span> (callback != <span class="literal">null</span>)</span><br><span class="line">            callback.onChangeTheme();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p><strong>BaseActitivy.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title class_">ThemeUtils</span>.ThemeChangeCallback &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        ThemeUtils.addCallback(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        ThemeUtils.removeCallback(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onChangeTheme</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Drawable</span> <span class="variable">drawable</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (ThemeUtils.getCurrentThemeId() == ThemeUtils.DAY_THEME_ID) &#123;</span><br><span class="line">            drawable = getResources().getDrawable(R.color.colorPrimary);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ThemeUtils.getCurrentThemeId() == ThemeUtils.NIGHT_THEME_ID) &#123;</span><br><span class="line">            drawable = getResources().getDrawable(R.color.colorAccent);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (getWindow() != <span class="literal">null</span>) &#123;</span><br><span class="line">            getWindow().setBackgroundDrawable(drawable);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (getSupportActionBar() != <span class="literal">null</span>) &#123;</span><br><span class="line">            getSupportActionBar().setBackgroundDrawable(drawable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>MainActivity.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">BaseActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">btn</span> <span class="operator">=</span> (Button) findViewById(R.id.btn_change_bg);</span><br><span class="line">        btn.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                ThemeUtils.changeTheme();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ThemeUtils.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThemeUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;ThemeChangeCallback&gt; sCallbacks = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;ThemeChangeCallback&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">sCurrentThemeId</span> <span class="operator">=</span> <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">DAY_THEME_ID</span> <span class="operator">=</span> <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">NIGHT_THEME_ID</span> <span class="operator">=</span> <span class="number">1</span> ;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ThemeUtils</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addCallback</span><span class="params">(ThemeChangeCallback callback)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (callback != <span class="literal">null</span>) &#123;</span><br><span class="line">            sCallbacks.add(callback);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeCallback</span><span class="params">(ThemeChangeCallback callback)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (callback != <span class="literal">null</span>) &#123;</span><br><span class="line">            sCallbacks.remove(callback);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">changeTheme</span><span class="params">()</span> &#123;</span><br><span class="line">        sCurrentThemeId = sCurrentThemeId == DAY_THEME_ID ? NIGHT_THEME_ID : DAY_THEME_ID;</span><br><span class="line">        <span class="keyword">for</span> (ThemeChangeCallback callback : sCallbacks)</span><br><span class="line">            <span class="keyword">if</span> (callback != <span class="literal">null</span>)</span><br><span class="line">                callback.onChangeTheme();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getCurrentThemeId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sCurrentThemeId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">ThemeChangeCallback</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">onChangeTheme</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>activity_main.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/activity_main&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingBottom</span>=<span class="string">&quot;@dimen/activity_vertical_margin&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingLeft</span>=<span class="string">&quot;@dimen/activity_horizontal_margin&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingRight</span>=<span class="string">&quot;@dimen/activity_horizontal_margin&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingTop</span>=<span class="string">&quot;@dimen/activity_vertical_margin&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;com.netease.changetheme.MainActivity&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn_change_bg&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;change bg&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_centerInParent</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/2017/02/27/Android-Change-Theme-Dynamically/p1.gif" alt="图1"></p><h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><p>改变背景色时，沉浸式状态栏没有相应改变，有待优化。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取textview行数</title>
      <link href="/2017/02/27/Android-Get-Textview-Line-Number/"/>
      <url>/2017/02/27/Android-Get-Textview-Line-Number/</url>
      
        <content type="html"><![CDATA[<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Canvas;</span><br><span class="line"><span class="keyword">import</span> android.text.Layout;</span><br><span class="line"><span class="keyword">import</span> android.text.Layout.Alignment;</span><br><span class="line"><span class="keyword">import</span> android.text.StaticLayout;</span><br><span class="line"><span class="keyword">import</span> android.text.TextUtils;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jasonkent27</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * TextView第二行文字超过一半则自动略去,并添加省略号</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomWidgetTextView</span> <span class="keyword">extends</span> <span class="title class_">TextView</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> <span class="variable">mLineSpacingMultiplier</span> <span class="operator">=</span> <span class="number">1.0f</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> <span class="variable">mLineAdditionalVerticalPadding</span> <span class="operator">=</span> <span class="number">0.0f</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * setText时需要置为true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">mNeedResetText</span> <span class="operator">=</span> <span class="literal">true</span> ;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomWidgetTextView</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(context, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomWidgetTextView</span><span class="params">(Context context, AttributeSet attrs)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(context, attrs, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomWidgetTextView</span><span class="params">(Context context, AttributeSet attrs, <span class="type">int</span> defStyle)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, attrs, defStyle);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">onTextChanged</span><span class="params">(CharSequence text, <span class="type">int</span> start, <span class="type">int</span> lengthBefore, <span class="type">int</span> lengthAfter)</span> &#123;</span><br><span class="line">        mNeedResetText = <span class="literal">true</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDraw</span><span class="params">(Canvas canvas)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mNeedResetText) &#123;</span><br><span class="line">            resetText();</span><br><span class="line">            mNeedResetText = <span class="literal">false</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">super</span>.onDraw(canvas);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重TextView内部文字渲染逻辑</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">resetText</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!TextUtils.isEmpty(getText())) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">origText</span> <span class="operator">=</span> getText().toString();</span><br><span class="line">            String firstLineText ;</span><br><span class="line">            String secondLineText ;</span><br><span class="line">            <span class="type">String</span> <span class="variable">resultText</span> <span class="operator">=</span> origText ;</span><br><span class="line">            <span class="type">Layout</span> <span class="variable">layout</span> <span class="operator">=</span> createRenderLayout(origText, getWidth() - getPaddingLeft() - getPaddingRight());</span><br><span class="line">            <span class="keyword">if</span> (layout.getLineCount() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//取出第一,二行文字</span></span><br><span class="line">                firstLineText = origText.substring(<span class="number">0</span>, layout.getLineEnd(<span class="number">0</span>));</span><br><span class="line">                secondLineText = origText.substring(layout.getLineEnd(<span class="number">0</span>)+<span class="number">1</span>, layout.getLineEnd(<span class="number">1</span>));</span><br><span class="line">                <span class="type">Layout</span> <span class="variable">layout2</span> <span class="operator">=</span> createRenderLayout(secondLineText, (getWidth() - getPaddingLeft() - getPaddingRight()) / <span class="number">2</span>);</span><br><span class="line">                <span class="comment">//第二行文字长度过半,则截断并且添加省略符</span></span><br><span class="line">                <span class="keyword">if</span> (layout2.getLineCount() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                    secondLineText = secondLineText.substring(<span class="number">0</span>, layout2.getLineEnd(<span class="number">0</span>)) + <span class="string">&quot;...&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                resultText = firstLineText + secondLineText ;</span><br><span class="line">            &#125;</span><br><span class="line">            setText(resultText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> workingText</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> width</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> StaticLayout <span class="doctag">@See</span> https://developer.android.com/reference/android/text/StaticLayout.html</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Layout <span class="title function_">createRenderLayout</span><span class="params">(CharSequence workingText, <span class="type">int</span> width)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StaticLayout</span>(</span><br><span class="line">                workingText,</span><br><span class="line">                getPaint(),</span><br><span class="line">                width,</span><br><span class="line">                Alignment.ALIGN_NORMAL,</span><br><span class="line">                mLineSpacingMultiplier,</span><br><span class="line">                mLineAdditionalVerticalPadding,</span><br><span class="line">                <span class="literal">false</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android-listview-分析</title>
      <link href="/2017/02/27/android-listview-analysis/"/>
      <url>/2017/02/27/android-listview-analysis/</url>
      
        <content type="html"><![CDATA[<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>从Adapter.getView方法入手, 找到了 AbsListView.obtainView,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Get a view and have it show the data associated with the specified</span></span><br><span class="line"><span class="comment">   * position. This is called when we have already discovered that the view is</span></span><br><span class="line"><span class="comment">   * not available for reuse in the recycle bin. The only choices left are</span></span><br><span class="line"><span class="comment">   * converting an old view or making a new one.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> position The position to display</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> isScrap Array of at least 1 boolean, the first entry will become true if</span></span><br><span class="line"><span class="comment">   *                the returned view was taken from the scrap heap, false if otherwise.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> A view displaying the data associated with the specified position</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  View <span class="title function_">obtainView</span><span class="params">(<span class="type">int</span> position, <span class="type">boolean</span>[] isScrap)</span> &#123;</span><br><span class="line">      isScrap[<span class="number">0</span>] = <span class="literal">false</span>;</span><br><span class="line">      <span class="comment">// Check whether we have a transient state view. Attempt to re-bind the</span></span><br><span class="line">      <span class="comment">// data and discard the view if we fail.</span></span><br><span class="line">      <span class="keyword">final</span> <span class="type">View</span> <span class="variable">transientView</span> <span class="operator">=</span> mRecycler.getTransientStateView(position);</span><br><span class="line">      <span class="keyword">if</span> (transientView != <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">final</span> <span class="type">LayoutParams</span> <span class="variable">params</span> <span class="operator">=</span> (LayoutParams) transientView.getLayoutParams();</span><br><span class="line">          <span class="comment">// If the view type hasn&#x27;t changed, attempt to re-bind the data.</span></span><br><span class="line">          <span class="keyword">if</span> (params.viewType == mAdapter.getItemViewType(position)) &#123;</span><br><span class="line">              <span class="keyword">final</span> <span class="type">View</span> <span class="variable">updatedView</span> <span class="operator">=</span> mAdapter.getView(position, transientView, <span class="built_in">this</span>);</span><br><span class="line">              <span class="comment">// If we failed to re-bind the data, scrap the obtained view.</span></span><br><span class="line">              <span class="keyword">if</span> (updatedView != transientView) &#123;</span><br><span class="line">                  setItemViewLayoutParams(updatedView, position);</span><br><span class="line">                  mRecycler.addScrapView(updatedView, position);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          isScrap[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">          <span class="comment">// Finish the temporary detach started in addScrapView().</span></span><br><span class="line">          transientView.dispatchFinishTemporaryDetach();</span><br><span class="line">          <span class="keyword">return</span> transientView;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">final</span> <span class="type">View</span> <span class="variable">scrapView</span> <span class="operator">=</span> mRecycler.getScrapView(position);</span><br><span class="line">      <span class="keyword">final</span> <span class="type">View</span> <span class="variable">child</span> <span class="operator">=</span> mAdapter.getView(position, scrapView, <span class="built_in">this</span>);</span><br><span class="line">      <span class="keyword">if</span> (scrapView != <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (child != scrapView) &#123;</span><br><span class="line">              <span class="comment">// Failed to re-bind the data, return scrap to the heap.</span></span><br><span class="line">              mRecycler.addScrapView(scrapView, position);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              isScrap[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">              <span class="comment">// Finish the temporary detach started in addScrapView().</span></span><br><span class="line">              child.dispatchFinishTemporaryDetach();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">...... <span class="comment">// 省略部分代码</span></span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> child;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>我们把目光放在mRecycler上，其实就是一个RecyclerBin对象，负责缓存View对象，这是ListView复用机制的精华所在，有必要好好刨析这个类. RecyclerBin中各个变量的定义如下：</p><p>&#x2F;&#x2F;回收Listener，当View变为可回收，即ScrapView时，会通过mRecyclerListener通知注册者，listener可通过setRecyclerListener注册</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> RecyclerListener mRecyclerListener;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The position of the first view stored in mActiveViews.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 第一个活动view的position，即第一个可视view的position</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> mFirstActivePosition;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Views that were on screen at the start of layout. This array is populated at the start of</span></span><br><span class="line"><span class="comment"> * layout, and at the end of layout all view in mActiveViews are moved to mScrapViews.</span></span><br><span class="line"><span class="comment"> * Views in mActiveViews represent a contiguous range of Views, with position of the first</span></span><br><span class="line"><span class="comment"> * view store in mFirstActivePosition.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 活动view的集合</span></span><br><span class="line"><span class="keyword">private</span> View[] mActiveViews = <span class="keyword">new</span> <span class="title class_">View</span>[<span class="number">0</span>];</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Unsorted views that can be used by the adapter as a convert view.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**废弃的可修复view集合，复用时传递到Adapter#getView方法的convertView参数。</span></span><br><span class="line"><span class="comment"> * 因为item type可能大于1，只有view type相同的view之间才能复用，所以是个二维数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> ArrayList&lt;View&gt;[] mScrapViews;</span><br><span class="line"><span class="comment">// ListView item type数量</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> mViewTypeCount;</span><br><span class="line"><span class="comment">// 当前的废弃view数组，定义这个成员是为了在mViewTypeCount为1时使用方便，不需要去取mScrapViews的第一个元素</span></span><br><span class="line"><span class="keyword">private</span> ArrayList&lt;View&gt; mCurrentScrap;</span><br><span class="line"><span class="comment">// 被跳过的，不能复用的view集合。view type小于0或者处理transient状态的view不能被复用。</span></span><br><span class="line"><span class="keyword">private</span> ArrayList&lt;View&gt; mSkippedScrap;</span><br><span class="line"><span class="comment">// 处于 transient状态的view集合，处于transient状态的view不能被复用，如view的动画正在播放，</span></span><br><span class="line"><span class="comment">// transient是瞬时、过渡的意思，关于transient状态详见android.view.View#PFLAG2_HAS_TRANSIENT_STATE</span></span><br><span class="line"><span class="keyword">private</span> SparseArray&lt;View&gt; mTransientStateViews;</span><br><span class="line"><span class="comment">// 如果adapter的hasStableIds方法返回true，处于过度状态的view保存到这里。因为需要保存view的position，而且处于过度状态的view一般很少，</span></span><br><span class="line"><span class="comment">// 这2个成员用了稀疏数组。具体不需要case，知道是保存转换状态view的集合就行。</span></span><br><span class="line"><span class="keyword">private</span> LongSparseArray&lt;View&gt; mTransientStateViewsById;</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><p><a href="http://blog.csdn.net/zwjemperor/article/details/52564098">Android ListView复用机制详解</a></p></li><li><p><a href="http://blog.csdn.net/checkin001/article/details/50097797">RecyclerView与ListView对比浅析（二）：View缓存篇</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2016总结</title>
      <link href="/2016/12/31/2016-summary/"/>
      <url>/2016/12/31/2016-summary/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>2016转眼就过去了，工作以后开始感叹时间飞逝。在2016的最后一天，总结一下这一年的得与失，也算是对自己有个交代吧。</p><span id="more"></span><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>2016年发生过不少事，自己也做过不少决定，有些决定现在看来是愚蠢的，不过我并不后悔。我做了当初自己认为最好的决定，遵从当下自己内心的决定，一旦选择就头也不回地走下去。下面就来回顾一下自己的2016历程吧。</p><h4 id="决定不考研"><a href="#决定不考研" class="headerlink" title="决定不考研"></a>决定不考研</h4><p>其实读不读研我在2015年3月到6月之间就一直在犹豫，直到后来去了京东金融实习后，才慢慢淡化了读研的念头，直至8月中旬测底放弃读研念头，放弃考研。当时的我认为，在国内读研可能对自己能力提升没有直接工作大，因为自己比较喜欢做移动开发，读研后也会选择这个方向，与其在实验室里给导师干活，不如直接出去工作。就现在看来，这个决定是正确的。至于从以后的角度看，是否正确，谁能说得准呢？</p><h4 id="决定离开京东金融"><a href="#决定离开京东金融" class="headerlink" title="决定离开京东金融"></a>决定离开京东金融</h4><p>这是我今年做过的最艰难的决定之一，因为我在里面工作得很开心，也很充足，不仅经常有团建，大家经常一起去吃饭，而且我们还会经常一起打篮球（这是我最大的爱好）。更重要的是，我感觉自己很适合这个团队，和大家相处得很好，而且整个集团也在高速发展，金融也是自己比较喜欢的方向。然而，我最终还是决定离开了，带着许多的不舍，还是离开了，投奔了猪厂。投奔猪厂的初心是想要学习网易做产品的思路，网易的产品口碑在业内是一流的。如果能在里面学得一招半式，这个决定也值了。</p><h4 id="考驾照"><a href="#考驾照" class="headerlink" title="考驾照"></a>考驾照</h4><p>决定考驾照这个事其实是2015年就有打算，只是一直没有机会，也没有时间，大四下完全没有了课程，才腾出时间去考。3月份报名，5月份便拿到了驾照，科目一到科目四，一遍过。不得不说东方时尚的确是个专业的驾校，从报名到考试，都是一手帮你包办，你只需要做的就是认真学习，通过考试。不用给教练送礼，这一点是非常赞的。这应该是大学期间除了四、六级之外最重要的一个证书了。</p><h4 id="毕业答辩"><a href="#毕业答辩" class="headerlink" title="毕业答辩"></a>毕业答辩</h4><p>说实话，大学这四年，自己一都是表现平平，一次奖学金都没有拿过，不是说自己不想拿，而是自己的确没有认认真真把心放在学习上。大一大部分时间都用来折腾黑苹果，大二大部分时间都用来学习编程（C++，JAVA），大三则把大部分时间花在学习Android上，每次都是考试前一两个星期，突击学习一下，我又不是天才，拿不到奖学金也是理所当然了。等到大四的时候，毕业论文选了一个自己比较擅长的课题，移动App开发，自己从准备到实践，包括最终的论文，自己花了很大的精力，论文准备期间我还顺便出去学车，那段时间想想是挺苦，大四上学期大部分时间用来找工作，大四下则用来写论文和学车，想想是挺充实的。虽然毕业论文也是求过的心态，自己还是花了很大精力去做，不为别的，只为给自己这四年做个交代。本来也不想申请优秀论文（手续繁杂，也不想和教务处那些人打交道），大概是自己比较认真，论文写了近百页（大部分人也就写个四五十页），指导老师还是给我做了思想工作，最终还是妥协了，不想和导师闹僵。答辩顺利通过，最终也得了个优秀论文。至此，大学生涯结束了。</p><h4 id="入职网易"><a href="#入职网易" class="headerlink" title="入职网易"></a>入职网易</h4><p>6月14日，入职网易。7月1日正式入职。从环境上来说还是很赞的，不过说实话，整个团队的凝聚力远远没有上家公司那么高，团建也很少，不过技术底子还是很深厚的。</p><h4 id="转正答辩"><a href="#转正答辩" class="headerlink" title="转正答辩"></a>转正答辩</h4><p>从7月1日入职，转眼间半年过去，转正答辩定在12月27日。其实转正答辩就是走个过场罢了。网易这么久以来，还没有见过转正不通过的人。这段时间自己确实成长了不少，有关于技术方面的，也有关于人际关系、沟通等方面的提升。自己从一开始来什么都不了解，到现在已经基本能够独立完成版本需求迭代任务了。</p><h3 id="得与失"><a href="#得与失" class="headerlink" title="得与失"></a>得与失</h3><p>这一年得到了驾照、毕业证书，得到了入职网易的机会，得到了每个月公司发的工资，然而不可避免地失去了一年的时间，失去了4.8的视力。自工作以来，运动越来越少了，自己的视力一直在下降，12月份那次感冒是我来北京以来生过最大的一场病，这是一个提醒！需要在以后的时间注意工作与生活的平衡。</p><h3 id="展望2017"><a href="#展望2017" class="headerlink" title="展望2017"></a>展望2017</h3><p>2017年，我需要在两个方面进行提升</p><h4 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h4><p>在技术方面，我要做到中级工程师做具备的能力，同时关注前沿技术</p><ul><li>深入理解View的原理，自定义View顺手拈来</li><li>写系列源码分析文章，分析ListView，RecyclerView、Fragment、Window、Activity源码</li><li>学习公司内部热修复原理并自己能写出demo</li><li>了解binder、多进程相关原理</li><li>了解HTTPS，TCP&#x2F;IP等网络相关知识</li><li>关注插件化技术</li><li>关注微信小程序新技术发展</li><li>launch自己的项目</li></ul><h4 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h4><p>在读书方面，我希望能够完成以下书单，并写读书笔记</p><p>经济相关</p><ul><li>《国富论》</li></ul><p>心理学、社会学相关</p><ul><li>《梦的解析》</li><li>《乌合之众—大众心理学研究》</li><li>《人类简史—从动物到上帝》</li><li>《九型人格》</li></ul><p>其他</p><ul><li>《高效能人士的七个习惯》</li><li>《哥德尔、艾舍尔、巴赫—集异璧之大成》</li><li>《傲慢与偏见》</li><li>《全球通史》</li><li>《无价》</li><li>《文明的冲突与世界秩序的重建》</li><li>《数字化生存》</li><li>《人性的弱点》</li><li>《组织中的传播和权力》</li><li>《政府论》</li><li>《正义论》</li><li>《战争论》</li><li>《影响力》</li><li>《新教伦理与资本主义精神》</li></ul><h3 id="end"><a href="#end" class="headerlink" title="end"></a>end</h3><p>一年之后的我会变成怎样？一年后再来看答案。</p>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thinking </tag>
            
            <tag> Summary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义控件-仿网易新闻专题跳转</title>
      <link href="/2016/12/25/custom-view-like-news-app/"/>
      <url>/2016/12/25/custom-view-like-news-app/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>不知道大家用过网易新闻没？点击进入到专题中，就有可能出现如下图所示的导航栏，点击任意一个导航块，就会自动跳转到相应的地方，这是怎么实现的呢？</p><span id="more"></span><p><img src="/2016/12/25/custom-view-like-news-app/a.jpg" alt="图1"></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>我们先把功能一个一个拆开，上方的导航块可以使用gridview来实现，而下方的最新消息、独家策划等和新闻都当作一个item放在listview中，点击了gridview的相应位置A，就调用listview的setSelection方法跳转到listview对应位置即可</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>为了实现listview中可以展示不同item，提高代码复用，我们把最新消息、独家策划等抽象成GroupView、而把新闻抽象成ChildView，用GroupAdapter来实现展示展示逻辑，并提供两个抽象方法getChildView和getGroupView给子类去实现。子类不需要关系具体的位置计算，只需要覆写getChildView和getGroupView两个方法即可。T表示groupview的数据类型，S表示childview的数据类型。</p><p><strong>GroupAdapter</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">package</span> com.github.jason.demos;</span><br><span class="line"><span class="keyword">import</span> android.util.Pair;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> android.widget.BaseAdapter;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by jason on 2016/12/25.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">GroupAdapter</span>&lt;T, S&gt; <span class="keyword">extends</span> <span class="title class_">BaseAdapter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Pair&lt;T, List&lt;S&gt;&gt;&gt; mList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; mGroupPositions = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GroupAdapter</span><span class="params">(List&lt;Pair&lt;T, List&lt;S&gt;&gt;&gt; list)</span> &#123;</span><br><span class="line">            mList = list ;</span><br><span class="line">        calcGroupPositions();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setList</span><span class="params">(List&lt;Pair&lt;T, List&lt;S&gt;&gt;&gt; list, <span class="type">boolean</span> noitfy)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(mList != <span class="literal">null</span>)&#123;</span><br><span class="line">            mList = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mList = list;</span><br><span class="line">        calcGroupPositions();</span><br><span class="line">        <span class="keyword">if</span>(noitfy)&#123;</span><br><span class="line">            notifyDataSetChanged();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> View <span class="title function_">getChildView</span><span class="params">(<span class="type">int</span> listPosition, <span class="type">int</span> childPosition, <span class="type">int</span> groupPosition , View convertView, ViewGroup parent)</span>;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> View <span class="title function_">getGroupView</span><span class="params">(<span class="type">int</span> listPosition, <span class="type">int</span> groupPosition, View convertView, ViewGroup parent)</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getItemViewType</span><span class="params">(<span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isGroup(position) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getViewTypeCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> calcCount();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> S <span class="title function_">getItem</span><span class="params">(<span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isGroup(position)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">group</span> <span class="operator">=</span> getGroupPosition(position);</span><br><span class="line">        <span class="type">int</span> <span class="variable">child</span> <span class="operator">=</span> getChildPosition(position);</span><br><span class="line">        <span class="keyword">return</span> getChild(group,child);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">long</span> <span class="title function_">getItemId</span><span class="params">(<span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">getView</span><span class="params">(<span class="type">int</span> position, View convertView, ViewGroup parent)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isGroup(position)) &#123;</span><br><span class="line">            <span class="keyword">return</span> getGroupView(position, getGroupPosition(position), convertView, parent);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getChildView(position, getChildPosition(position), getGroupPosition(position), convertView, parent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> S <span class="title function_">getChild</span><span class="params">(<span class="type">int</span> groupPosition, <span class="type">int</span> childPosition)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (groupPosition &lt; <span class="number">0</span> || groupPosition&gt;=mList.size()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (childPosition &lt; <span class="number">0</span> || childPosition &gt;= mList.get(groupPosition).second.size()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mList.get(groupPosition).second.get(childPosition);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> T <span class="title function_">getGroup</span><span class="params">(<span class="type">int</span> groupPosition)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (groupPosition &lt; <span class="number">0</span> || groupPosition&gt;=mList.size()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mList.get(groupPosition).first;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">isGroup</span><span class="params">(<span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> mGroupPositions.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span> ; i&lt;N ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (position == mGroupPositions.get(i))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getGroupPosition</span><span class="params">(<span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> mGroupPositions.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span> ; i&lt;N ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (position &lt; mGroupPositions.get(i))</span><br><span class="line">                <span class="keyword">return</span> i-<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> N-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getPositionByGroupPosition</span><span class="params">(<span class="type">int</span> groupPosition)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (groupPosition &gt;= mList.size()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mGroupPositions.get(groupPosition);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getChildPosition</span><span class="params">(<span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">group</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> mGroupPositions.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span> ; i&lt;N ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (position &lt; mGroupPositions.get(i)) &#123;</span><br><span class="line">                group =  mGroupPositions.get(i-<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (group == -<span class="number">1</span>) &#123;</span><br><span class="line">            group = mGroupPositions.get(N-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> position - group - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">calcGroupPositions</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> mList.size();</span><br><span class="line">        <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        mGroupPositions.clear();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i&lt;len ; i++) &#123;</span><br><span class="line">            Pair&lt;T, List&lt;S&gt;&gt; pair = mList.get(i);</span><br><span class="line">            mGroupPositions.add(total);</span><br><span class="line">            total += pair.second.size()+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">calcCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mGroupPositions.get(mGroupPositions.size() - <span class="number">1</span> ) + mList.get(mList.size()-<span class="number">1</span>).second.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GroupAdapterEx类很简单，直接覆写getChildView和getGroupView。注意：这里为了简单，没有用ViewHolder进行优化，用到项目中最好使用ViewHolder进行优化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">package</span> com.github.jason.demos;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.util.Pair;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by jason on 2016/12/25.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GroupAdapterEx</span> <span class="keyword">extends</span> <span class="title class_">GroupAdapter</span>&lt;String, String&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GroupAdapterEx</span><span class="params">(Context context, List&lt;Pair&lt;String, List&lt;String&gt;&gt;&gt; list)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(list);</span><br><span class="line">        mContext = context;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">getChildView</span><span class="params">(<span class="type">int</span> listPosition, <span class="type">int</span> childPosition, <span class="type">int</span> groupPosition, View convertView, ViewGroup parent)</span> &#123;</span><br><span class="line">        <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> LayoutInflater.from(mContext).inflate(R.layout.list_item_2, parent, <span class="literal">false</span>);</span><br><span class="line">        <span class="type">TextView</span> <span class="variable">tv</span> <span class="operator">=</span> (TextView) view.findViewById(R.id.son);</span><br><span class="line">        <span class="type">String</span> <span class="variable">child</span> <span class="operator">=</span> getChild(groupPosition, childPosition);</span><br><span class="line">        tv.setText(child);</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">getGroupView</span><span class="params">(<span class="type">int</span> listPosition, <span class="type">int</span> groupPosition, View convertView, ViewGroup parent)</span> &#123;</span><br><span class="line">        <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> LayoutInflater.from(mContext).inflate(R.layout.list_item_1, parent, <span class="literal">false</span>);</span><br><span class="line">        <span class="type">TextView</span> <span class="variable">tv</span> <span class="operator">=</span> (TextView) view.findViewById(R.id.father);</span><br><span class="line">        <span class="type">String</span> <span class="variable">group</span> <span class="operator">=</span> getGroup(groupPosition);</span><br><span class="line">        tv.setText(group);</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>布局文件<br>如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--list_item.xml--&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span> <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/text&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- list_item_1.xml--&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span> <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/father&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;left&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;我是你爷爷&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- list_item_2.xml--&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span> <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/son&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;孙子在这里&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- activity_main_2.xml--&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span> <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">GridView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/nav_list&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;3dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@color/colorAccent&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ListView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/list&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>MainActivity类</strong><br>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.jason.demos;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Pair;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> android.widget.AdapterView;</span><br><span class="line"><span class="keyword">import</span> android.widget.BaseAdapter;</span><br><span class="line"><span class="keyword">import</span> android.widget.GridView;</span><br><span class="line"><span class="keyword">import</span> android.widget.ListView;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title class_">AdapterView</span>.OnItemClickListener&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; mNaviDataList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Pair&lt;String, List&lt;String&gt;&gt;&gt; mGroupList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> ListView mDataListView;</span><br><span class="line">    <span class="keyword">private</span> GridView mNavListView;</span><br><span class="line">    <span class="keyword">private</span> GroupAdapterEx mDataAdapter;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main_2);</span><br><span class="line">        mDataListView = (ListView) findViewById(R.id.list);</span><br><span class="line">        makeFakeData();</span><br><span class="line">        mDataAdapter = <span class="keyword">new</span> <span class="title class_">GroupAdapterEx</span>(<span class="built_in">this</span>, mGroupList);</span><br><span class="line">        mDataListView.setAdapter(mDataAdapter);</span><br><span class="line">        mNavListView = (GridView) findViewById(R.id.nav_list);</span><br><span class="line">        mNavListView.setNumColumns(<span class="number">4</span>);</span><br><span class="line">        mNavListView.setAdapter(<span class="keyword">new</span> <span class="title class_">MyAdapter</span>(<span class="built_in">this</span>, mNaviDataList));</span><br><span class="line">        mNavListView.setOnItemClickListener(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onItemClick</span><span class="params">(AdapterView&lt;?&gt; parent, View view, <span class="type">int</span> position, <span class="type">long</span> id)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mDataListView != <span class="literal">null</span> &amp;&amp; mDataAdapter != <span class="literal">null</span>)</span><br><span class="line">            mDataListView.setSelection(mDataAdapter.getPositionByGroupPosition(position));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">makeFakeData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">6</span> ; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">title</span> <span class="operator">=</span> <span class="string">&quot;father&quot;</span> + i ;</span><br><span class="line">            mNaviDataList.add(title);</span><br><span class="line">            List&lt;String&gt; beanList = genBean(i);</span><br><span class="line">            Pair&lt;String, List&lt;String&gt;&gt; pair = <span class="keyword">new</span> <span class="title class_">Pair</span>&lt;&gt;(title, beanList);</span><br><span class="line">            mGroupList.add(pair);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; <span class="title function_">genBean</span><span class="params">(<span class="type">int</span> group)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span> ; i&lt;<span class="number">6</span> ; i++) &#123;</span><br><span class="line">            list.add(<span class="string">&quot;son&quot;</span>+group+i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">MyAdapter</span> <span class="keyword">extends</span> <span class="title class_">BaseAdapter</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> Context mContext;</span><br><span class="line">        <span class="keyword">private</span> List&lt;String&gt; mList ;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyAdapter</span><span class="params">(Context context, List&lt;String&gt; list)</span> &#123;</span><br><span class="line">            mContext = context;</span><br><span class="line">            mList = list;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mList.size();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">getItem</span><span class="params">(<span class="type">int</span> position)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mList.get(position);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getItemId</span><span class="params">(<span class="type">int</span> position)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> position;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> View <span class="title function_">getView</span><span class="params">(<span class="type">int</span> position, View convertView, ViewGroup parent)</span> &#123;</span><br><span class="line">            <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> LayoutInflater.from(mContext).inflate(R.layout.list_item, parent, <span class="literal">false</span>);</span><br><span class="line">            <span class="type">TextView</span> <span class="variable">tv</span> <span class="operator">=</span> (TextView) view.findViewById(R.id.text);</span><br><span class="line">            tv.setText(mList.get(position));</span><br><span class="line">            <span class="keyword">return</span> view;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>最终的实现效果是粗糙了一点，但是基本功能实现了(点击就能跳转到相应的位置)。想要做得更美观，只需把xml布局文件改改即可。</p><p><img src="/2016/12/25/custom-view-like-news-app/b.jpg" alt="图2"></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>news-app-analysis</title>
      <link href="/2016/12/18/news-app-analysis/"/>
      <url>/2016/12/18/news-app-analysis/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>周五和同事吃饭，聊着聊着就谈到了一个问题：是一个产品经理重要还是一个程序员重要？当时我的回答是两者都同样重要，理由是一个坏的产品经理会毁了一个好产品，一个坏的程序员会写低级bug，造成用户体验差，一个满是bug的app也不会有用户去使用。不过现在我倒觉得，产品经理的重要性要大过于程序员，如果招了一个不合格的产品经理，识别不出那些是用户真正的需求，那些是伪需求，任由其乱搞一通，被竞争对手干死。而如果招了一个不合格的程序员，在流程规范化的大公司中，程序员写的代码都会经过严格的测试，因此，程序的质量是有保证的。当然这个问题，仁者见仁，智者见智。</p><span id="more"></span><p>回到本文的主题，在新闻app领域，目前做得比较好的主要有三家：腾讯新闻、今日头条，网易新闻。腾讯新闻。</p><h3 id="腾讯新闻"><a href="#腾讯新闻" class="headerlink" title="腾讯新闻"></a>腾讯新闻</h3><p>腾讯新闻和网易新闻算是同一类型的新闻客户端。有QQ和微信在背后撑腰导流量，腾讯新闻的市场占有率目前排名第一，然而腾讯新闻最让人诟病的是其评论，评论下充满地域攻击（网易新闻也有）、评论内容低下，简直没法看。</p><h3 id="今日头条"><a href="#今日头条" class="headerlink" title="今日头条"></a>今日头条</h3><p>其实从严格意义上来讲，今日头条不算一个新闻客户端，而是是一个泛资讯类阅读客户端。今日头条是不生产新闻的，它只是负责内容分发。进入到头条首页，刷新几次，你会发现，其实跟新闻有关的并没有几条，都是各种跟新闻不着边小视频或者吸引人眼球的东西。当然也不能说这种资讯一点价值都没有，但是为了吸引人眼球的成分很大，这种新闻是无法留住那些想真正看新闻的高端用户的。这可能是同一个广告位，网易新闻要比头条卖得贵的原因之一。不过话说回来，今日头条的野心不仅仅是今日头条这个产品，众所周知，今日头条在算法推荐、机器学习领域有很深厚的技术储备，把这些技术作为解决方案商业化也未尝不可。至于以后今日头条的路能走多远，让我们拭目以待吧。</p><p><img src="/2016/12/18/news-app-analysis/p1.jpg" alt="图1"></p><p><img src="/2016/12/18/news-app-analysis/p2.jpg" alt="图2"></p><h3 id="网易新闻"><a href="#网易新闻" class="headerlink" title="网易新闻"></a>网易新闻</h3><p>网易新闻是最早做新闻app的。凭借良好的运营（网易新闻有很多小编）、精致的UI、以及有态度的Slogan，网易新闻圈得一大批忠实粉丝，精心打造的跟帖文化更是为网易新闻增色不少，网易新闻跟帖成为各种”人才”聚集地。我甚至听到有些朋友跟说，有时他们连新闻都没有看完就直接看跟帖。不过最近一两年，网易新闻的口碑有所下降，究其原因，我认为有二：其一，广告太多，头条栏目广告到处都是，而且还不能删除掉；其二：内容质量下降，这是致命的。今日头条和传统新闻媒体最大的不同是今日头条的新闻全部都是靠算法推荐的（张一鸣反对人工干预不是说着玩的），这是它的优点，这样可以减少人力，不用雇佣那么多的编辑，节省成本。这也是它的致命缺点，正是因为算法推荐，所以今日头条的新闻质量没法保证，所以它需要借助头条号来完善它的内容生态。然而，网易新闻也亦步亦趋跟着搞了个头条推荐，跟着搞了个网易号，网易号的部分内容不经审核就推送给用户，甚至有些为了吸引眼球而成了”标题党”，导致用户看到的内容质量下降得厉害。不过好在像轻松一刻、大国小民、人间这样”有态度”栏目还在，从一定程度上挽留了一些忠实用户。至于到后面机器推荐和人工挑选的比例应该如何权衡，以及广告的投放量，就看高层们如何决策了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>互联网技术的发展，彻底改变了信息的传播方式，原来新闻掌握在少数媒体公司的局面将被颠覆。自媒体的诞生和爆发，迎合了一部分人阅读资讯的需求，各种根据用户喜好推荐的app更是层出不穷，不管是腾讯新闻、网易新闻还是今日头条，都受到一定冲击（一个简单的指标是三家app的日活都遭受不同程度的下降）。可以预见，未来新闻资讯行业将呈现百花齐放的局面。</p>]]></content>
      
      
      <categories>
          
          <category> Thinking </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thinking </tag>
            
            <tag> Newsapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTPS的基本原理</title>
      <link href="/2016/12/03/how-https-works/"/>
      <url>/2016/12/03/how-https-works/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>HTTPS可以理解成HTTP + security，HTTPS解决了远程通信的安全问题。</p><span id="more"></span><h3 id="HTTP缺陷"><a href="#HTTP缺陷" class="headerlink" title="HTTP缺陷"></a>HTTP缺陷</h3><ol><li>使用明文通信，意味着信息有可能被窃取</li><li>不验证通信方身份，意味着有有可能遭到伪装</li><li>无法验证报文的完整性，可能会遭到纂改（中间人攻击MITM）</li></ol><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>想象一下，上课的时候，你需要传个消息告诉你心爱的TA。但是又不想让中间传纸条的同学知道你们之间的秘密。怎么办？</p><h4 id="对称加密和非对称加密"><a href="#对称加密和非对称加密" class="headerlink" title="对称加密和非对称加密"></a>对称加密和非对称加密</h4><p>如果你们俩之间有过约定（对称加密），显然事情就好办得多，比如你要传AAA给TA，第一个A代表meet，第二个A代表you，第三个A代表playground，那么你直接在纸条上写AAA即可。中间帮忙传纸条的同学就算看了纸条也不知道AAA代表神马意思。要是你们之间没有过约定，又不想让中间传纸条的同学知道，这怎么办呢？聪明的你，找到了学算法的大牛，他设计出了一种算法，可以生成一个密钥对(k1, k2)，k1加密的明文，只有k2才能解开，而k2加密的明文，只有k1才能解开。</p><ol><li>TA先把k2传给你</li><li>你再使用k2进行加密传给TA</li><li>TA再用k1进行解密<br>就可以知道你要传给TA信息了！完美！这就是非对称加密。</li></ol><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>上述的方法看似天衣无缝，无懈可击。然而事实并没有那么简单。因为你不知道有多少个同学参与了传纸条的过程，你也无法验证最终给到你手里的信息，是你心仪的Ta传给你的！因此，如果C想知道你们的小秘密，C可以这样做：</p><ol><li>拦截TA传给你的k2，然后伪造一个k2’传给你</li><li>你傻傻地以为k2’就是TA给你的k2，然后使用k2’加密了信息，传给了C</li><li>这会Ｃ已经乐开了花，因为Ｃ已经用k1’把信息解密出来了</li></ol><h4 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h4><p>怎么办呢？怎么办呢？上述方案的缺陷就是无法验证k2是TA发给你的。那我们能不能这样：</p><ol><li>TA把k2发给你和TA的铁哥们B，B能够保证k2一定是TA发的，而不是C发的。</li><li>B再生成密钥对(k3,k4)，用k3对k2进行加密，假设密文为!@#$%^（该密文便是证书）。<br>当你请求与TA进行加密通信时，TA会把密文（证书）下发给你，你用k4解密密文（证书）!@#$%^，里面的k2，正是你心仪的TA想要发给你的k2！！！到这里你已经激动得泪流满面了，因为你拿到手里的就是Ta你发的k2（如果你信任B的话）。</li></ol>]]></content>
      
      
      <categories>
          
          <category> HTTPS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android-RemoteViews介绍</title>
      <link href="/2016/11/06/Understand-Android-RemoteViews/"/>
      <url>/2016/11/06/Understand-Android-RemoteViews/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>关于RemoteViews，官方是这么定义的：</p><pre><code>A class that describes a view hierarchy that can be displayed inanother process. The hierarchy is inflated from a layout resourcefile, and this class provides some basic operations for modifying thecontent of the inflated hierarchy.</code></pre><p>简单来说就是一个可以提供在其他进程中的展示、修改View的类。从类的定义上看，RemoteViews是直接继承Object而不是View，因此它不能像普通View一样提供setOnClickListener（有替代方案）、setEnable()等操作。在实际开发中，主要用在展示notification和widget。</p><span id="more"></span><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><h4 id="发默认系统通知"><a href="#发默认系统通知" class="headerlink" title="发默认系统通知"></a>发默认系统通知</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">startNotify</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Uri</span> <span class="variable">smsToUri</span> <span class="operator">=</span> Uri.parse(<span class="string">&quot;smsto:10086&quot;</span>);</span><br><span class="line">    <span class="type">Intent</span> <span class="variable">mIntent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>( android.content.Intent.ACTION_SENDTO, smsToUri );</span><br><span class="line">    mIntent.putExtra(<span class="string">&quot;sms_body&quot;</span>, <span class="string">&quot;The SMS text&quot;</span>);</span><br><span class="line">    <span class="type">PendingIntent</span> <span class="variable">pendingIntent</span> <span class="operator">=</span> PendingIntent.getActivity(<span class="built_in">this</span>, <span class="number">0</span>, mIntent, PendingIntent.FLAG_UPDATE_CURRENT);</span><br><span class="line">    <span class="type">Notification</span> <span class="variable">notification</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        notification = <span class="keyword">new</span> <span class="title class_">Notification</span></span><br><span class="line">                .Builder(<span class="built_in">this</span>)</span><br><span class="line">                .setTicker(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">                .setSmallIcon(R.mipmap.ic_launcher)</span><br><span class="line">                .setWhen(System.currentTimeMillis())</span><br><span class="line">                .setContentIntent(pendingIntent)</span><br><span class="line">                .build();</span><br><span class="line">    <span class="type">NotificationManager</span> <span class="variable">manager</span> <span class="operator">=</span> (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line">    manager.notify(<span class="number">1</span>, notification);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="发自定义通知"><a href="#发自定义通知" class="headerlink" title="发自定义通知"></a>发自定义通知</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">startCustomNotify</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Uri</span> <span class="variable">smsToUri</span> <span class="operator">=</span> Uri.parse(<span class="string">&quot;smsto:10086&quot;</span>);</span><br><span class="line">        <span class="type">Intent</span> <span class="variable">mIntent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>( android.content.Intent.ACTION_SENDTO, smsToUri ); <span class="comment">// 发短信</span></span><br><span class="line">        mIntent.putExtra(<span class="string">&quot;sms_body&quot;</span>, <span class="string">&quot;The SMS text&quot;</span>);</span><br><span class="line">        <span class="type">PendingIntent</span> <span class="variable">pendingIntent</span> <span class="operator">=</span> PendingIntent.getActivity(<span class="built_in">this</span>, <span class="number">0</span>, mIntent, PendingIntent.FLAG_UPDATE_CURRENT);</span><br><span class="line">        <span class="type">Intent</span> <span class="variable">callIntent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>( Intent.ACTION_DIAL, Uri.parse(<span class="string">&quot;tel:10086&quot;</span>) ); <span class="comment">//打电话</span></span><br><span class="line">        <span class="type">PendingIntent</span> <span class="variable">callPendingIntent</span> <span class="operator">=</span> PendingIntent.getActivity(<span class="built_in">this</span>, <span class="number">0</span>, callIntent, PendingIntent.FLAG_UPDATE_CURRENT);</span><br><span class="line">        <span class="type">RemoteViews</span> <span class="variable">remoteViews</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteViews</span>(getPackageName(), R.layout.widget_layout);</span><br><span class="line">        remoteViews.setTextViewText(R.id.tv_now, String.valueOf(System.currentTimeMillis()));</span><br><span class="line">        remoteViews.setOnClickPendingIntent(R.id.tv_now, pendingIntent);</span><br><span class="line">        remoteViews.setOnClickPendingIntent(R.id.btn_call, callPendingIntent);</span><br><span class="line">        <span class="type">Notification</span> <span class="variable">notification</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Notification</span></span><br><span class="line">                .Builder(<span class="built_in">this</span>)</span><br><span class="line">                .setTicker(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">                .setSmallIcon(R.mipmap.ic_launcher)</span><br><span class="line">                .setWhen(System.currentTimeMillis())</span><br><span class="line">                .setContentIntent(callPendingIntent)</span><br><span class="line">                .setCustomContentView(remoteViews)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="type">NotificationManager</span> <span class="variable">manager</span> <span class="operator">=</span> (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line">        manager.notify(<span class="number">1</span>, notification);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="widget"><a href="#widget" class="headerlink" title="widget"></a>widget</h4><p>使用widget则相比notification要麻烦一些，分三步走。</p><ol><li><p>自定义布局</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">&quot;.CustomAppwidgetProvider&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:name</span>=<span class="string">&quot;android.appwidget.provider&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:resource</span>=<span class="string">&quot;@xml/widget_provider_info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">meta-data</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;change_time_action&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.appwidget.action.APPWIDGET_UPDATE&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure><p>widget_provider_info是用来描述Widget的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appwidget-provider</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:initialLayout</span>=<span class="string">&quot;@layout/widget_layout&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:updatePeriodMillis</span>=<span class="string">&quot;60000&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 更新时间 --&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>自定义WidgetProvider</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomAppwidgetProvider</span> <span class="keyword">extends</span> <span class="title class_">AppWidgetProvider</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CHANGE_TIME_ACTION</span> <span class="operator">=</span> <span class="string">&quot;change_time_action&quot;</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceive</span><span class="params">(Context context, Intent intent)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onReceive(context, intent);</span><br><span class="line">        <span class="keyword">if</span> (intent.getAction().equals(CHANGE_TIME_ACTION)) &#123;</span><br><span class="line">            <span class="type">AppWidgetManager</span> <span class="variable">appWidgetManager</span> <span class="operator">=</span> AppWidgetManager.getInstance(context);</span><br><span class="line">            <span class="type">RemoteViews</span> <span class="variable">remoteViews</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteViews</span>(context.getPackageName(), R.layout.widget_layout);</span><br><span class="line">            remoteViews.setTextViewText(R.id.tv_now, <span class="keyword">new</span> <span class="title class_">Date</span>().toString());</span><br><span class="line">            <span class="type">PendingIntent</span> <span class="variable">pendingIntent</span> <span class="operator">=</span> PendingIntent.getBroadcast(context, <span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">Intent</span>(CHANGE_TIME_ACTION), <span class="number">0</span>);</span><br><span class="line">            remoteViews.setOnClickPendingIntent(R.id.tv_now, pendingIntent);</span><br><span class="line">            appWidgetManager.updateAppWidget(<span class="keyword">new</span> <span class="title class_">ComponentName</span>(context, CustomAppwidgetProvider.class), remoteViews);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onUpdate</span><span class="params">(Context context, AppWidgetManager appWidgetManager, <span class="type">int</span>[] appWidgetIds)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onUpdate(context, appWidgetManager, appWidgetIds);</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> appWidgetIds.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span> ; i&lt;len ; i++) &#123;</span><br><span class="line">            updateWidgetInfo(context, appWidgetManager, appWidgetIds[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateWidgetInfo</span><span class="params">(Context context, AppWidgetManager appWidgetManager, <span class="type">int</span> appWidgetId)</span> &#123;</span><br><span class="line">        <span class="type">RemoteViews</span> <span class="variable">remoteViews</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteViews</span>(context.getPackageName(), R.layout.widget_layout);</span><br><span class="line">        <span class="type">PendingIntent</span> <span class="variable">pendingIntent</span> <span class="operator">=</span> PendingIntent.getBroadcast(context, <span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">Intent</span>(CHANGE_TIME_ACTION), <span class="number">0</span>);</span><br><span class="line">        remoteViews.setOnClickPendingIntent(R.id.tv_now, pendingIntent);</span><br><span class="line">        appWidgetManager.updateAppWidget(appWidgetId, remoteViews);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然AppWidgetProvider不只有onUpdate和onReceive两个回调，还有onDeleted、onEnabled、onDisabled等方法，当一条广播到来时，onReceive会自动根据intent中的Action来决定调用哪个（onDeleted、onEnabled、onDisabled、onUpdate）方法。</p></li><li><p>在menifest中注册<br>因为AppWidgetPovider本质上是一个receiver，因此需要在menifest中注册。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">&quot;.CustomAppwidgetProvider&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:name</span>=<span class="string">&quot;android.appwidget.provider&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:resource</span>=<span class="string">&quot;@xml/widget_provider_info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">meta-data</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;change_time_action&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.appwidget.action.APPWIDGET_UPDATE&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>通过上面的例子不难看出，不管是自定义Notification还是Widget，都需要RemoteViews来协助完成。由于进程隔离的存在，要想操作直接其他进程的View，显然是不可能的。RemoteViews提供了操作远程View的方法，其内部是通过Binder跨进程通信实现的。<br>Notification和Widget是分别通过NotificationManager和AppWidgetManager进行管理的。通过查看源码可知，NotificationManager和AppWidgetManager其实是使用了Binder和SystemServer进程中的NotificationManagerService、AppWidgetManagerService两个服务进行通信。其实不光是NotificationManager和AppWidgetManager，使用了Context.getSystemService(ServiceName)这种方式获取到的系统服务都是使用Binder和系统进程进行通信的。<br>以AppWidgetManager为例，通信的步骤如下：</p><ol><li>AppWidgetManager通过Binder把RemoteVews传送到SystemServer（别忘了，RemoteViews 实现了parcelable接口）</li><li>SystemServer会根据RemoteViews携带过来的信息（如intent、layoutID等），使用LayoutInflater把View加载出来，该View对SystemServer来说就是普通的View，但是对于我们的App来说是RemoteViews。</li><li>用户添加widget时，会展示 android:initialLayout&#x3D;”@layout&#x2F;widget_layout” 指示的初始布局.</li><li>用户使用RemoteViews的set方法(如setTextViewText)来更新布局。注意，这里不是每次set就马上生效，而是把每次对View的操作抽象成一个Action，保存在一个列表中，在使用AppWidgetManager.updateAppWidget之后才通过Binder一次性提交这些操作。这样做的好处是可以节省大量的Binder IPC操作，从而提高程序性能。</li></ol><h4 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h4><p>以RemoteViews的SetTextViewText为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTextViewText</span><span class="params">(<span class="type">int</span> viewId, CharSequence text)</span> &#123;</span><br><span class="line">    setCharSequence(viewId, <span class="string">&quot;setText&quot;</span>, text);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用了setCharSequence</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCharSequence</span><span class="params">(<span class="type">int</span> viewId, String methodName, CharSequence value)</span> &#123;</span><br><span class="line">    addAction(<span class="keyword">new</span> <span class="title class_">ReflectionAction</span>(viewId, methodName, ReflectionAction.CHAR_SEQUENCE, value));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和上面分析中一致，把操作抽象成了Action，然后调用AddAction方法保存到Action列表mActions中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addAction</span><span class="params">(Action a)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (hasLandscapeAndPortraitLayouts()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;RemoteViews specifying separate landscape and portrait&quot;</span> +</span><br><span class="line">                <span class="string">&quot; layouts cannot be modified. Instead, fully configure the landscape and&quot;</span> +</span><br><span class="line">                <span class="string">&quot; portrait layouts individually before constructing the combined layout.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mActions == <span class="literal">null</span>) &#123;</span><br><span class="line">        mActions = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Action&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    mActions.add(a);</span><br><span class="line">    <span class="comment">// update the memory usage stats</span></span><br><span class="line">    a.updateMemoryUsageEstimate(mMemoryUsageCounter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过代码我们可以看到，这些操作是通过反射来进行的。因为View的方法众多，而且名字又不一样，使用反射可以优雅地设置各种View的属性（如LinearLayout、FrameLayout、TextView等），非常精妙。上面已经说过，set方法不会立即更新，那么真正的更新操作在哪里呢？我们来看看AppWidgetManager的updateAppWidget方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> IAppWidgetService mService;</span><br><span class="line">   ......</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateAppWidget</span><span class="params">(<span class="type">int</span>[] appWidgetIds, RemoteViews views)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (mService == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           mService.updateAppWidgetIds(mPackageName, appWidgetIds, views);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;system server dead?&quot;</span>, e);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>调用IAppWidgetService的updateAppWidgetIds方法跨进程通信</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateAppWidgetIds</span><span class="params">(java.lang.String callingPackage,<span class="type">int</span>[]appWidgetIds,android.widget.RemoteViews views)</span><span class="keyword">throws</span> android.os.RemoteException  &#123;</span><br><span class="line">        android.os.Parcel _data=android.os.Parcel.obtain();</span><br><span class="line">        android.os.Parcel _reply=android.os.Parcel.obtain();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">        _data.writeInterfaceToken(DESCRIPTOR);</span><br><span class="line">        _data.writeString(callingPackage);</span><br><span class="line">        _data.writeIntArray(appWidgetIds);</span><br><span class="line">        <span class="keyword">if</span>((views!=<span class="literal">null</span>))&#123;</span><br><span class="line">        _data.writeInt(<span class="number">1</span>);</span><br><span class="line">        views.writeToParcel(_data,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        _data.writeInt(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mRemote.transact(Stub.TRANSACTION_updateAppWidgetIds,_data,_reply,<span class="number">0</span>);</span><br><span class="line">        _reply.readException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span>&#123;</span><br><span class="line">        _reply.recycle();</span><br><span class="line">        _data.recycle();</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>再来看看服务端AppWidgetService做了什么工作。AppWidgetService主要由AppWidgetServiceImpl.java实现。看看AppWidgetServiceImpl的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateAppWidgetIds</span><span class="params">(String callingPackage, <span class="type">int</span>[] appWidgetIds,</span></span><br><span class="line"><span class="params">            RemoteViews views, <span class="type">boolean</span> partially)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">userId</span> <span class="operator">=</span> UserHandle.getCallingUserId();</span><br><span class="line">        <span class="keyword">if</span> (appWidgetIds == <span class="literal">null</span> || appWidgetIds.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Make sure the package runs under the caller uid.</span></span><br><span class="line">        mSecurityPolicy.enforceCallFromPackage(callingPackage);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">bitmapMemoryUsage</span> <span class="operator">=</span> (views != <span class="literal">null</span>) ? views.estimateMemoryUsage() : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (bitmapMemoryUsage &gt; mMaxWidgetBitmapMemory) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;RemoteViews for widget update exceeds&quot;</span></span><br><span class="line">                    + <span class="string">&quot; maximum bitmap memory usage (used: &quot;</span> + bitmapMemoryUsage</span><br><span class="line">                    + <span class="string">&quot;, max: &quot;</span> + mMaxWidgetBitmapMemory + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">            ensureGroupStateLoadedLocked(userId);</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> appWidgetIds.length;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">int</span> <span class="variable">appWidgetId</span> <span class="operator">=</span> appWidgetIds[i];</span><br><span class="line">                <span class="comment">// <span class="doctag">NOTE:</span> The lookup is enforcing security across users by making</span></span><br><span class="line">                <span class="comment">// sure the caller can only access widgets it hosts or provides.</span></span><br><span class="line">                <span class="type">Widget</span> <span class="variable">widget</span> <span class="operator">=</span> lookupWidgetLocked(appWidgetId,</span><br><span class="line">                        Binder.getCallingUid(), callingPackage);</span><br><span class="line">                <span class="keyword">if</span> (widget != <span class="literal">null</span>) &#123;</span><br><span class="line">                    updateAppWidgetInstanceLocked(widget, views, partially);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>继续看updateAppWidgetInstanceLocked</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateAppWidgetInstanceLocked</span><span class="params">(Widget widget, RemoteViews views,</span></span><br><span class="line"><span class="params">        <span class="type">boolean</span> isPartialUpdate)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (widget != <span class="literal">null</span> &amp;&amp; widget.provider != <span class="literal">null</span></span><br><span class="line">            &amp;&amp; !widget.provider.zombie &amp;&amp; !widget.host.zombie) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isPartialUpdate &amp;&amp; widget.views != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// For a partial update, we merge the new RemoteViews with the old.</span></span><br><span class="line">            widget.views.mergeRemoteViews(views);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// For a full update we replace the RemoteViews completely.</span></span><br><span class="line">            widget.views = views;</span><br><span class="line">        &#125;</span><br><span class="line">        scheduleNotifyUpdateAppWidgetLocked(widget, views);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续看scheduleNotifyUpdateAppWidgetLocked</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">scheduleNotifyUpdateAppWidgetLocked</span><span class="params">(Widget widget, RemoteViews updateViews)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (widget == <span class="literal">null</span> || widget.provider == <span class="literal">null</span> || widget.provider.zombie</span><br><span class="line">            || widget.host.callbacks == <span class="literal">null</span> || widget.host.zombie) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">SomeArgs</span> <span class="variable">args</span> <span class="operator">=</span> SomeArgs.obtain();</span><br><span class="line">    args.arg1 = widget.host;</span><br><span class="line">    args.arg2 = widget.host.callbacks;</span><br><span class="line">    args.arg3 = updateViews;</span><br><span class="line">    args.argi1 = widget.appWidgetId;</span><br><span class="line">    mCallbackHandler.obtainMessage(</span><br><span class="line">            CallbackHandler.MSG_NOTIFY_UPDATE_APP_WIDGET,</span><br><span class="line">            args).sendToTarget();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用Handler发送了一条消息，最后会走到handleNotifyUpdateAppWidget</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleNotifyUpdateAppWidget</span><span class="params">(Host host, IAppWidgetHost callbacks,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> appWidgetId, RemoteViews views)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        callbacks.updateAppWidget(appWidgetId, views);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException re) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">            Slog.e(TAG, <span class="string">&quot;Widget host dead: &quot;</span> + host.id, re);</span><br><span class="line">            host.callbacks = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我靠，这个callbacks又是一次Binder通信！！！是SystemServer和AppWidgetHost（通常来说是launcher）的一次通信，此时SystemServer是客户端，AppWidgetHost是服务端。继续看下IAppWidgetHost对应的实现类AppWidgetHost.updateAppWidget方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">updateAppWidgetView</span><span class="params">(<span class="type">int</span> appWidgetId, RemoteViews views)</span> &#123;</span><br><span class="line">    AppWidgetHostView v;</span><br><span class="line">    <span class="keyword">synchronized</span> (mViews) &#123;</span><br><span class="line">        v = mViews.get(appWidgetId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (v != <span class="literal">null</span>) &#123;</span><br><span class="line">        v.updateAppWidget(views);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>又继续调用AppWidgetHostView.updateAppWidget</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateAppWidget</span><span class="params">(RemoteViews remoteViews)</span> &#123;</span><br><span class="line">......<span class="comment">// 省略部分代码</span></span><br><span class="line">      <span class="keyword">if</span> (remoteViews == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (mViewMode == VIEW_MODE_DEFAULT) &#123;</span><br><span class="line">              <span class="comment">// We&#x27;ve already done this -- nothing to do.</span></span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          content = getDefaultView();</span><br><span class="line">          mLayoutId = -<span class="number">1</span>;</span><br><span class="line">          mViewMode = VIEW_MODE_DEFAULT;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// Prepare a local reference to the remote Context so we&#x27;re ready to</span></span><br><span class="line">          <span class="comment">// inflate any requested LayoutParams.</span></span><br><span class="line">          mRemoteContext = getRemoteContext(remoteViews);</span><br><span class="line">          <span class="type">int</span> <span class="variable">layoutId</span> <span class="operator">=</span> remoteViews.getLayoutId();</span><br><span class="line">          <span class="comment">// If our stale view has been prepared to match active, and the new</span></span><br><span class="line">          <span class="comment">// layout matches, try recycling it</span></span><br><span class="line">          <span class="keyword">if</span> (content == <span class="literal">null</span> &amp;&amp; layoutId == mLayoutId) &#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                  remoteViews.reapply(mContext, mView, mOnClickHandler);</span><br><span class="line">                  content = mView;</span><br><span class="line">                  recycled = <span class="literal">true</span>;</span><br><span class="line">                  <span class="keyword">if</span> (LOGD) Log.d(TAG, <span class="string">&quot;was able to recycled existing layout&quot;</span>);</span><br><span class="line">              &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">                  exception = e;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// Try normal RemoteView inflation</span></span><br><span class="line">          <span class="keyword">if</span> (content == <span class="literal">null</span>) &#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                  content = remoteViews.apply(mContext, <span class="built_in">this</span>, mOnClickHandler);</span><br><span class="line">                  <span class="keyword">if</span> (LOGD) Log.d(TAG, <span class="string">&quot;had to inflate new layout&quot;</span>);</span><br><span class="line">              &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">                  exception = e;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          mLayoutId = layoutId;</span><br><span class="line">          mViewMode = VIEW_MODE_CONTENT;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (content == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (mViewMode == VIEW_MODE_ERROR) &#123;</span><br><span class="line">              <span class="comment">// We&#x27;ve already done this -- nothing to do.</span></span><br><span class="line">              <span class="keyword">return</span> ;</span><br><span class="line">          &#125;</span><br><span class="line">          Log.w(TAG, <span class="string">&quot;updateAppWidget couldn&#x27;t find any view, using error view&quot;</span>, exception);</span><br><span class="line">          content = getErrorView();</span><br><span class="line">          mViewMode = VIEW_MODE_ERROR;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!recycled) &#123;</span><br><span class="line">          prepareView(content);</span><br><span class="line">          addView(content);</span><br><span class="line">      &#125;</span><br><span class="line">      ......<span class="comment">//省略部分代码</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>基本逻辑是调用RemoteViews的reapply和apply方法生成新的View，通知栏和widget小控件在初始化时会调用apply方法，而后面的更新操作会调用reapply方法。我们继续来看RemoteViews.apply方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@hide</span> */</span></span><br><span class="line"><span class="keyword">public</span> View <span class="title function_">apply</span><span class="params">(Context context, ViewGroup parent, OnClickHandler handler)</span> &#123;</span><br><span class="line">    <span class="type">RemoteViews</span> <span class="variable">rvToApply</span> <span class="operator">=</span> getRemoteViewsToApply(context);</span><br><span class="line">    View result;</span><br><span class="line">    <span class="type">Context</span> <span class="variable">c</span> <span class="operator">=</span> prepareContext(context);</span><br><span class="line">    <span class="type">LayoutInflater</span> <span class="variable">inflater</span> <span class="operator">=</span> (LayoutInflater)</span><br><span class="line">            c.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</span><br><span class="line">    inflater = inflater.cloneInContext(c);</span><br><span class="line">    inflater.setFilter(<span class="built_in">this</span>);</span><br><span class="line">    result = inflater.inflate(rvToApply.getLayoutId(), parent, <span class="literal">false</span>);</span><br><span class="line">    rvToApply.performApply(result, parent, handler);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里终于把View生成了。result就是我们的初始布局。至此，分析算是结束了。<br>如果再继续往下看的话，流程和上面分析的差不多，继续看performApply方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">performApply</span><span class="params">(View v, ViewGroup parent, OnClickHandler handler)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mActions != <span class="literal">null</span>) &#123;</span><br><span class="line">        handler = handler == <span class="literal">null</span> ? DEFAULT_ON_CLICK_HANDLER : handler;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> mActions.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            <span class="type">Action</span> <span class="variable">a</span> <span class="operator">=</span> mActions.get(i);</span><br><span class="line">            a.apply(v, parent, handler);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>又调用了Action的apply方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Base class for all actions that can be performed on an</span></span><br><span class="line"><span class="comment">  * inflated view.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  *  SUBCLASSES MUST BE IMMUTABLE SO CLONE WORKS!!!!!</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Action</span> <span class="keyword">implements</span> <span class="title class_">Parcelable</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">apply</span><span class="params">(View root, ViewGroup rootParent,</span></span><br><span class="line"><span class="params">             OnClickHandler handler)</span> <span class="keyword">throws</span> ActionException;</span><br><span class="line">             ......<span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而是个抽象方法，找个子类TextViewSizeAction看下实现方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">apply</span><span class="params">(View root, ViewGroup rootParent, OnClickHandler handler)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">TextView</span> <span class="variable">target</span> <span class="operator">=</span> (TextView) root.findViewById(viewId);</span><br><span class="line">    <span class="keyword">if</span> (target == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    target.setTextSize(units, size);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>ViewId和units还有size在构造的时候就会传进来。是通过setTextViewTextSize方法传进来的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Equivalent to calling &#123;<span class="doctag">@link</span> TextView#setTextSize(int, float)&#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> viewId The id of the view whose text size should change</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> units The units of size (e.g. COMPLEX_UNIT_SP)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> size The size of the text</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTextViewTextSize</span><span class="params">(<span class="type">int</span> viewId, <span class="type">int</span> units, <span class="type">float</span> size)</span> &#123;</span><br><span class="line">    addAction(<span class="keyword">new</span> <span class="title class_">TextViewSizeAction</span>(viewId, units, size));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为setTextViewSize比较特殊，有两个参数units和zise，所以重新写了个Action。如果只有一个参数，就可以直接复用ReflectionAction。apply之后，如果有更新操作（mActions不为空）则更新。至此分析结束。</p><h4 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h4><p>App中的layout文件是怎么传输的AppWidgetHost(Launcher)中的？<br>有待研究。</p><h4 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h4><p>为何不直接使用App和Launcher进行通信，而需要通过AppWidgetService作为媒介呢？<br>本人猜测：可能是为了App和Widget之间的解耦，使用AppWidgetService，App不需要关心App的Widget放在哪个进程，反正AppWidgetService会帮我弄好，甚至App的Widget放在另外一个App（非Launcher）中也没有任何问题。不过话说回来，如果直接使用App与AppWidgetHost进行通信，虽然不能把Widget放在App（非Launcher）中，个人感觉也没啥问题。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><p><a href="http://blog.csdn.net/thl789/article/details/7893292">Android中Launcher对于AppWidget处理的分析：AppWidgetHost角色</a></p></li><li><p><a href="http://blog.csdn.net/luoshengyang/article/details/6767736">Android系统默认Home应用程序（Launcher）的启动过程源代码分析</a></p></li><li><p>《Android开发艺术探索》</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> RemoteView </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu-16-04上搭建Android开发环境</title>
      <link href="/2016/10/21/build-Android-Develop-Eenvironment-On-Ubuntu-16-04/"/>
      <url>/2016/10/21/build-Android-Develop-Eenvironment-On-Ubuntu-16-04/</url>
      
        <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li>下载 Android Studio，android-studio-ide-145.3276617-linux.zip</li><li>下载lantern ， lantern-installer-beta-64-bit.deb</li><li>下载genymotion ，genymotion-2.8.0-linux_x64.bin</li><li>下载virtualbox，virtualbox-5.1_5.1.8-111374-Ubuntu-xenial_amd64.deb<br>链接：<a href="http://pan.baidu.com/s/1jI16beI">http://pan.baidu.com/s/1jI16beI</a> 密码：in90<span id="more"></span></li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="安装lantern"><a href="#安装lantern" class="headerlink" title="安装lantern"></a>安装lantern</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gdebi-core</span><br><span class="line">sudo gdebi lantern-installer-beta-64-bit.deb</span><br></pre></td></tr></table></figure><h4 id="启动lantern"><a href="#启动lantern" class="headerlink" title="启动lantern"></a>启动lantern</h4><p><code>lantern</code></p><h4 id="安装Studio"><a href="#安装Studio" class="headerlink" title="安装Studio"></a>安装Studio</h4><p>解压文件并执行下面的命令即可启动Studio</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sudo tar zxvf android-studio-bundle-133.970939-linux.tgz</span></span><br><span class="line">sudo <span class="built_in">mv</span> android-studio /home/</span><br><span class="line"><span class="built_in">cd</span> /home/android-studio/bin/</span><br><span class="line">sudo ./studio.sh</span><br></pre></td></tr></table></figure><h4 id="安装virtualbox"><a href="#安装virtualbox" class="headerlink" title="安装virtualbox"></a>安装virtualbox</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i virtualbox-<span class="number">5.1_5</span><span class="number">.1</span><span class="number">.8</span>-<span class="number">111374</span>-Ubuntu-xenial_amd64.deb</span><br></pre></td></tr></table></figure><h4 id="安装genymotion"><a href="#安装genymotion" class="headerlink" title="安装genymotion"></a>安装genymotion</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo -s</span><br><span class="line">./genymotion-<span class="number">2.8</span><span class="number">.0</span>-linux_x64.bin</span><br></pre></td></tr></table></figure><h4 id="启动genymotion"><a href="#启动genymotion" class="headerlink" title="启动genymotion"></a>启动genymotion</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/genymobile/genymotion</span><br><span class="line">./genymotion</span><br></pre></td></tr></table></figure><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> vboxdrv.sh: Building VirtualBox kernel modules.</span><br><span class="line">vboxdrv.sh: failed: Look at /var/log/vbox-install.log to find out what went wrong.</span><br><span class="line"> There were problems setting up VirtualBox.  To re-start the set-up process, run</span><br><span class="line">   /sbin/vboxconfig</span><br><span class="line"> as root.</span><br></pre></td></tr></table></figure><p>解决方法是将gcc版本换成5.4</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-<span class="number">5</span> <span class="number">100</span></span><br><span class="line">sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-<span class="number">4.7</span> <span class="number">50</span></span><br><span class="line">sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-<span class="number">5</span> <span class="number">100</span></span><br><span class="line">sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-<span class="number">4.7</span> <span class="number">50</span></span><br></pre></td></tr></table></figure><p>参考此处：<a href="http://www.cnblogs.com/pngcui/p/5948018.html">http://www.cnblogs.com/pngcui/p/5948018.html</a> 。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu-16-04 编译 Android 5.1</title>
      <link href="/2016/10/07/complie-Android-5-1-on-Ubuntu-16-04/"/>
      <url>/2016/10/07/complie-Android-5-1-on-Ubuntu-16-04/</url>
      
        <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h4><p>Android-5.1.1源码 链接：<a href="http://pan.baidu.com/s/1bQ8aBk">http://pan.baidu.com/s/1bQ8aBk</a> 密码：mc6l</p><span id="more"></span><h4 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h4><p>推荐环境 Ubuntu14.04，本文使用Ubuntu16.04( 64位)</p><h4 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h4><p>参考官网，同时需要注意以下几点</p><ul><li>Open-JDK-7（不要用 Oracle JDK，卸载安装参考此处）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:openjdk-r/ppa  </span><br><span class="line">sudo apt-get update   </span><br><span class="line">sudo apt-get install openjdk-<span class="number">7</span>-jdk</span><br></pre></td></tr></table></figure></li><li>gcc-4.7 （千万别用Ubuntu16.04自带的gcc，安装参考此处）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y gcc-4.7</span><br><span class="line">sudo apt-get install -y g++-4.7</span><br><span class="line">//建立软链接</span><br><span class="line"><span class="built_in">cd</span> /usr/bin</span><br><span class="line">sudo <span class="built_in">rm</span> -r gcc</span><br><span class="line">sudo <span class="built_in">ln</span> -sf gcc-4.7 gcc</span><br><span class="line">sudo <span class="built_in">rm</span> -r g++</span><br><span class="line">sudo <span class="built_in">ln</span> -sf g++-4.7 g++</span><br></pre></td></tr></table></figure></li><li>程序库<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git-core gnupg flex bison gperf build-essential \</span><br><span class="line">  zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 \</span><br><span class="line">  lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z-dev ccache \</span><br><span class="line">  libgl1-mesa-dev libxml2-utils xsltproc unzip</span><br></pre></td></tr></table></figure></li><li>使用缓存（可选）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export USE_CCACHE=<span class="number">1</span></span><br><span class="line">prebuilts/misc/linux-x86/ccache/ccache -M 50G</span><br></pre></td></tr></table></figure></li></ul><h4 id="开始编译"><a href="#开始编译" class="headerlink" title="开始编译"></a>开始编译</h4><p>参考官网，编译前，建议把后面的错误看一下，然后把该装的库都装上，能省不少麻烦。准备工作一定要做足，不然后面编译到一半就会出问题。通常情况下没有一次就能成功编译，遇到问题直接把错误贴到Google上，一般都能找到答案。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ make clobber</span><br><span class="line">$ <span class="built_in">source</span> build/envsetup.sh</span><br><span class="line">$ lunch aosp_arm-eng</span><br><span class="line">$ make -j8</span><br><span class="line">$ emulator</span><br></pre></td></tr></table></figure><p>输入完make -j8 后就是漫长的等待，等编译完成后，输入emulator能正常启动Android模拟器，那么恭喜你，编译成功了！</p><p>build成功的截图：</p><p><img src="/2016/10/07/complie-Android-5-1-on-Ubuntu-16-04/p1.png" alt="图1"></p><p>make sdk成功截图</p><p><img src="/2016/10/07/complie-Android-5-1-on-Ubuntu-16-04/p2.png" alt="图2"></p><p>启动模拟器截图</p><p><img src="/2016/10/07/complie-Android-5-1-on-Ubuntu-16-04/p3.png" alt="图3"></p><p>注：<br>编译完后输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ./build/envsetup.sh</span><br><span class="line">$ lunch sdk-eng </span><br><span class="line">$ make sdk</span><br></pre></td></tr></table></figure><h3 id="遇到的错误"><a href="#遇到的错误" class="headerlink" title="遇到的错误"></a>遇到的错误</h3><h4 id="错误1"><a href="#错误1" class="headerlink" title="错误1"></a>错误1</h4><p>prebuilts&#x2F;misc&#x2F;linux-x86&#x2F;bison&#x2F;bison: 没有那个文件或目录<br>编译Android-5.1.1时出现bison找不到，但ls可以看的到。<br>解决方法：<br>ubuntu 64位系统运行32位程序的问题，需要安装运行32位程序的兼容库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install lib32ncurses5</span><br><span class="line">sudo apt-get install lib32stdc++6</span><br></pre></td></tr></table></figure><h4 id="错误2"><a href="#错误2" class="headerlink" title="错误2"></a>错误2</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">frameworks/base/tools/aidl/aidl_language_l.l:55: warning, 无法匹配规则</span><br><span class="line">build/core/binary.mk:539: recipe for target &#x27;out/host/linux-x86/obj32/EXECUTABLES/aidl_intermediates/aidl_language_y.cpp&#x27; failed</span><br><span class="line">make: *** [out/host/linux-x86/obj32/EXECUTABLES/aidl_intermediates/aidl_language_y.cpp] 断开的管道</span><br><span class="line">make: *** 正在等待未完成的任务....</span><br><span class="line">frameworks/base/tools/aidl/aidl_language_l.l:55: warning, 无法匹配规则</span><br><span class="line">flex-2.5.39：严重内部错误，exec of /usr/bin/m4 failed</span><br><span class="line">build/core/binary.mk:576: recipe for target &#x27;out/host/linux-x86/obj32/EXECUTABLES/aidl_intermediates/aidl_language_l.cpp&#x27; failed</span><br><span class="line">make: *** [out/host/linux-x86/obj32/EXECUTABLES/aidl_intermediates/aidl_language_l.cpp] 断开的管道</span><br><span class="line">make: *** Deleting file &#x27;out/host/linux-x86/obj32/EXECUTABLES/aidl_intermediates/aidl_language_l.cpp&#x27;</span><br><span class="line">frameworks/base/packages/SystemUI/tests/src/com/android/systemui/EventLogTags.logtags:8: warning: tag &quot;sysui_statusbar_touch&quot; (36000) duplicated in frameworks/base/packages/SystemUI/src/com/android/systemui/EventLogTags.logtags:8</span><br><span class="line">frameworks/base/packages/SystemUI/tests/src/com/android/systemui/EventLogTags.logtags:9: warning: tag &quot;sysui_heads_up_status&quot; (36001) duplicated in frameworks/base/packages/SystemUI/src/com/android/systemui/EventLogTags.logtags:9</span><br><span class="line">frameworks/base/packages/SystemUI/tests/src/com/android/systemui/EventLogTags.logtags:10: warning: tag &quot;sysui_fullscreen_notification&quot; (36002) duplicated in frameworks/base/packages/SystemUI/src/com/android/systemui/EventLogTags.logtags:10</span><br><span class="line">frameworks/base/packages/SystemUI/tests/src/com/android/systemui/EventLogTags.logtags:11: warning: tag &quot;sysui_heads_up_escalation&quot; (36003) duplicated in frameworks/base/packages/SystemUI/src/com/android/systemui/EventLogTags.logtags:11</span><br><span class="line">frameworks/base/packages/SystemUI/tests/src/com/android/systemui/EventLogTags.logtags:19: warning: tag &quot;sysui_status_bar_state&quot; (36004) duplicated in frameworks/base/packages/SystemUI/src/com/android/systemui/EventLogTags.logtags:19</span><br><span class="line">frameworks/base/packages/SystemUI/tests/src/com/android/systemui/EventLogTags.logtags:24: warning: tag &quot;sysui_panelbar_touch&quot; (36010) duplicated in frameworks/base/packages/SystemUI/src/com/android/systemui/EventLogTags.logtags:24</span><br><span class="line">frameworks/base/packages/SystemUI/tests/src/com/android/systemui/EventLogTags.logtags:29: warning: tag &quot;sysui_notificationpanel_touch&quot; (36020) duplicated in frameworks/base/packages/SystemUI/src/com/android/systemui/EventLogTags.logtags:29</span><br><span class="line">frameworks/base/packages/SystemUI/tests/src/com/android/systemui/EventLogTags.logtags:38: warning: tag &quot;sysui_lockscreen_gesture&quot; (36021) duplicated in frameworks/base/packages/SystemUI/src/com/android/systemui/EventLogTags.logtags:38</span><br><span class="line">frameworks/base/packages/SystemUI/tests/src/com/android/systemui/EventLogTags.logtags:43: warning: tag &quot;sysui_quickpanel_touch&quot; (36030) duplicated in frameworks/base/packages/SystemUI/src/com/android/systemui/EventLogTags.logtags:43</span><br><span class="line">frameworks/base/packages/SystemUI/tests/src/com/android/systemui/EventLogTags.logtags:48: warning: tag &quot;sysui_panelholder_touch&quot; (36040) duplicated in frameworks/base/packages/SystemUI/src/com/android/systemui/EventLogTags.logtags:48</span><br><span class="line">frameworks/base/packages/SystemUI/tests/src/com/android/systemui/EventLogTags.logtags:53: warning: tag &quot;sysui_searchpanel_touch&quot; (36050) duplicated in frameworks/base/packages/SystemUI/src/com/android/systemui/EventLogTags.logtags:53</span><br><span class="line">注: 某些输入文件使用或覆盖了已过时的 API。</span><br><span class="line">注: 有关详细信息, 请使用 -Xlint:deprecation 重新编译。</span><br><span class="line">注: 某些输入文件使用了未经检查或不安全的操作。</span><br><span class="line">注: 有关详细信息, 请使用 -Xlint:unchecked 重新编译。</span><br></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install flex bison</span><br></pre></td></tr></table></figure><h4 id="错误3"><a href="#错误3" class="headerlink" title="错误3"></a>错误3</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Export includes file: external/chromium_org/GypAndroid.linux-arm.mk -- out/target/product/generic/obj/STATIC_LIBRARIES/third_party_WebKit_Source_platform_blink_arm_neon_gyp_intermediates/export_includes</span><br><span class="line">/bin/bash: gperf: 未找到命令</span><br><span class="line">external/chromium_org/third_party/WebKit/Source/platform/make_platform_generated.target.linux-arm.mk:47: recipe for target &#x27;out/target/product/generic/obj/GYP/shared_intermediates/blink/platform/ColorData.cpp&#x27; failed</span><br><span class="line">make: *** [out/target/product/generic/obj/GYP/shared_intermediates/blink/platform/ColorData.cpp] Error 127</span><br><span class="line">make: *** 正在等待未完成的任务....</span><br></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gperf</span><br></pre></td></tr></table></figure><h4 id="错误4"><a href="#错误4" class="headerlink" title="错误4"></a>错误4</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">libnativehelper/JniInvocation.cpp:165: error: unsupported reloc 43</span><br><span class="line">clang: error: linker command failed with exit code 1 (use -v to see invocation)</span><br><span class="line">build/core/host_shared_library_internal.mk:44: recipe for target &#x27;out/host/linux-x86/obj32/lib/libnativehelper.so&#x27; failed</span><br><span class="line">make: *** [out/host/linux-x86/obj32/lib/libnativehelper.so] Error 1</span><br></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">修改 build/core/clang/HOST_x86_common.mk，找到 CLANG_CONFIG_x86_LINUX_HOST_EXTRA_ASFLAGS ，在</span><br><span class="line"></span><br><span class="line">--sysroot=$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG)/sysroot \</span><br><span class="line">下面添加一行：</span><br><span class="line"></span><br><span class="line">-B$($(clang_2nd_arch_prefix)HOST_TOOLCHAIN_FOR_CLANG)/x86_64-linux/bin \</span><br></pre></td></tr></table></figure><p>参考<a href="http://oopsmonk.github.io/blog/2016/06/07/android-build-error-on-ubuntu-16-04-lts">这里</a></p><h4 id="错误5"><a href="#错误5" class="headerlink" title="错误5"></a>错误5</h4><p>error while loading shared libraries: libz.so.1<br>解决方法，参考这里：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libc6-i386 lib32stdc++6 lib32gcc1 lib32ncurses5</span><br><span class="line">sudo apt-get install lib32z1</span><br></pre></td></tr></table></figure><h4 id="错误6"><a href="#错误6" class="headerlink" title="错误6"></a>错误6</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">build/core/binary.mk:620: recipe for target &#x27;out/host/linux-x86/obj32/EXECUTABLES/dex2oat_intermediates/dex2oat.o&#x27; failed</span><br><span class="line">make: *** [out/host/linux-x86/obj32/EXECUTABLES/dex2oat_intermediates/dex2oat.o] Error 1</span><br></pre></td></tr></table></figure><p>gcc 版本问题，解决方法：把gcc版本改成4.7即可。参考<a href="http://www.xuebuyuan.com/2181579.html">这里</a>：</p><h4 id="错误7"><a href="#错误7" class="headerlink" title="错误7"></a>错误7</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Copy xml: out/target/product/generic/system/etc/apns-conf.xml</span><br><span class="line">Copy: out/target/product/generic/system/media/audio/alarms/Alarm_Beep_01.ogg</span><br><span class="line">Copy: out/target/product/generic/system/media/audio/alarms/Alarm_Beep_02.ogg</span><br><span class="line">/bin/bash: xmllint: 未找到命令</span><br><span class="line">make: *** [out/target/product/generic/system/etc/apns-conf.xml] 错误 127</span><br><span class="line">make: *** 正在等待未完成的任务....</span><br></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get  install libxml2-utils</span><br></pre></td></tr></table></figure><h4 id="错误8"><a href="#错误8" class="headerlink" title="错误8"></a>错误8</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">rosalloc_space_base_test (out/target/product/generic/obj/EXECUTABLES/rosalloc_space_base_test_intermediates/LINKED/rosalloc_space_base_test)</span><br><span class="line">/home/jason/Desktop/new/android-5.1.1_r1/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.8/bin/../lib/gcc/arm-linux-androideabi/4.8/../../../../arm-linux-androideabi/bin/ld: error: out/target/product/generic/obj/EXECUTABLES/rosalloc_space_base_test_intermediates/runtime/gc/space/rosalloc_space_base_test.o: file is empty</span><br><span class="line">collect2: error: ld returned 1 exit status</span><br><span class="line">build/core/executable_internal.mk:69: recipe for target &#x27;out/target/product/generic/obj/EXECUTABLES/rosalloc_space_base_test_intermediates/LINKED/rosalloc_space_base_test&#x27; failed</span><br><span class="line">make: *** [out/target/product/generic/obj/EXECUTABLES/rosalloc_space_base_test_intermediates/LINKED/rosalloc_space_base_test] Error 1</span><br><span class="line">make: *** 正在等待未完成的任务....</span><br><span class="line">target Executable: rosalloc_space_static_test (out/target/product/generic/obj/EXECUTABLES/rosalloc_space_static_test_intermediates/LINKED/rosalloc_space_static_test)</span><br><span class="line">target Executable: rosalloc_space_random_test (out/target/product/generic/obj/EXECUTABLES/rosalloc_space_random_test_intermediates/LINKED/rosalloc_space_random_test)</span><br><span class="line">Preparing output jar [/home/jason/Desktop/new/android-5.1.1_r1/out/target/common/obj/APPS/SystemUI_intermediates/proguard.classes.jar]</span><br><span class="line">  Copying resources from program jar [/home/jason/Desktop/new/android-5.1.1_r1/out/target/common/obj/APPS/SystemUI_intermediates/classes.jar]</span><br><span class="line">DroidDoc took 113 sec. to write docs to out/target/common/docs/system-api-stubs</span><br><span class="line">DroidDoc took 127 sec. to write docs to out/target/common/docs/api-stubs</span><br></pre></td></tr></table></figure><p>解决方法，参考<a href="https://groups.google.com/forum/#!topic/android-building/KE0q0rFG8gc">这里</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ~/.ccache</span><br></pre></td></tr></table></figure><ul><li>原因<br>I got the same problem today and I resolved it by deleting the cache folder(rm -rf ~&#x2F;.ccache) and deleting the files *.o that were empty.<br>This problem may occur if your PC shutdown in the middle of a build.</li></ul><h4 id="错误9"><a href="#错误9" class="headerlink" title="错误9"></a>错误9</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">build/core/tasks/apicheck.mk:62: recipe for target &#x27;out/target/common/obj/PACKAGING/checkpublicapi-current-timestamp&#x27; failed</span><br><span class="line">make: *** [out/target/common/obj/PACKAGING/checkpublicapi-current-timestamp] Error 38</span><br></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make update-api</span><br><span class="line">make -j8</span><br></pre></td></tr></table></figure><h4 id="错误10"><a href="#错误10" class="headerlink" title="错误10"></a>错误10</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target SharedLib: libwebviewchromium (out/target/product/generic/obj/SHARED_LIBRARIES/libwebviewchromium_intermediates/LINKED/libwebviewchromium.so)</span><br></pre></td></tr></table></figure><p>解决方法，参考这里</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># dd if=/dev/zero of=/opt/other/swapfile bs=1024 count=512K</span><br><span class="line"># mkswap /opt/other/swapfile</span><br><span class="line"># swapon /opt/other/swapfile</span><br><span class="line"># swapon -s</span><br><span class="line"># sudo gedit /etc/fstab</span><br><span class="line">/opt/other/swapfile                     file        524280    0    -1</span><br></pre></td></tr></table></figure><h4 id="错误11"><a href="#错误11" class="headerlink" title="错误11"></a>错误11</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">development/build/sdk.atree:47: couldn&#x27;t locate source file: bin/sqlite3</span><br><span class="line">development/build/sdk.atree:49: couldn&#x27;t locate source file: bin/etc1tool</span><br><span class="line">development/build/sdk.atree:82: couldn&#x27;t locate source file: bin/split-select</span><br><span class="line">development/build/sdk.atree:87: couldn&#x27;t locate source file: bin/bcc_compat</span><br><span class="line">development/build/sdk.atree:174: couldn&#x27;t locate source file: framework/layoutlib.jar</span><br><span class="line">development/build/sdk.atree:175: couldn&#x27;t locate source file: framework/icu4j.jar</span><br><span class="line">development/build/sdk.atree:499: couldn&#x27;t locate source file: framework/layoutlib-tests.jar</span><br><span class="line">development/build/sdk.atree:500: couldn&#x27;t locate source file: system/app/EmulatorSmokeTests/EmulatorSmokeTests.apk</span><br><span class="line">build/core/Makefile:1711: recipe for target &#x27;out/host/linux-x86/sdk/full/android-sdk_eng.root_linux-x86.zip&#x27; failed</span><br><span class="line">make: *** [out/host/linux-x86/sdk/full/android-sdk_eng.root_linux-x86.zip] Error 44</span><br></pre></td></tr></table></figure><p>解决方法：把development&#x2F;build&#x2F;sdk.atree文件包含以下文本的行前加上#</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bin/sqlite3</span><br><span class="line">bin/etc1tool</span><br><span class="line">bin/split-select</span><br><span class="line">bin/bcc_compat</span><br><span class="line">framework/layoutlib.jar</span><br><span class="line">framework/icu4j.jar</span><br><span class="line">framework/layoutlib-tests.jar</span><br><span class="line">system/app/EmulatorSmokeTests/EmulatorSmokeTests.apk</span><br></pre></td></tr></table></figure><p>错误12</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prebuilts/gcc/linux-x86/host/x86_64-linux-glibc2.15-4.8//x86_64-linux/bin/ld: error: out/host/linux-x86/obj/SHARED_LIBRARIES/libart_intermediates/arch/x86_64/quick_entrypoints_x86_64.o: unsupported reloc 42 against global symbol art::Runtime::instance_</span><br></pre></td></tr></table></figure><p>解决方法，参考这里：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">try this in your android root path:</span><br><span class="line"></span><br><span class="line">cp /usr/bin/ld.gold prebuilts/gcc/linux-x86/host/x86_64-linux-glibc2.11-4.6/x86_64-linux/bin/ld</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>编译Android源码可能会遇到各种各样的问题，一定要有耐心，遇到问题Google之。</p><h3 id="编译Android-4-4"><a href="#编译Android-4-4" class="headerlink" title="编译Android 4.4"></a>编译Android 4.4</h3><p>有了前面的基础，编译Android-4.4也不是什么难事了。下面记录有可能遇到的错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash: jar: command not found</span><br><span class="line">make: *** [out/host/common/obj/JAVA_LIBRARIES/antlr-runtime_intermediates/javalib.jar] Error 127</span><br></pre></td></tr></table></figure><p>解决方法，参考这里：<a href="http://xiaoluozhi.blog.163.com/blog/static/4233482720146293381665/">http://xiaoluozhi.blog.163.com/blog/static/4233482720146293381665/</a></p><h4 id="错误1-1"><a href="#错误1-1" class="headerlink" title="错误1"></a>错误1</h4><ul><li><strong>jar、javadoc或者javah命令找不到</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash: jar: command not found</span><br><span class="line">make: *** [out/host/common/obj/JAVA_LIBRARIES/antlr-runtime_intermediates/javalib.jar] Error 127</span><br><span class="line">或者</span><br><span class="line">/bin/bash: javah: command not found</span><br></pre></td></tr></table></figure>可以执行以下命令：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/bin</span><br><span class="line">ln -s -f /usr/lib/jvm/jdk1.6.0_45/bin/javah</span><br><span class="line">ln -s -f /usr/lib/jvm/jdk1.6.0_45/bin/javadoc</span><br><span class="line">ln -s -f /usr/lib/jvm/jdk1.6.0_45/bin/jar</span><br></pre></td></tr></table></figure></li><li><strong>[out&#x2F;target&#x2F;common&#x2F;docs&#x2F;api-stubs-timestamp] Error 45</strong></li></ul><p>执行以下命令：<code> make clean make</code></p><h4 id="错误2-1"><a href="#错误2-1" class="headerlink" title="错误2"></a>错误2</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> Traceback (most recent call last):</span><br><span class="line">  File &quot;../../base/android/jni_generator/jni_generator.py&quot;, line 1103, in &lt;module&gt;</span><br><span class="line">    sys.exit(main(sys.argv))</span><br><span class="line">  File &quot;../../base/android/jni_generator/jni_generator.py&quot;, line 1099, in main</span><br><span class="line">    GenerateJNIHeader(input_file, output_file, options)</span><br><span class="line">  File &quot;../../base/android/jni_generator/jni_generator.py&quot;, line 1012, in GenerateJNIHeader</span><br><span class="line">    jni_from_javap = JNIFromJavaP.CreateFromClass(input_file, options)</span><br><span class="line">  File &quot;../../base/android/jni_generator/jni_generator.py&quot;, line 520, in CreateFromClass</span><br><span class="line">    stderr=subprocess.PIPE)</span><br><span class="line">  File &quot;/usr/lib/python2.7/subprocess.py&quot;, line 711, in __init__</span><br><span class="line">    errread, errwrite)</span><br><span class="line">  File &quot;/usr/lib/python2.7/subprocess.py&quot;, line 1340, in _execute_child</span><br><span class="line">    raise child_exception</span><br><span class="line">OSError: [Errno 2] No such file or directory</span><br><span class="line">make: *** [out/target/product/generic/obj/GYP/shared_intermediates/ui/gl/jni/Surface_jni.h] Error 1</span><br></pre></td></tr></table></figure><p>原因：没有配置javap</p><h4 id="错误3-1"><a href="#错误3-1" class="headerlink" title="错误3"></a>错误3</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">No command &#x27;emulator&#x27; found, did you mean:</span><br><span class="line"> Command &#x27;qemulator&#x27; from package &#x27;qemulator&#x27; (universe)</span><br><span class="line">emulator: command not found</span><br></pre></td></tr></table></figure><p>编译成功后，模拟器启动失败</p><p>解决方法：到源码根目录下执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source build/envsetup.sh</span><br><span class="line">lunch aosp_arm-eng</span><br></pre></td></tr></table></figure><p>lunch的目标和build的目标要一致，最后输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">emulator -partition-size 1024 &amp;</span><br><span class="line">partition-size</span><br></pre></td></tr></table></figure><p>指定虚拟机内存， 去掉也可以</p><h4 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h4><p>Android4.4编译成功</p><p><img src="/2016/10/07/complie-Android-5-1-on-Ubuntu-16-04/p4.png" alt="图4"></p><p>Android4.4启动模拟器</p><p><img src="/2016/10/07/complie-Android-5-1-on-Ubuntu-16-04/p5.png" alt="图5"></p><h4 id="编译4-4参考资料"><a href="#编译4-4参考资料" class="headerlink" title="编译4.4参考资料"></a>编译4.4参考资料</h4><ul><li><p>安装jdk1.6(编译Android-4.4)<br><a href="http://blog.csdn.net/gobitan/article/details/24322561">http://blog.csdn.net/gobitan/article/details/24322561</a></p></li><li><p>编译Android-4.4<br><a href="http://blog.csdn.net/gobitan/article/details/24367439/">http://blog.csdn.net/gobitan/article/details/24367439/</a><br><a href="http://www.jianshu.com/p/6d97b4a10b18">http://www.jianshu.com/p/6d97b4a10b18</a></p></li></ul><h3 id="编译Android-6-0"><a href="#编译Android-6-0" class="headerlink" title="编译Android 6.0"></a>编译Android 6.0</h3><p>方法是一样的，不过为了编译顺利，可能需要做下面两件事</p><ul><li>设置swap区<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo dd if=/dev/zero of=/opt/swap1 bs=1024 count=1024000</span><br><span class="line">sudo mkswap /opt/swap1</span><br><span class="line">sudo swapon /opt/swap1</span><br><span class="line">sudo vi /etc/fstab</span><br><span class="line">打开/etc/fstab，在最后一行增加如下内容</span><br><span class="line">/opt/swap1 swap swap defaults 0 0</span><br></pre></td></tr></table></figure></li><li>bug fix，参考这里<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">in file /art/build/Android.common_build.mk, find out:emphasized text</span><br><span class="line"># Host.</span><br><span class="line">ART_HOST_CLANG := false</span><br><span class="line">ifneq ($(WITHOUT_HOST_CLANG),true)</span><br><span class="line">  # By default, host builds use clang for better warnings.</span><br><span class="line">  ART_HOST_CLANG := true</span><br><span class="line">endif</span><br><span class="line">change to :</span><br><span class="line"># Host.</span><br><span class="line">ART_HOST_CLANG := false</span><br><span class="line">ifeq ($(WITHOUT_HOST_CLANG),false)</span><br><span class="line">  # By default, host builds use clang for better warnings.</span><br><span class="line">  ART_HOST_CLANG := true</span><br><span class="line">endif</span><br></pre></td></tr></table></figure></li></ul><h3 id="Ubuntu使用笔记"><a href="#Ubuntu使用笔记" class="headerlink" title="Ubuntu使用笔记"></a>Ubuntu使用笔记</h3><h4 id="删除Amazon"><a href="#删除Amazon" class="headerlink" title="删除Amazon"></a>删除Amazon</h4><p><code>apt-get remove unity-webapps-common</code></p><h4 id="删除office"><a href="#删除office" class="headerlink" title="删除office"></a>删除office</h4><p><code>sudo apt-get remove --purge libreoffice</code></p><h3 id="删除jdk"><a href="#删除jdk" class="headerlink" title="删除jdk"></a>删除jdk</h3><p><a href="https://my.oschina.net/lxrm/blog/110638">https://my.oschina.net/lxrm/blog/110638</a></p><h4 id="AS查看Android全部源码"><a href="#AS查看Android全部源码" class="headerlink" title="AS查看Android全部源码"></a>AS查看Android全部源码</h4><p>检查out&#x2F;host&#x2F;Linux-x86&#x2F;framework&#x2F;目录下是否有idegen.jar<br>如果idegen.jar不存在，根目录下执行执行</p><p><code>mmm development/tools/idegen/</code></p><p>把这个文件copy到out&#x2F;host&#x2F;linux-x86&#x2F;framework&#x2F;目录下，在根目录下执行</p><p>development&#x2F;tools&#x2F;idegen&#x2F;idegen.sh<br>过了几分钟之后跟目录下应该会有android.ipr和android.iml两个文件，此时用Android Studio导入ipr即可。</p><p>参考这里：<a href="http://blog.csdn.net/sinat_22657459/article/details/51227602">http://blog.csdn.net/sinat_22657459/article/details/51227602</a></p><h3 id="备份Ubuntu"><a href="#备份Ubuntu" class="headerlink" title="备份Ubuntu"></a>备份Ubuntu</h3><h4 id="操作环境为Ubuntu14-04"><a href="#操作环境为Ubuntu14-04" class="headerlink" title="操作环境为Ubuntu14.04"></a>操作环境为Ubuntu14.04</h4><p>LTS，近日在Ubuntu上搭建了Git服务器及很多其他配置，想将已安装好的系统转换为ISO文件，这样可以实现备份具体步骤如下：</p><ol><li><p>首先，打开在&#x2F;etc&#x2F;apt&#x2F;sources.list文件（使用vim或者gedit均可）；</p></li><li><p>根据具体的环境在sources.list中加入如下相应语句，并保存：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#Remastersys Precise deb http://www.remastersys.com/ubuntu precise main</span><br><span class="line"></span><br><span class="line">#Remastersys Quantal deb http://www.remastersys.com/ubuntu quantal main</span><br><span class="line"></span><br><span class="line">#Remastersys Squeeze deb http://www.remastersys.com/debian squeeze main</span><br><span class="line"></span><br><span class="line">#Remastersys Wheezy deb http://www.remastersys.com/debian wheezy main</span><br></pre></td></tr></table></figure></li><li><p>更新数据源： 在终端中输入：sudo apt-get update</p></li><li><p>更新完成后，安装remastersys: sudo apt-get install remastersys</p></li><li><p>安装成功后，输入sudo remastersys会出现remastersys Examples，根据这些命令行提示你可以实现不同功能，此处需要输入命令： sudo remastersys dist<br>然后等待完成，此时会在终端窗口所提示的目录下生成ISO文件及MD5文件，如果需要刻盘只需要验证MD5就可以了。</p></li></ol><h4 id="ubuntu14-04忽然不能登录"><a href="#ubuntu14-04忽然不能登录" class="headerlink" title="ubuntu14.04忽然不能登录"></a>ubuntu14.04忽然不能登录</h4><p>ubuntu14.04忽然不能登录，输入密码一直返回登录界面<br>解决方法：</p><ol><li>ctrl + alt + F1进入命令终端</li><li>重装gdm，sudo apt-get install gdm</li><li>修改启动顺序：dpkg -reconfigure gdm</li><li>重启reboot可登录。</li></ol><p>编辑&#x2F;etc&#x2F;profile要使用的命令应该这样写：　</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/vim </span><br><span class="line">/etc/profile</span><br></pre></td></tr></table></figure><p>正常状态下重启使用：<code>sudo reboot</code><br>当然现在也不行，要使用 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/sudo　</span><br><span class="line">/sbin/reboot</span><br></pre></td></tr></table></figure><p>参考这里：<a href="http://blog.163.com/shao_yuru/blog/static/130517606201010310581842/">http://blog.163.com/shao_yuru/blog/static/130517606201010310581842/</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://source.android.com/source/requirements.html">Android官网</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 编译Android源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android-HTTPS请求</title>
      <link href="/2016/09/25/Android-Using-Https/"/>
      <url>/2016/09/25/Android-Using-Https/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在使用Volley+OkHttp的基础上，使用https请求网络。</p><span id="more"></span><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="自定义兼容HTTPS的HurlStack"><a href="#自定义兼容HTTPS的HurlStack" class="headerlink" title="自定义兼容HTTPS的HurlStack"></a>自定义兼容HTTPS的HurlStack</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HTTPSHurlStack</span> <span class="keyword">extends</span> <span class="title class_">HurlStack</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> OkHttpClient okHttpClient;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, SSLSocketFactory&gt; socketFactoryMap;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HTTPSHurlStack</span><span class="params">(Map&lt;String, SSLSocketFactory&gt; factoryMap)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="keyword">new</span> <span class="title class_">OkHttpClient</span>(), factoryMap);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HTTPSHurlStack</span><span class="params">(OkHttpClient okHttpClient, Map&lt;String, SSLSocketFactory&gt; factoryMap)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.okHttpClient = okHttpClient;</span><br><span class="line">        <span class="built_in">this</span>.socketFactoryMap = factoryMap;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> HttpURLConnection <span class="title function_">createConnection</span><span class="params">(URL url)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;https&quot;</span>.equals(url.getProtocol()) &amp;&amp; socketFactoryMap.containsKey(url.getHost())) &#123;</span><br><span class="line">            <span class="type">HttpsURLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> (HttpsURLConnection) <span class="keyword">new</span> <span class="title class_">OkUrlFactory</span>(okHttpClient).open(url);</span><br><span class="line">            connection.setSSLSocketFactory(socketFactoryMap.get(url.getHost()));</span><br><span class="line">            <span class="keyword">return</span> connection;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">OkUrlFactory</span>(okHttpClient).open(url);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="导入证书"><a href="#导入证书" class="headerlink" title="导入证书"></a>导入证书</h4><p>将生成的证书导入到assets或者raw目录下（没有该目录则新建）</p><h4 id="使用SSLSocketFactory"><a href="#使用SSLSocketFactory" class="headerlink" title="使用SSLSocketFactory"></a>使用SSLSocketFactory</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> SSLSocketFactory <span class="title function_">getSSLSocketFactory</span><span class="params">(Context context, <span class="type">int</span> res, String password)</span></span><br><span class="line">            <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> context.getResources().openRawResource(res);</span><br><span class="line">        <span class="type">KeyStore</span> <span class="variable">keyStore</span> <span class="operator">=</span> KeyStore.getInstance(<span class="string">&quot;BKS&quot;</span>);</span><br><span class="line">        keyStore.load(inputStream, password.toCharArray());</span><br><span class="line">        <span class="type">TrustManagerFactory</span> <span class="variable">tmf</span> <span class="operator">=</span> TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());</span><br><span class="line">        tmf.init(keyStore);</span><br><span class="line">        <span class="type">SSLContext</span> <span class="variable">sslContext</span> <span class="operator">=</span> SSLContext.getInstance(<span class="string">&quot;TLS&quot;</span>);</span><br><span class="line">        sslContext.init(<span class="literal">null</span>, tmf.getTrustManagers(), <span class="keyword">new</span> <span class="title class_">SecureRandom</span>());</span><br><span class="line">        <span class="keyword">return</span> sslContext.getSocketFactory();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p><a href="https://github.com/dodocat/AndroidNetworkDemo">源码可以参考这里</a></p><h3 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h3><ul><li><a href="https://github.com/dodocat/AndroidNetworkDemo">Android Network Demo</a></li><li><a href="http://oakzmm.com/2015/07/22/okHttp-Volley-Gson/?utm_source=tuicool&utm_medium=referral"> 使用okHttp、Volley、Gson快速组装HttpClinet</a></li><li><a href="http://www.jianshu.com/p/b022eed6b427">安卓 Volley+OkHttp3+Gson（Jackson）开源库的封装过程</a></li><li><a href="http://wiki.jikexueyuan.com/project/wiki-journal-201507-1/android-ketstore.html">如何使用安卓密钥库存储密码和其他敏感信息</a></li><li><a href="http://blog.csdn.net/hengyunabc/article/details/34623957">移动App该如何保存用户密码</a></li><li><a href="http://www.open-open.com/lib/view/open1413071600531.html">为你的Android App实现自签名的 SSL 证书</a></li><li><a href="http://www.cnblogs.com/franksunny/p/3938143.html">关于Android开发中的证书和密钥等问题</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> HTTPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android基于代理的插件化思路分析</title>
      <link href="/2016/09/18/Introduction-of-Android-Dynamic-Load-Apk/"/>
      <url>/2016/09/18/Introduction-of-Android-Dynamic-Load-Apk/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>正常的App开发流程基本上是这样的：开发功能–&gt;测试—&gt;上线，上线后发现有大bug，紧急修复—-&gt;发新版本—-&gt;用户更新—–&gt;bug修复。从发现bug到修复bug花了很长时间。我们希望bug的修复是立马生效的，用户无感知就能自动修复bug。当然，Android端的动态修复bug已经有不少框架了，不过我们今天讲的是另一个话题：Android的插件化。Android插件化有很多好处：热插拔、静默升级、bug动态修复、代码解耦等。正是因为如此，才有越来越多的公司选择插件化。</p><span id="more"></span><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>Android插件化有很多的开源框架，基本上都是两种思路：代理和替换系统的一些关键变量，通过替换这些变量，达到欺骗系统的目的（又称Hook）。代理的思路比较简单，就是通过代理类Proxy，把主工程和插件工程的组件连接起来。代理类相当于傀儡，当主工程想要启动插件工程时，实际上会先调用代理类的相应方法，然后再通过代理类调用插件工程的组件，间接达到调用插件工程组件的目的。为何不直接调用插件工程的组件呢？因为通过DexClassLoader加载到内存的Activity等组件只是一个普通的类，没有上下文环境，意味着拿不到Context，意味着没有生命周期。</p><h4 id="让Activity有”生命”"><a href="#让Activity有”生命”" class="headerlink" title="让Activity有”生命”"></a>让Activity有”生命”</h4><p>得益于Java语言的类加载器可以动态加载类的特性，在Android中加载一个普通的类是很容易的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DexClassLoader</span><br><span class="line"> Class&lt;?&gt; mClassLaunchActivity = (Class&lt;?&gt;) </span><br><span class="line">classLoader.loadClass(mLaunchActivity);</span><br><span class="line">        mPluginActivity = (IPluginActivity) </span><br><span class="line">mClassLaunchActivity.newInstance();</span><br></pre></td></tr></table></figure><p>通过ClassLoader可以加载一个类，并生成类的实例。但是这个mPluginActivity只是一个普通的类，并没有Activity的生命周期，所以我们需要借助PluginProxyActivity来完成代理工作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PluginProxyActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> &#123;</span><br><span class="line">    IPluginActivity mPluginActivity;</span><br><span class="line">    String mPluginApkFilePath;</span><br><span class="line">    String mLaunchActivity;</span><br><span class="line">    <span class="keyword">private</span> String mPluginName;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="type">Bundle</span> <span class="variable">bundle</span> <span class="operator">=</span> getIntent().getExtras();</span><br><span class="line">        <span class="keyword">if</span>(bundle == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mPluginName = bundle.getString(PluginUtils.PARAM_PLUGIN_NAME);</span><br><span class="line">        mLaunchActivity = bundle.getString(PluginUtils.PARAM_LAUNCH_ACTIVITY);</span><br><span class="line">        <span class="type">File</span> <span class="variable">pluginFile</span> <span class="operator">=</span> PluginUtils.getInstallPath(PluginProxyActivity.<span class="built_in">this</span>, mPluginName);</span><br><span class="line">        <span class="keyword">if</span>(!pluginFile.exists())&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mPluginApkFilePath = pluginFile.getAbsolutePath();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            initPlugin();</span><br><span class="line">            mPluginActivity.IOnCreate(savedInstanceState);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            mPluginActivity = <span class="literal">null</span>;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onResume</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onResume();</span><br><span class="line">        <span class="keyword">if</span>(mPluginActivity != <span class="literal">null</span>)&#123;</span><br><span class="line">            mPluginActivity.IOnResume();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onStart</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onStart();</span><br><span class="line">        <span class="keyword">if</span>(mPluginActivity != <span class="literal">null</span>) &#123;</span><br><span class="line">            mPluginActivity.IOnStart();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ........ <span class="comment">//省略部分代码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initPlugin</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        PackageInfo packageInfo;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">PackageManager</span> <span class="variable">pm</span> <span class="operator">=</span> getPackageManager();</span><br><span class="line">            packageInfo = pm.getPackageArchiveInfo(mPluginApkFilePath, PackageManager.GET_ACTIVITIES);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> PluginUtils.getOrCreateClassLoaderByPath(<span class="built_in">this</span>, mPluginName, mPluginApkFilePath);</span><br><span class="line">        <span class="comment">// get default launchActivity if target Activity is null</span></span><br><span class="line">        <span class="keyword">if</span> (mLaunchActivity == <span class="literal">null</span> || mLaunchActivity.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (packageInfo == <span class="literal">null</span> || (packageInfo.activities == <span class="literal">null</span>) || (packageInfo.activities.length == <span class="number">0</span>)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(<span class="string">&quot;Launch Activity not found&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            mLaunchActivity = packageInfo.activities[<span class="number">0</span>].name;</span><br><span class="line">        &#125;</span><br><span class="line">        Class&lt;?&gt; mClassLaunchActivity = (Class&lt;?&gt;) classLoader.loadClass(mLaunchActivity);</span><br><span class="line">        mPluginActivity = (IPluginActivity) mClassLaunchActivity.newInstance();</span><br><span class="line">        mPluginActivity.IInit(mPluginApkFilePath, <span class="built_in">this</span>, classLoader, packageInfo);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> Class&lt;? <span class="keyword">extends</span> <span class="title class_">PluginProxyActivity</span>&gt; getProxyActivity(String pluginActivityName) &#123;</span><br><span class="line">        <span class="keyword">return</span> getClass();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startActivityForResult</span><span class="params">(Intent intent, <span class="type">int</span> requestCode)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">pluginActivity</span> <span class="operator">=</span> intent.getBooleanExtra(PluginUtils.PARAM_IS_IN_PLUGIN, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (pluginActivity) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">launchActivity</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">ComponentName</span> <span class="variable">componentName</span> <span class="operator">=</span> intent.getComponent();</span><br><span class="line">            <span class="keyword">if</span>(<span class="literal">null</span> != componentName) &#123;</span><br><span class="line">                launchActivity = componentName.getClassName();</span><br><span class="line">            &#125;</span><br><span class="line">            intent.putExtra(PluginUtils.PARAM_IS_IN_PLUGIN, <span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (launchActivity != <span class="literal">null</span> &amp;&amp; launchActivity.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">Intent</span> <span class="variable">pluginIntent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="built_in">this</span>, getProxyActivity(launchActivity));</span><br><span class="line">                pluginIntent.putExtra(PluginUtils.PARAM_PLUGIN_NAME, mPluginName);</span><br><span class="line">                pluginIntent.putExtra(PluginUtils.PARAM_PLUGIN_PATH, mPluginApkFilePath);</span><br><span class="line">                pluginIntent.putExtra(PluginUtils.PARAM_LAUNCH_ACTIVITY, launchActivity);</span><br><span class="line">                startActivityForResult(pluginIntent, requestCode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">super</span>.startActivityForResult(intent, requestCode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次启动新的Activity的时候，都会调用startActivityForResult，在此方法中，进行了Intent的替换，启动的新Activity还是会跳到ProxyActivity中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Intent</span> <span class="variable">pluginIntent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="built_in">this</span>, getProxyActivity(launchActivity));</span><br><span class="line">               pluginIntent.putExtra(PluginUtils.PARAM_PLUGIN_NAME, mPluginName);</span><br><span class="line">               pluginIntent.putExtra(PluginUtils.PARAM_PLUGIN_PATH, mPluginApkFilePath);</span><br><span class="line">               pluginIntent.putExtra(PluginUtils.PARAM_LAUNCH_ACTIVITY, launchActivity);</span><br><span class="line">               startActivityForResult(pluginIntent, requestCode);</span><br></pre></td></tr></table></figure><p>所有的插件工程都需要继承于BasePluginActivity，其主要代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasePluginActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> <span class="keyword">implements</span> <span class="title class_">IPluginActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> mIsRunInPlugin;</span><br><span class="line">    <span class="keyword">private</span> ClassLoader mDexClassLoader;</span><br><span class="line">    <span class="keyword">private</span> Activity mOutActivity;</span><br><span class="line">    <span class="keyword">private</span> String mApkFilePath;</span><br><span class="line">    <span class="keyword">private</span> PackageInfo mPackageInfo;</span><br><span class="line">    <span class="keyword">private</span> PluginContext mContext;</span><br><span class="line">    <span class="keyword">private</span> View mContentView;</span><br><span class="line">    <span class="keyword">private</span> Activity mActivity;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> mFinished;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mIsRunInPlugin) &#123;</span><br><span class="line">            mActivity = mOutActivity;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">            mActivity = <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContentView</span><span class="params">(<span class="type">int</span> layoutResID)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mIsRunInPlugin) &#123;</span><br><span class="line">            mContentView = LayoutInflater.from(mContext).inflate(layoutResID, <span class="literal">null</span>);</span><br><span class="line">            mActivity.setContentView(mContentView);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.setContentView(layoutResID);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContentView</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mIsRunInPlugin) &#123;</span><br><span class="line">            mContentView = view;</span><br><span class="line">            mActivity.setContentView(mContentView);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.setContentView(view);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">findViewById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mIsRunInPlugin &amp;&amp; mContentView != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">View</span> <span class="variable">v</span> <span class="operator">=</span> mContentView.findViewById(id);</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == v) &#123;</span><br><span class="line">                v = <span class="built_in">super</span>.findViewById(id);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.findViewById(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">IOnCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        onCreate(savedInstanceState);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">IOnResume</span><span class="params">()</span> &#123;</span><br><span class="line">        onResume();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">IOnStart</span><span class="params">()</span> &#123;</span><br><span class="line">        onStart();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">IOnPause</span><span class="params">()</span> &#123;</span><br><span class="line">        onPause();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">IOnStop</span><span class="params">()</span> &#123;</span><br><span class="line">        onStop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">IOnDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">IOnRestart</span><span class="params">()</span> &#123;</span><br><span class="line">        onRestart();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">IInit</span><span class="params">(String path, Activity context, ClassLoader classLoader, PackageInfo packageInfo)</span> &#123;</span><br><span class="line">        mIsRunInPlugin = <span class="literal">true</span>;</span><br><span class="line">        mDexClassLoader = classLoader;</span><br><span class="line">        mOutActivity = context;</span><br><span class="line">        mApkFilePath = path;</span><br><span class="line">        mPackageInfo = packageInfo;</span><br><span class="line">        mContext = <span class="keyword">new</span> <span class="title class_">PluginContext</span>(context, <span class="number">0</span>, mApkFilePath, mDexClassLoader);</span><br><span class="line">        attachBaseContext(mContext);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onResume</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mIsRunInPlugin) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">super</span>.onResume();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onPause</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mIsRunInPlugin) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">super</span>.onPause();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onStart</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mIsRunInPlugin) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">super</span>.onStart();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onRestart</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mIsRunInPlugin) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">super</span>.onRestart();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onStop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mIsRunInPlugin) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">super</span>.onStop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mIsRunInPlugin) &#123;</span><br><span class="line">            mDexClassLoader = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">finish</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mIsRunInPlugin) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">resultCode</span> <span class="operator">=</span> Activity.RESULT_CANCELED;</span><br><span class="line">            <span class="type">Intent</span> <span class="variable">data</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">                Field field;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    field = Activity.class.getDeclaredField(<span class="string">&quot;mResultCode&quot;</span>);</span><br><span class="line">                    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    resultCode = (Integer) field.get(<span class="built_in">this</span>);</span><br><span class="line">                    field = Activity.class.getDeclaredField(<span class="string">&quot;mResultData&quot;</span>);</span><br><span class="line">                    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    data = (Intent) field.get(<span class="built_in">this</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            mOutActivity.setResult(resultCode, data);</span><br><span class="line">            mOutActivity.finish();</span><br><span class="line">            mFinished = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.finish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFinishing</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mIsRunInPlugin) &#123;</span><br><span class="line">            <span class="keyword">return</span> mFinished;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.isFinishing();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onActivityResult</span><span class="params">(<span class="type">int</span> requestCode, <span class="type">int</span> resultCode, Intent data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mIsRunInPlugin) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> LayoutInflater <span class="title function_">getLayoutInflater</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mContext != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> LayoutInflater.from(mContext);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> LayoutInflater.from(mActivity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> WindowManager <span class="title function_">getWindowManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mIsRunInPlugin) &#123;</span><br><span class="line">            <span class="keyword">return</span> mOutActivity.getWindowManager();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.getWindowManager();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startActivityForResult</span><span class="params">(Intent intent, <span class="type">int</span> requestCode)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mIsRunInPlugin) &#123;</span><br><span class="line">            intent.putExtra(PluginUtils.PARAM_IS_IN_PLUGIN, <span class="literal">true</span>);</span><br><span class="line">            mActivity.startActivityForResult(intent, requestCode);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.startActivityForResult(intent, requestCode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在BasePluginActivity中，覆写了很多父类Activity的方法，用来判断当前Activity是独立运行还是作为插件运行，如果是在插件中运行，则是调用插件中设置进来的代理类ProxyActivity（mActivity）的相应方法。同时使用IPluginActivity来模拟Activity的生命周期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IPluginActivity</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">IOnCreate</span><span class="params">(Bundle savedInstanceState)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">IOnResume</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">IOnStart</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">IOnPause</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">IOnStop</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">IOnDestroy</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">IOnRestart</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">IInit</span><span class="params">(String path, Activity context, ClassLoader classLoader, PackageInfo packageInfo)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此Activity已经有生命周期了！但是还有个问题，插件的资源如何获取？</p><h4 id="插件资源的获取"><a href="#插件资源的获取" class="headerlink" title="插件资源的获取"></a>插件资源的获取</h4><p>这里就不卖关子了。直接通过反射调用AssetManager的addAssetPath方法把资源加载到Resource对象中，即可获取插件中的资源。为了后续方便，我们直接继承ContextWrapper类自己实现getAssets和getResources方法即可。代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PluginContext</span> <span class="keyword">extends</span> <span class="title class_">ContextWrapper</span> &#123;</span><br><span class="line"><span class="keyword">private</span> AssetManager mAsset;</span><br><span class="line"><span class="keyword">private</span> Resources mResources;</span><br><span class="line"><span class="keyword">private</span> Theme mTheme;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> mThemeResId;</span><br><span class="line"><span class="keyword">private</span> ClassLoader mClassLoader;</span><br><span class="line"><span class="keyword">private</span> Context mOutContext;</span><br><span class="line"><span class="keyword">private</span> AssetManager <span class="title function_">getSelfAssets</span><span class="params">(String apkPath)</span> &#123;</span><br><span class="line"><span class="type">AssetManager</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">instance = AssetManager.class.newInstance();</span><br><span class="line"><span class="type">Method</span> <span class="variable">addAssetPathMethod</span> <span class="operator">=</span> AssetManager.class.getDeclaredMethod(<span class="string">&quot;addAssetPath&quot;</span>, String.class);</span><br><span class="line">addAssetPathMethod.invoke(instance, apkPath);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> Resources <span class="title function_">getSelfRes</span><span class="params">(Context ctx, AssetManager selfAsset)</span> &#123;</span><br><span class="line"><span class="type">DisplayMetrics</span> <span class="variable">metrics</span> <span class="operator">=</span> ctx.getResources().getDisplayMetrics();</span><br><span class="line"><span class="type">Configuration</span> <span class="variable">con</span> <span class="operator">=</span> ctx.getResources().getConfiguration();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Resources</span>(selfAsset, metrics, con);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> Theme <span class="title function_">getSelfTheme</span><span class="params">(Resources selfResources)</span> &#123;</span><br><span class="line"><span class="type">Theme</span> <span class="variable">theme</span> <span class="operator">=</span> selfResources.newTheme();</span><br><span class="line">mThemeResId = getInnerRIdValue(<span class="string">&quot;com.android.internal.R.style.Theme&quot;</span>);</span><br><span class="line">theme.applyStyle(mThemeResId, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">return</span> theme;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getInnerRIdValue</span><span class="params">(String rStrnig)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">rindex</span> <span class="operator">=</span> rStrnig.indexOf(<span class="string">&quot;.R.&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">Rpath</span> <span class="operator">=</span> rStrnig.substring(<span class="number">0</span>, rindex + <span class="number">2</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">fieldIndex</span> <span class="operator">=</span> rStrnig.lastIndexOf(<span class="string">&quot;.&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">fieldName</span> <span class="operator">=</span> rStrnig.substring(fieldIndex + <span class="number">1</span>, rStrnig.length());</span><br><span class="line">rStrnig = rStrnig.substring(<span class="number">0</span>, fieldIndex);</span><br><span class="line"><span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> rStrnig.substring(rStrnig.lastIndexOf(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>, rStrnig.length());</span><br><span class="line"><span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> Rpath + <span class="string">&quot;$&quot;</span> + type;</span><br><span class="line">Class&lt;?&gt; cls = Class.forName(className);</span><br><span class="line">value = cls.getDeclaredField(fieldName).getInt(<span class="literal">null</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">PluginContext</span><span class="params">(Context base, <span class="type">int</span> themeres, String apkPath, ClassLoader classLoader)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(base, themeres);</span><br><span class="line">mClassLoader = classLoader;</span><br><span class="line">        mAsset = getSelfAssets(apkPath);</span><br><span class="line">        mResources = getSelfRes(base, mAsset);</span><br><span class="line">mTheme = getSelfTheme(mResources);</span><br><span class="line">mOutContext = base;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Resources <span class="title function_">getResources</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> mResources;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> AssetManager <span class="title function_">getAssets</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> mAsset;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Theme <span class="title function_">getTheme</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> mTheme;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，插件化的两大难题已经解决。现在插件中的Activity可以启动了！用同样的思路可以完成其他组件的代码编写。</p><h3 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h3><p><a href="https://github.com/nancyyihao/PluginDemo">PluginDemo</a></p><h3 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h3><ul><li><a href="http://blog.csdn.net/singwhatiwanna/article/details/23387079">资源加载和activity生命周期管理</a></li><li><a href="http://zjmdp.github.io/2014/07/22/a-plugin-framework-for-android/">基于Proxy思想的Android插件框架</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 插件化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android-Binder使用</title>
      <link href="/2016/09/10/Introduction-of-Android-Binder/"/>
      <url>/2016/09/10/Introduction-of-Android-Binder/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>对于Android来说，Binder的重要性怎么说都不为过。不管是我们的四大组件Activity、Service、BroadcastReceiver、ContentProvider，还是经常在应用中使用到的各种ServiceManager，其背后都是Binder在支撑。然而Binder机制又不是三言两语能够描述得清楚的，因此本文通过对一个简单的AIDL Demo进行分析，让读者对Binder有个初步的认识，要想深入了解Binder背后的原理，可以参考最后的延伸阅读。</p><span id="more"></span><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>首先我们通过AIDL新建一个跨进程通信的Demo，然后在代码中简单分析Binder的运行过程。</p><h4 id="Server-Module"><a href="#Server-Module" class="headerlink" title="Server Module"></a>Server Module</h4><p>我们先新建一个提供接口的AIDL服务端module，服务端主要提供AddBook和getBookList两个功能，其目录如下：</p><p><img src="/2016/09/10/Introduction-of-Android-Binder/p2.png" alt="图1"></p><ul><li>IBookManager.AIDL<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IAIDLServer.aidl</span></span><br><span class="line"><span class="keyword">package</span> com.nancyyihao.aidlserver;</span><br><span class="line"><span class="keyword">import</span>  com.nancyyihao.aidlserver.Book;</span><br><span class="line"><span class="comment">// Declare any non-default types here with import statements</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IBookManager</span> &#123;</span><br><span class="line">    List&lt;Book&gt; <span class="title function_">getBookList</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addBook</span><span class="params">(in Book book)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Book.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nancyyihao.aidlserver;</span><br><span class="line"><span class="keyword">import</span> android.os.Parcel;</span><br><span class="line"><span class="keyword">import</span> android.os.Parcelable;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by jumper on 2016/9/7.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> <span class="keyword">implements</span> <span class="title class_">Parcelable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> bookId;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(<span class="type">int</span> bookId, String bookName)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.bookId = bookId ;</span><br><span class="line">        <span class="built_in">this</span>.bookName = bookName ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(Parcel parcel)</span>&#123;</span><br><span class="line">        bookName = parcel.readString();</span><br><span class="line">        bookId = parcel.readInt();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBookName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookName</span><span class="params">(String bookName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookName = bookName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getBookId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookId</span><span class="params">(<span class="type">int</span> bookId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookId = bookId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">describeContents</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeToParcel</span><span class="params">(Parcel dest, <span class="type">int</span> flags)</span> &#123;</span><br><span class="line">        dest.writeString(bookName);</span><br><span class="line">        dest.writeInt(bookId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Parcelable.Creator&lt;Book&gt; CREATOR = <span class="keyword">new</span> <span class="title class_">Creator</span>&lt;Book&gt;()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Book <span class="title function_">createFromParcel</span><span class="params">(Parcel source)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Book</span>(source);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Book[] newArray(<span class="type">int</span> size) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Book</span>[size];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Book.AIDL</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nancyyihao.aidlserver;</span><br><span class="line">parcelable Book;</span><br><span class="line">BookManagerService</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.nancyyihao.aidlserver;</span><br><span class="line"><span class="keyword">import</span> android.app.Service;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Binder;</span><br><span class="line"><span class="keyword">import</span> android.os.IBinder;</span><br><span class="line"><span class="keyword">import</span> android.os.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArrayList;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by jumper on 2016/9/7.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookManagerService</span> <span class="keyword">extends</span> <span class="title class_">Service</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> <span class="string">&quot;BMS&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> CopyOnWriteArrayList&lt;Book&gt; mBookList = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> IBinder <span class="title function_">onBind</span><span class="params">(Intent intent)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mBinder;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate();</span><br><span class="line">        <span class="comment">// to distinguish with client module, we set the book id different from client module</span></span><br><span class="line">        mBookList.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">3</span>,<span class="string">&quot;Android&quot;</span>));</span><br><span class="line">        mBookList.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">4</span>,<span class="string">&quot;iOS&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Binder</span> <span class="variable">mBinder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IBookManager</span>.Stub() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getBookList</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">            <span class="keyword">return</span> mBookList;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBook</span><span class="params">(Book book)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">            mBookList.add(book);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Client-Module"><a href="#Client-Module" class="headerlink" title="Client Module"></a>Client Module</h4><p>把Server module的代码拷贝一份(AIDL包名不能变)，然后新建一个MainActivity即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">MainActivity</span><br><span class="line"><span class="keyword">package</span> com.nancyyihao.aidlserver;</span><br><span class="line"><span class="keyword">import</span> android.content.ComponentName;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.content.ServiceConnection;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.os.IBinder;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> com.nancyyihao.R;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> <span class="string">&quot;MainActivity&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">ServiceConnection</span> <span class="variable">mConnection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServiceConnection</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> &#123;</span><br><span class="line">            <span class="type">IBookManager</span> <span class="variable">bookManager</span> <span class="operator">=</span> IBookManager.Stub.asInterface(service);</span><br><span class="line">            Log.e(<span class="string">&quot;trace&quot;</span>, <span class="string">&quot;onServiceConnected&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                List&lt;Book&gt; bookList = bookManager.getBookList();</span><br><span class="line">                Log.e(TAG, <span class="string">&quot;query book list, list type:&quot;</span> + bookList.getClass().getCanonicalName());</span><br><span class="line">                Log.e(TAG, <span class="string">&quot;query book list:&quot;</span> + bookList.toString());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onServiceDisconnected</span><span class="params">(ComponentName name)</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">        intent.setAction(<span class="string">&quot;com.nancyyihao.startservice&quot;</span>);</span><br><span class="line">        intent.setPackage(<span class="string">&quot;com.nancyyihao.aidlserver&quot;</span>); <span class="comment">// server&#x27;s package name</span></span><br><span class="line">        Log.e(<span class="string">&quot;trace&quot;</span>, <span class="string">&quot;bindService&quot;</span>);</span><br><span class="line">        bindService(intent, mConnection, BIND_AUTO_CREATE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        unbindService(mConnection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>把代码写好后，build一下，就能看到自动生成了一个IBookManager.Java文件</p><ul><li>IBookManager.Java</li></ul><p><img src="/2016/09/10/Introduction-of-Android-Binder/p3.png" alt="图2"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nancyyihao.aidlserver;</span><br><span class="line"><span class="comment">// Declare any non-default types here with import statements</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IBookManager</span> <span class="keyword">extends</span> <span class="title class_">android</span>.os.IInterface &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Local-side IPC implementation stub class.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Stub</span> <span class="keyword">extends</span> <span class="title class_">android</span>.os.Binder <span class="keyword">implements</span> <span class="title class_">com</span>.nancyyihao.aidlserver.IBookManager &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> java.lang.<span class="type">String</span> <span class="variable">DESCRIPTOR</span> <span class="operator">=</span> <span class="string">&quot;com.nancyyihao.aidlserver.IBookManager&quot;</span>; <span class="comment">// Binder Indentifier</span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Stub</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.attachInterface(<span class="built_in">this</span>, DESCRIPTOR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Cast an IBinder object into an com.nancyyihao.aidlserver.IBookManager interface,</span></span><br><span class="line"><span class="comment">         * generating a proxy if needed.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> com.nancyyihao.aidlserver.IBookManager <span class="title function_">asInterface</span><span class="params">(android.os.IBinder obj)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ((obj == <span class="literal">null</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            android.os.<span class="type">IInterface</span> <span class="variable">iin</span> <span class="operator">=</span> obj.queryLocalInterface(DESCRIPTOR);</span><br><span class="line">            <span class="keyword">if</span> (((iin != <span class="literal">null</span>) &amp;&amp; (iin <span class="keyword">instanceof</span> com.nancyyihao.aidlserver.IBookManager))) &#123;</span><br><span class="line">                <span class="keyword">return</span> ((com.nancyyihao.aidlserver.IBookManager) iin);  <span class="comment">// local Binder</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">com</span>.nancyyihao.aidlserver.IBookManager.Stub.Proxy(obj);  <span class="comment">// remote Binder</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> android.os.IBinder <span class="title function_">asBinder</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onTransact</span><span class="params">(<span class="type">int</span> code, android.os.Parcel data, android.os.Parcel reply, <span class="type">int</span> flags)</span> <span class="keyword">throws</span> android.os.RemoteException &#123;</span><br><span class="line">            <span class="keyword">switch</span> (code) &#123;</span><br><span class="line">                <span class="keyword">case</span> INTERFACE_TRANSACTION: &#123;</span><br><span class="line">                    reply.writeString(DESCRIPTOR);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> TRANSACTION_getBookList: &#123;</span><br><span class="line">                    data.enforceInterface(DESCRIPTOR);</span><br><span class="line">                    java.util.List&lt;com.nancyyihao.aidlserver.Book&gt; _result = <span class="built_in">this</span>.getBookList();</span><br><span class="line">                    reply.writeNoException();</span><br><span class="line">                    reply.writeTypedList(_result);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> TRANSACTION_addBook: &#123;</span><br><span class="line">                    data.enforceInterface(DESCRIPTOR);</span><br><span class="line">                    com.nancyyihao.aidlserver.Book _arg0;</span><br><span class="line">                    <span class="keyword">if</span> ((<span class="number">0</span> != data.readInt())) &#123;</span><br><span class="line">                        _arg0 = com.nancyyihao.aidlserver.Book.CREATOR.createFromParcel(data);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        _arg0 = <span class="literal">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">this</span>.addBook(_arg0);</span><br><span class="line">                    reply.writeNoException();</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.onTransact(code, data, reply, flags);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">com</span>.nancyyihao.aidlserver.IBookManager &#123;</span><br><span class="line">            <span class="keyword">private</span> android.os.IBinder mRemote;</span><br><span class="line">            Proxy(android.os.IBinder remote) &#123;</span><br><span class="line">                mRemote = remote;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> android.os.IBinder <span class="title function_">asBinder</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> mRemote;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> java.lang.String <span class="title function_">getInterfaceDescriptor</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> DESCRIPTOR;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> java.util.List&lt;com.nancyyihao.aidlserver.Book&gt; getBookList() <span class="keyword">throws</span> android.os.RemoteException &#123;</span><br><span class="line">                android.os.<span class="type">Parcel</span> <span class="variable">_data</span> <span class="operator">=</span> android.os.Parcel.obtain();</span><br><span class="line">                android.os.<span class="type">Parcel</span> <span class="variable">_reply</span> <span class="operator">=</span> android.os.Parcel.obtain();</span><br><span class="line">                java.util.List&lt;com.nancyyihao.aidlserver.Book&gt; _result;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    _data.writeInterfaceToken(DESCRIPTOR);</span><br><span class="line">                    mRemote.transact(Stub.TRANSACTION_getBookList, _data, _reply, <span class="number">0</span>);</span><br><span class="line">                    _reply.readException();</span><br><span class="line">                    _result = _reply.createTypedArrayList(com.nancyyihao.aidlserver.Book.CREATOR);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    _reply.recycle();</span><br><span class="line">                    _data.recycle();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> _result;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBook</span><span class="params">(com.nancyyihao.aidlserver.Book book)</span> <span class="keyword">throws</span> android.os.RemoteException &#123;</span><br><span class="line">                android.os.<span class="type">Parcel</span> <span class="variable">_data</span> <span class="operator">=</span> android.os.Parcel.obtain();</span><br><span class="line">                android.os.<span class="type">Parcel</span> <span class="variable">_reply</span> <span class="operator">=</span> android.os.Parcel.obtain();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    _data.writeInterfaceToken(DESCRIPTOR);</span><br><span class="line">                    <span class="keyword">if</span> ((book != <span class="literal">null</span>)) &#123;</span><br><span class="line">                        _data.writeInt(<span class="number">1</span>);</span><br><span class="line">                        book.writeToParcel(_data, <span class="number">0</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        _data.writeInt(<span class="number">0</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    mRemote.transact(Stub.TRANSACTION_addBook, _data, _reply, <span class="number">0</span>);</span><br><span class="line">                    _reply.readException();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    _reply.recycle();</span><br><span class="line">                    _data.recycle();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TRANSACTION_getBookList</span> <span class="operator">=</span> (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TRANSACTION_addBook</span> <span class="operator">=</span> (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> java.util.List&lt;com.nancyyihao.aidlserver.Book&gt; getBookList() <span class="keyword">throws</span> android.os.RemoteException;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBook</span><span class="params">(com.nancyyihao.aidlserver.Book book)</span> <span class="keyword">throws</span> android.os.RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client先调用bindService启动服务，会调用BookManagerService的onCreate方法，接着调用onBind方法，该方法会返回远程的Binder—mBinder，该Binder包含getBookList和AddBook两个方法的具体实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> IBinder <span class="title function_">onBind</span><span class="params">(Intent intent)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> mBinder;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">private</span> <span class="type">Binder</span> <span class="variable">mBinder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IBookManager</span>.Stub() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getBookList</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="keyword">return</span> mBookList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBook</span><span class="params">(Book book)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        mBookList.add(book);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; ;</span><br></pre></td></tr></table></figure><p>当Client和server成功建立连接时，就会调用Client的onServiceConnected(name, service)方法把远程的mBinder回调给Client，此时的service就是远程的mBinder对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">ServiceConnection</span> <span class="variable">mConnection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServiceConnection</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> &#123;</span><br><span class="line">            <span class="type">IBookManager</span> <span class="variable">bookManager</span> <span class="operator">=</span> IBookManager.Stub.asInterface(service);</span><br><span class="line">            Log.e(<span class="string">&quot;trace&quot;</span>, <span class="string">&quot;onServiceConnected&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                List&lt;Book&gt; bookList = bookManager.getBookList();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>Client端通过asInterface方法把mBinder转成AIDL接口，如果是本进程内的Binder就直接返回，否则返回内部代理类proxy</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> com.nancyyihao.aidlserver.IBookManager <span class="title function_">asInterface</span><span class="params">(android.os.IBinder obj)</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> ((obj == <span class="literal">null</span>)) &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           android.os.<span class="type">IInterface</span> <span class="variable">iin</span> <span class="operator">=</span> obj.queryLocalInterface(DESCRIPTOR);</span><br><span class="line">           <span class="keyword">if</span> (((iin != <span class="literal">null</span>) &amp;&amp; (iin <span class="keyword">instanceof</span> com.nancyyihao.aidlserver.IBookManager))) &#123;</span><br><span class="line">               <span class="keyword">return</span> ((com.nancyyihao.aidlserver.IBookManager) iin);  <span class="comment">// local Binder</span></span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">com</span>.nancyyihao.aidlserver.IBookManager.Stub.Proxy(obj);  <span class="comment">// remote Binder</span></span><br><span class="line">       &#125;</span><br><span class="line">接着执行</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">               List&lt;Book&gt; bookList = bookManager.getBookList();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">此时的bookManager通过asInterface方法转换后，返回的实际上是本地的proxy类</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">com</span>.nancyyihao.aidlserver.IBookManager &#123;</span><br><span class="line">            <span class="keyword">private</span> android.os.IBinder mRemote;</span><br><span class="line">            Proxy(android.os.IBinder remote) &#123;</span><br><span class="line">                mRemote = remote;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> android.os.IBinder <span class="title function_">asBinder</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> mRemote;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> java.lang.String <span class="title function_">getInterfaceDescriptor</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> DESCRIPTOR;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> java.util.List&lt;com.nancyyihao.aidlserver.Book&gt; getBookList() <span class="keyword">throws</span> android.os.RemoteException &#123;</span><br><span class="line">                android.os.<span class="type">Parcel</span> <span class="variable">_data</span> <span class="operator">=</span> android.os.Parcel.obtain();</span><br><span class="line">                android.os.<span class="type">Parcel</span> <span class="variable">_reply</span> <span class="operator">=</span> android.os.Parcel.obtain();</span><br><span class="line">                java.util.List&lt;com.nancyyihao.aidlserver.Book&gt; _result;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    _data.writeInterfaceToken(DESCRIPTOR);</span><br><span class="line">                    mRemote.transact(Stub.TRANSACTION_getBookList, _data, _reply, <span class="number">0</span>);</span><br><span class="line">                    _reply.readException();</span><br><span class="line">                    _result = _reply.createTypedArrayList(com.nancyyihao.aidlserver.Book.CREATOR);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    _reply.recycle();</span><br><span class="line">                    _data.recycle();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> _result;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBook</span><span class="params">(com.nancyyihao.aidlserver.Book book)</span> <span class="keyword">throws</span> android.os.RemoteException &#123;</span><br><span class="line">                android.os.<span class="type">Parcel</span> <span class="variable">_data</span> <span class="operator">=</span> android.os.Parcel.obtain();</span><br><span class="line">                android.os.<span class="type">Parcel</span> <span class="variable">_reply</span> <span class="operator">=</span> android.os.Parcel.obtain();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    _data.writeInterfaceToken(DESCRIPTOR);</span><br><span class="line">                    <span class="keyword">if</span> ((book != <span class="literal">null</span>)) &#123;</span><br><span class="line">                        _data.writeInt(<span class="number">1</span>);</span><br><span class="line">                        book.writeToParcel(_data, <span class="number">0</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        _data.writeInt(<span class="number">0</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    mRemote.transact(Stub.TRANSACTION_addBook, _data, _reply, <span class="number">0</span>);</span><br><span class="line">                    _reply.readException();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    _reply.recycle();</span><br><span class="line">                    _data.recycle();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TRANSACTION_getBookList</span> <span class="operator">=</span> (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TRANSACTION_addBook</span> <span class="operator">=</span> (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>通过代码我们可以看到proxy类其实也是一个IBookManager接口，调用bookManager.getBookList()其实是调用Proxy.getBookList。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> java.util.List&lt;com.nancyyihao.aidlserver.Book&gt; getBookList() <span class="keyword">throws</span> android.os.RemoteException &#123;</span><br><span class="line">               android.os.<span class="type">Parcel</span> <span class="variable">_data</span> <span class="operator">=</span> android.os.Parcel.obtain();</span><br><span class="line">               android.os.<span class="type">Parcel</span> <span class="variable">_reply</span> <span class="operator">=</span> android.os.Parcel.obtain();</span><br><span class="line">               java.util.List&lt;com.nancyyihao.aidlserver.Book&gt; _result;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   _data.writeInterfaceToken(DESCRIPTOR);</span><br><span class="line">                   mRemote.transact(Stub.TRANSACTION_getBookList, _data, _reply, <span class="number">0</span>);</span><br><span class="line">                   _reply.readException();</span><br><span class="line">                   _result = _reply.createTypedArrayList(com.nancyyihao.aidlserver.Book.CREATOR);</span><br><span class="line">               &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                   _reply.recycle();</span><br><span class="line">                   _data.recycle();</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> _result;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><p>在Proxy.getBookList方法中调用了mRemote.trasact()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">transact</span><span class="params">(<span class="type">int</span> code, Parcel data, Parcel reply,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> flags)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span>) Log.v(<span class="string">&quot;Binder&quot;</span>, <span class="string">&quot;Transact: &quot;</span> + code + <span class="string">&quot; to &quot;</span> + <span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (data != <span class="literal">null</span>) &#123;</span><br><span class="line">        data.setDataPosition(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">r</span> <span class="operator">=</span> onTransact(code, data, reply, flags);</span><br><span class="line">    <span class="keyword">if</span> (reply != <span class="literal">null</span>) &#123;</span><br><span class="line">        reply.setDataPosition(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client就是在这里和Server进行远程通信的！把需要的参数放data中，服务端执行完后把接口写到result里。从代码中可以看到transact方法中调用了onTransact方法。我们再看看onTransact方法有啥东西。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onTransact</span><span class="params">(<span class="type">int</span> code, android.os.Parcel data, android.os.Parcel reply, <span class="type">int</span> flags)</span> <span class="keyword">throws</span> android.os.RemoteException &#123;</span><br><span class="line">         ......</span><br><span class="line">              <span class="keyword">case</span> TRANSACTION_getBookList: &#123;</span><br><span class="line">                  data.enforceInterface(DESCRIPTOR);</span><br><span class="line">                  java.util.List&lt;com.nancyyihao.aidlserver.Book&gt; _result = <span class="built_in">this</span>.getBookList();</span><br><span class="line">                  reply.writeNoException();</span><br><span class="line">                  reply.writeTypedList(_result);</span><br><span class="line">                  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">              &#125;</span><br><span class="line">            ......</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>直接调用了this.getBookList方法返回结果，这个this到底是哪个对象？前面提到mRemote其实是远程中的Binder对象，其代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">Binder</span> <span class="variable">mBinder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IBookManager</span>.Stub() &#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getBookList</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">           <span class="keyword">return</span> mBookList;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBook</span><span class="params">(Book book)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">           mBookList.add(book);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125; ;</span><br></pre></td></tr></table></figure><p>this.getBookList其实就是mRemote.getBookList，就是上面代码中的mBinder.getBookList！然后把返回结果放到result中即可。至此，整个通信过程分析完毕。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>Client是通过本地的Proxy类像Server发起通信</li><li>Client通过ServerConnection接口回调收到Server远程Binder对象</li><li>IPC过程发生在transact方法中，该方法会挂起直到服务端返回结果，因此不能在主线程调用远程服务。</li></ul><p><img src="/2016/09/10/Introduction-of-Android-Binder/p1.jpg" alt="Binder工作机制"></p><p>图片和文中Demo来自《Android开发技术探索》</p><h3 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h3><p><a href="https://github.com/nancyyihao/Android-AIDL-Demo">Android-AIDL-Demo</a></p><h3 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h3><ul><li><a href="http://weishu.me/2016/01/12/binder-index-for-newer/">Binder学习指南</a></li><li><a href="http://blog.csdn.net/universus/article/details/6211589">Android Bander设计与实现 - 设计篇</a></li><li><a href="http://blog.csdn.net/luoshengyang/article/details/6618363">Android进程间通信（IPC）机制Binder简要介绍和学习计划</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Binder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android-Custom-View-two</title>
      <link href="/2016/09/02/Android-Custom-View-two/"/>
      <url>/2016/09/02/Android-Custom-View-two/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>魅族手机的闹钟应用中有个倒计时，这个控件还是蛮有趣的。左边是魅族闹钟，右边是我们最终实现的效果，虽然有些细节还需优化，不过基本上已经达到了想要的效果，我们先来就来看看如何实现吧。</p><span id="more"></span><p><img src="/2016/09/02/Android-Custom-View-two/g1.gif" alt="图1"><br><img src="/2016/09/02/Android-Custom-View-two/g2.gif" alt="图2"></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><h4 id="确定宽高"><a href="#确定宽高" class="headerlink" title="确定宽高"></a>确定宽高</h4><p>对一个Android自定义控件来说，一般都经过三个步骤</p><ul><li>onLayout()</li><li>onMeasure()</li><li>onDraw()</li></ul><p>onLayout明确子控件在父控件中的位置（本控件不需要重写），onMeasure是确定控件的大小（宽、高），而onDraw是我们重点关注的方法，我们需要在这个方法中写入显示View的逻辑代码。<br>对于本控件，控件的高度 应该等于细线的高度(mLineHeight)加上数字的高度（mFontHeight），当然为了好看，中间需要设上一些边距(mPadding)，因此本控件的高度应该为 mFontHeight + mLineHeight + 10 + mPadding，测量代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">measureHeight</span><span class="params">(<span class="type">int</span> heightMeasureSpec)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">mode</span> <span class="operator">=</span> MeasureSpec.getMode(heightMeasureSpec);</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> MeasureSpec.getSize(heightMeasureSpec);</span><br><span class="line">    <span class="keyword">switch</span> (mode) &#123;</span><br><span class="line">        <span class="keyword">case</span> MeasureSpec.EXACTLY:</span><br><span class="line">            <span class="keyword">return</span> size ;</span><br><span class="line">        <span class="keyword">case</span> MeasureSpec.AT_MOST:</span><br><span class="line">            <span class="keyword">return</span> Math.min(size, mFontHeight + mLineHeight + <span class="number">10</span> + mPadding) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> size ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样地，控件的宽度其实就是0~1000的间隔，测量代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">measureWidth</span><span class="params">(<span class="type">int</span> widthMeasureSpec)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">mode</span> <span class="operator">=</span> MeasureSpec.getMode(widthMeasureSpec);</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> MeasureSpec.getSize(widthMeasureSpec);</span><br><span class="line">    <span class="keyword">switch</span> (mode) &#123;</span><br><span class="line">        <span class="keyword">case</span> MeasureSpec.EXACTLY:</span><br><span class="line">            <span class="keyword">return</span> size ;</span><br><span class="line">        <span class="keyword">case</span> MeasureSpec.AT_MOST:</span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> getPaddingLeft() + mContentWidth + getPaddingRight() ;</span><br><span class="line">            <span class="keyword">return</span> Math.min(size, result) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> size ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="画刻度尺"><a href="#画刻度尺" class="headerlink" title="画刻度尺"></a>画刻度尺</h4><p>重点在于刻度尺的计算。思路是先draw上头的数字，然后再draw下边的线条，判断位置确定是否需要draw上头的数字即可。其实就是坐标的计算。代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">startX</span> <span class="operator">=</span> mPadding;</span><br><span class="line">      <span class="type">int</span> <span class="variable">stopX</span> <span class="operator">=</span> mPadding;</span><br><span class="line">      <span class="type">int</span> <span class="variable">stopY</span> <span class="operator">=</span>mHeight - mPadding;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i&lt;=mContentWidth ; i += mFontWidth)</span><br><span class="line">      <span class="keyword">if</span> (i % (mFontWidth *<span class="number">10</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">          canvas.drawLine(startX + i, mFontHeight + mPadding + <span class="number">5</span> , stopX + i, stopY, mTextPaint);</span><br><span class="line">          canvas.drawText(i + <span class="string">&quot;&quot;</span>, startX + i, mFontHeight + mPadding, mTextPaint);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % mFontWidth == <span class="number">0</span>) &#123;</span><br><span class="line">          canvas.drawLine(startX + i, mFontHeight + mPadding + <span class="number">10</span>, stopX + i, stopY, mPaint);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h4 id="让View动起来"><a href="#让View动起来" class="headerlink" title="让View动起来"></a>让View动起来</h4><p>Android本身提供了移动View的API，因此让View动起来也是不难的。两种思路</p><ul><li>监听Touch事件，当Touch坐标变化时，计算坐标位置，不断调用scrollTo(x,0)达到变换坐标的目的</li><li>监听Touch事件，记录上次横坐标和本次横坐标的差值，然后调用scrollBy(delta， 0) 即可移动</li></ul><p>其实两种方法本质上都是一样的。ScrollBy其实也是调用了scrollTo方法。本文采用方法二。其代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onTouchEvent</span><span class="params">(MotionEvent event)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                mLastX = (<span class="type">int</span>) event.getX();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> (<span class="type">int</span>) event.getX();</span><br><span class="line">                <span class="type">int</span> <span class="variable">deltaX</span> <span class="operator">=</span> x - mLastX;</span><br><span class="line">                scrollBy(-deltaX, <span class="number">0</span>);</span><br><span class="line">                mLastX = x;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>当然了，我们是不能让View无限移动的，因此需要重写scrollBy方法，限制View不能超过边界。<br>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scrollBy</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.scrollBy(x, y);</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123; <span class="comment">// drag to left</span></span><br><span class="line">        <span class="keyword">if</span> (getScrollX() &lt; -getCenter() + mPadding) &#123;</span><br><span class="line">            scrollTo(-getCenter() + mPadding, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span> (x &gt;<span class="number">0</span>) &#123; <span class="comment">// drag to right</span></span><br><span class="line">       <span class="keyword">if</span> (mContentWidth - getScrollX() + x &lt; getCenter()) &#123;</span><br><span class="line">            scrollTo(mContentWidth - getCenter() + mFontWidth, <span class="number">0</span>);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当超过边界时，直接调用scrollTo，让View停留在特定的位置即可。需要注意的一点是，View往左滑动时，ScrollX的值是负的。</p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nancyyihao.demo;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Canvas;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Paint;</span><br><span class="line"><span class="keyword">import</span> android.text.TextPaint;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.view.MotionEvent;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Scroller;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RulerView</span> <span class="keyword">extends</span> <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> RulerView.class.getSimpleName() ;</span><br><span class="line">    <span class="keyword">private</span> TextPaint mTextPaint;</span><br><span class="line">    <span class="keyword">private</span> Paint mPaint ;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> mWidth;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> mHeight;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">mPadding</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> Scroller mScroller  ;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> mLastX;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">mContentWidth</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">mLineHeight</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> mFontHeight;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">mFontWidth</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> onValueChangedListener mValueChangedListener;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">onValueChangedListener</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">onValueChanged</span><span class="params">(<span class="type">int</span> newValue)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RulerView</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context);</span><br><span class="line">        init(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RulerView</span><span class="params">(Context context, AttributeSet attrs)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, attrs);</span><br><span class="line">        init(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RulerView</span><span class="params">(Context context, AttributeSet attrs, <span class="type">int</span> defStyle)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, attrs, defStyle);</span><br><span class="line">        init(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOnValueChangedListener</span><span class="params">(onValueChangedListener listener)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mValueChangedListener = listener ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        mTextPaint = <span class="keyword">new</span> <span class="title class_">TextPaint</span>(Paint.ANTI_ALIAS_FLAG | Paint.DITHER_FLAG | Paint.LINEAR_TEXT_FLAG);</span><br><span class="line">        mTextPaint.setTextAlign(Paint.Align.CENTER);</span><br><span class="line">        mTextPaint.setColor(Color.parseColor(<span class="string">&quot;#FF4081&quot;</span>));</span><br><span class="line">        mTextPaint.setTextSize(<span class="number">30</span>);</span><br><span class="line">        mTextPaint.setStrokeWidth(<span class="number">2f</span>);</span><br><span class="line">        Paint.<span class="type">FontMetrics</span> <span class="variable">fontMetrics</span> <span class="operator">=</span> mTextPaint.getFontMetrics();</span><br><span class="line">        mFontHeight = Math.round(Math.abs(fontMetrics.top) + Math.abs(fontMetrics.bottom)) ;</span><br><span class="line">        mPaint = <span class="keyword">new</span> <span class="title class_">Paint</span>(Paint.ANTI_ALIAS_FLAG | Paint.DITHER_FLAG);</span><br><span class="line">        mPaint.setColor(Color.DKGRAY);</span><br><span class="line">        mPaint.setStrokeWidth(<span class="number">2f</span>);</span><br><span class="line">        mPaint.setTextSize(<span class="number">30</span>);</span><br><span class="line">        mPaint.setTextAlign(Paint.Align.CENTER);</span><br><span class="line">        <span class="comment">//mScroller = new Scroller(context) ;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onMeasure</span><span class="params">(<span class="type">int</span> widthMeasureSpec, <span class="type">int</span> heightMeasureSpec)</span> &#123;</span><br><span class="line">        mWidth = measureWidth(widthMeasureSpec);</span><br><span class="line">        mHeight = measureHeight(heightMeasureSpec);</span><br><span class="line">        setMeasuredDimension(mWidth , mHeight );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">measureWidth</span><span class="params">(<span class="type">int</span> widthMeasureSpec)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mode</span> <span class="operator">=</span> MeasureSpec.getMode(widthMeasureSpec);</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> MeasureSpec.getSize(widthMeasureSpec);</span><br><span class="line">        <span class="keyword">switch</span> (mode) &#123;</span><br><span class="line">            <span class="keyword">case</span> MeasureSpec.EXACTLY:</span><br><span class="line">                <span class="keyword">return</span> size ;</span><br><span class="line">            <span class="keyword">case</span> MeasureSpec.AT_MOST:</span><br><span class="line">                <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> getPaddingLeft() + mContentWidth + getPaddingRight() ;</span><br><span class="line">                <span class="keyword">return</span> Math.min(size, result) ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> size ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">measureHeight</span><span class="params">(<span class="type">int</span> heightMeasureSpec)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mode</span> <span class="operator">=</span> MeasureSpec.getMode(heightMeasureSpec);</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> MeasureSpec.getSize(heightMeasureSpec);</span><br><span class="line">        <span class="keyword">switch</span> (mode) &#123;</span><br><span class="line">            <span class="keyword">case</span> MeasureSpec.EXACTLY:</span><br><span class="line">                <span class="keyword">return</span> size ;</span><br><span class="line">            <span class="keyword">case</span> MeasureSpec.AT_MOST:</span><br><span class="line">                <span class="keyword">return</span> Math.min(size, mFontHeight + mLineHeight + <span class="number">10</span> + mPadding) ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> size ;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    private void smoothScrollTo(int destX, int destY) &#123;</span></span><br><span class="line"><span class="comment">//        int scrollX = getScrollX() ;</span></span><br><span class="line"><span class="comment">//        int delta = destX - scrollX ;</span></span><br><span class="line"><span class="comment">//        mScroller.startScroll(scrollX, 0, delta, 0 , 1000);</span></span><br><span class="line"><span class="comment">//        invalidate();</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public void computeScroll() &#123;</span></span><br><span class="line"><span class="comment">//        super.computeScroll();</span></span><br><span class="line"><span class="comment">//        if (mScroller.computeScrollOffset()) &#123;</span></span><br><span class="line"><span class="comment">//            smoothScrollTo(mScroller.getCurrX(), mScroller.getCurrY());</span></span><br><span class="line"><span class="comment">//            postInvalidate();</span></span><br><span class="line"><span class="comment">////            ((View) getParent()).scrollTo(mScroller.getCurrX(),mScroller.getCurrY());</span></span><br><span class="line"><span class="comment">////            invalidate();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDraw</span><span class="params">(Canvas canvas)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDraw(canvas);</span><br><span class="line">        <span class="type">int</span> <span class="variable">startX</span> <span class="operator">=</span> mPadding;</span><br><span class="line">        <span class="type">int</span> <span class="variable">stopX</span> <span class="operator">=</span> mPadding;</span><br><span class="line">        <span class="type">int</span> <span class="variable">stopY</span> <span class="operator">=</span>mHeight - mPadding;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i&lt;=mContentWidth ; i += mFontWidth)</span><br><span class="line">        <span class="keyword">if</span> (i % (mFontWidth *<span class="number">10</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            canvas.drawLine(startX + i, mFontHeight + mPadding + <span class="number">5</span> , stopX + i, stopY, mTextPaint);</span><br><span class="line">            canvas.drawText(i + <span class="string">&quot;&quot;</span>, startX + i, mFontHeight + mPadding, mTextPaint);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % mFontWidth == <span class="number">0</span>) &#123;</span><br><span class="line">            canvas.drawLine(startX + i, mFontHeight + mPadding + <span class="number">10</span>, stopX + i, stopY, mPaint);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">calcValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>  ( getCenter() + getScrollX() - mPadding) ; <span class="comment">//minus startX</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getCenter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (getRight() - getLeft()) / <span class="number">2</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scrollBy</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.scrollBy(x, y);</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123; <span class="comment">// drag to left</span></span><br><span class="line">            <span class="keyword">if</span> (getScrollX() &lt; -getCenter() + mPadding) &#123;</span><br><span class="line">                scrollTo(-getCenter() + mPadding, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> (x &gt;<span class="number">0</span>) &#123; <span class="comment">// drag to right</span></span><br><span class="line">           <span class="keyword">if</span> (mContentWidth - getScrollX() + x &lt; getCenter()) &#123;</span><br><span class="line">                scrollTo(mContentWidth - getCenter() + mFontWidth, <span class="number">0</span>);</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onTouchEvent</span><span class="params">(MotionEvent event)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                mLastX = (<span class="type">int</span>) event.getX();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> (<span class="type">int</span>) event.getX();</span><br><span class="line">                <span class="type">int</span> <span class="variable">deltaX</span> <span class="operator">=</span> x - mLastX;</span><br><span class="line">                scrollBy(-deltaX, <span class="number">0</span>);</span><br><span class="line">                mLastX = x;</span><br><span class="line">                <span class="keyword">if</span> (mValueChangedListener != <span class="literal">null</span>)</span><br><span class="line">                    mValueChangedListener.onValueChanged(calcValue());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>整体上还是比较粗糙，原形虽然有了，但是还需要优化。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://blog.csdn.net/ly1414725328/article/details/51367149">【Android】自定义View —— 滑动的次数选择器</a></li><li><a href="http://blog.csdn.net/ttdevs/article/details/38944799">android 滚轮刻度尺的实现</a></li><li><a href="http://www.pffair.com/blog/2014/06/19/android-viewzi-ding-yi-zhuan-ti-er-viewhua-dong-de-shi-xian/">Android View自定义专题二(View滑动的实现)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android自定义View（一）</title>
      <link href="/2016/08/27/Android-custom-View/"/>
      <url>/2016/08/27/Android-custom-View/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前在微信公众号上看到这篇<a href="http://mp.weixin.qq.com/s?__biz=MzA4NDM2MjAwNw==&mid=2650576076&idx=1&sn=a7df4a3df5a243f76c0ec69a7b2fec2d&scene=1&srcid=0824uXOe80OogoRcqB4cKwU5#rd">文章</a>，实现了下图的效果，正好最近在学自定义View，正好可以练练手</p><span id="more"></span><p><img src="/2016/08/27/Android-custom-View/p1.gif" alt="图1"></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><h4 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h4><p>从最开始的元素入手，算出包含文字矩形大小（Paint.getTextBounds()<br>），根据坐标先画出左半圆，再画两条中间线，最后画出右半圆，逐渐减小中间线长度（开启线程定时更改），变成圆后再用Canvas.drawArc()滚动的扇形条。其实一开始我也是这么做的，虽然也能实现同样的效果，但是比较复杂。思路1优点是容易想到，缺点是实现起来比较复杂，坐标换算麻烦。</p><h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><p>思路2是公众号上提供的，直接用Canvas.drawRoundText画出圆角矩形，然后在中间写上字即可，动画效果直接使用ValueAnimator 即可实现数值变化。对比来看，思路2比较好实现。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nancyyihao.demo;</span><br><span class="line"><span class="keyword">import</span> android.animation.Animator;</span><br><span class="line"><span class="keyword">import</span> android.animation.ValueAnimator;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Canvas;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Paint;</span><br><span class="line"><span class="keyword">import</span> android.graphics.RectF;</span><br><span class="line"><span class="keyword">import</span> android.text.TextPaint;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.animation.AccelerateInterpolator;</span><br><span class="line"><span class="keyword">import</span> android.view.animation.LinearInterpolator;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginView</span> <span class="keyword">extends</span> <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> mWidth ;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> mHeight ;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">mTestText</span> <span class="operator">=</span><span class="string">&quot;testing&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">DEFAULT_WIDTH</span> <span class="operator">=</span> <span class="number">200</span> ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">DEFAULT_HEIGHT</span> <span class="operator">=</span> <span class="number">100</span> ;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> <span class="variable">startAngle</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> <span class="variable">sweepAngle</span> <span class="operator">=</span> <span class="number">45</span> ;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">mStrokeWidth</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">mDeltaWidth</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">mPadding</span> <span class="operator">=</span> <span class="number">5</span> ;</span><br><span class="line">    <span class="keyword">private</span> Paint mRoundRectPaint;</span><br><span class="line">    <span class="keyword">private</span> TextPaint mTextPaint;</span><br><span class="line">    <span class="keyword">private</span> RectF mRectF ;</span><br><span class="line">    <span class="keyword">private</span> ValueAnimator animator ;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoginView</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoginView</span><span class="params">(Context context, AttributeSet attrs)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, attrs);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoginView</span><span class="params">(Context context, AttributeSet attrs, <span class="type">int</span> defStyle)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, attrs, defStyle);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        mRoundRectPaint = <span class="keyword">new</span> <span class="title class_">Paint</span>(Paint.ANTI_ALIAS_FLAG | Paint.DITHER_FLAG);</span><br><span class="line">        mRoundRectPaint.setColor(Color.parseColor(<span class="string">&quot;#FF4081&quot;</span>));</span><br><span class="line">        mRoundRectPaint.setStyle(Paint.Style.STROKE);</span><br><span class="line">        mRoundRectPaint.setStrokeWidth(mStrokeWidth);</span><br><span class="line">        mTextPaint = <span class="keyword">new</span> <span class="title class_">TextPaint</span>(Paint.ANTI_ALIAS_FLAG | Paint.DITHER_FLAG | Paint.LINEAR_TEXT_FLAG);</span><br><span class="line">        mTextPaint.setTextAlign(Paint.Align.CENTER);</span><br><span class="line">        mTextPaint.setColor(Color.BLUE);</span><br><span class="line">        mTextPaint.setTextSize(<span class="number">30</span>);</span><br><span class="line">        mTextPaint.setStrokeWidth(mStrokeWidth);</span><br><span class="line">        mRectF = <span class="keyword">new</span> <span class="title class_">RectF</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onMeasure</span><span class="params">(<span class="type">int</span> widthMeasureSpec, <span class="type">int</span> heightMeasureSpec)</span> &#123;</span><br><span class="line">        mWidth = getSize(widthMeasureSpec, DEFAULT_WIDTH);</span><br><span class="line">        mHeight = getSize(heightMeasureSpec, DEFAULT_HEIGHT);</span><br><span class="line">        setMeasuredDimension(mWidth, mHeight);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getSize</span><span class="params">(<span class="type">int</span> measureSpec, <span class="type">int</span> defVaule)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mode</span> <span class="operator">=</span> MeasureSpec.getMode(measureSpec);</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> MeasureSpec.getSize(measureSpec);</span><br><span class="line">        <span class="keyword">switch</span> (mode) &#123;</span><br><span class="line">            <span class="keyword">case</span> MeasureSpec.EXACTLY:</span><br><span class="line">                <span class="keyword">return</span> size ;</span><br><span class="line">            <span class="keyword">case</span> MeasureSpec.AT_MOST:</span><br><span class="line">                <span class="keyword">return</span> Math.min(size, defVaule) ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> defVaule ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDraw</span><span class="params">(Canvas canvas)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDraw(canvas);</span><br><span class="line">        mRectF = getRectF(mDeltaWidth + mPadding, <span class="number">0</span> + mPadding, mWidth - mDeltaWidth - mPadding, mHeight - mPadding) ;</span><br><span class="line">        Paint.<span class="type">FontMetricsInt</span> <span class="variable">fontMetrics</span> <span class="operator">=</span> mRoundRectPaint.getFontMetricsInt();</span><br><span class="line">        <span class="comment">//文字垂直居中</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">baseline</span> <span class="operator">=</span>(<span class="type">int</span>) (mRectF.bottom + mRectF.top - fontMetrics.bottom - fontMetrics.top) / <span class="number">2</span>;</span><br><span class="line">        mRoundRectPaint.setColor(getResources().getColor(R.color.colorAccent));</span><br><span class="line">        canvas.drawRoundRect(mRectF, mHeight / <span class="number">2</span>, mHeight / <span class="number">2</span>, mRoundRectPaint);</span><br><span class="line">        <span class="keyword">if</span> (mDeltaWidth &lt; mWidth/<span class="number">2</span> - mHeight / <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mDeltaWidth == <span class="number">0</span>) &#123;</span><br><span class="line">                canvas.drawText(mTestText, mWidth / <span class="number">2</span>, baseline , mTextPaint);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mRoundRectPaint.setColor(Color.BLUE);</span><br><span class="line">            canvas.drawArc(getRectF(mWidth/<span class="number">2</span> - mHeight/<span class="number">2</span> + mPadding, <span class="number">0</span> + mPadding, mWidth/<span class="number">2</span> + mHeight/<span class="number">2</span> - mPadding, mHeight - mPadding), startAngle, sweepAngle, <span class="literal">false</span>, mRoundRectPaint);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> RectF <span class="title function_">getRectF</span><span class="params">(<span class="type">float</span> left, <span class="type">float</span> top, <span class="type">float</span> right, <span class="type">float</span> bottom)</span> &#123;</span><br><span class="line">        mRectF.set(left, top, right, bottom);</span><br><span class="line">        <span class="keyword">return</span> mRectF ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSmallAnimate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (animator != <span class="literal">null</span>) &#123;</span><br><span class="line">            animator.cancel();</span><br><span class="line">        &#125;</span><br><span class="line">        animator = ValueAnimator.ofInt(<span class="number">0</span>, mWidth/<span class="number">2</span> - mHeight / <span class="number">2</span>);</span><br><span class="line">        animator.addUpdateListener(<span class="keyword">new</span> <span class="title class_">ValueAnimator</span>.AnimatorUpdateListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> &#123;</span><br><span class="line">                 mDeltaWidth = (<span class="type">int</span>) animation.getAnimatedValue();</span><br><span class="line">                postInvalidate();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        animator.removeAllListeners();</span><br><span class="line">        animator.addListener(<span class="keyword">new</span> <span class="title class_">Animator</span>.AnimatorListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAnimationStart</span><span class="params">(Animator animation)</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAnimationEnd</span><span class="params">(Animator animation)</span> &#123;</span><br><span class="line">                doSpin();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAnimationCancel</span><span class="params">(Animator animation)</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAnimationRepeat</span><span class="params">(Animator animation)</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        animator.setDuration(<span class="number">1000</span>);</span><br><span class="line">        animator.setInterpolator(<span class="keyword">new</span> <span class="title class_">AccelerateInterpolator</span>(<span class="number">1.0f</span>));</span><br><span class="line">        animator.start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doSpin</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (animator != <span class="literal">null</span>) &#123;</span><br><span class="line">            animator.cancel();</span><br><span class="line">        &#125;</span><br><span class="line">        animator = ValueAnimator.ofFloat(<span class="number">0</span>, <span class="number">360</span>);</span><br><span class="line">        animator.addUpdateListener(<span class="keyword">new</span> <span class="title class_">ValueAnimator</span>.AnimatorUpdateListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> &#123;</span><br><span class="line">                startAngle = (<span class="type">float</span>) animation.getAnimatedValue();</span><br><span class="line">                postInvalidate();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        animator.setDuration(<span class="number">1000</span>);</span><br><span class="line">        animator.setInterpolator(<span class="keyword">new</span> <span class="title class_">LinearInterpolator</span>());</span><br><span class="line">        animator.setRepeatCount(ValueAnimator.INFINITE);</span><br><span class="line">        animator.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本上是公众号上的思路，按照思路2，自己把代码敲了一遍，加了一些优化。基本上是一样的。这里没有实现由小变大的过程（大变小过程反过来即可）。难点主要在坐标的计算上，耐心把坐标计算出来就没啥问题。需要注意的一点是如果没有加上padding的话会造成图形被截掉，如下图很不好看。</p><p><img src="/2016/08/27/Android-custom-View/p2.png" alt="图2"></p><h3 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h3><p><a href="http://blog.csdn.net/zly921112/article/details/50401976">android canvas drawText()文字居中</a><br><a href="http://www.voidcn.com/blog/u014763302/article/p-5010905.html">Android Canvas drawText实现中文垂直居中</a><br><a href="http://stackoverflow.com/questions/11120392/android-center-text-on-canvas">Android Center text on canvas</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Handler 消息循环机制</title>
      <link href="/2016/08/21/Understanding-Android-Handler/"/>
      <url>/2016/08/21/Understanding-Android-Handler/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>一问起Android应用程序的入口，很多人会说是Activity中的onCreate方法，也有人说是ActivityThread中的静态main方法。因为Java虚拟机在运行的时候会自动加载指定类的静态共有main方法，因此个人更倾向于第二种说法。</p><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ActivityThread</span> &#123;</span><br><span class="line">  ......</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      ......</span><br><span class="line">      Looper.prepareMainLooper();</span><br><span class="line">      <span class="type">ActivityThread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActivityThread</span>();</span><br><span class="line">      thread.attach(<span class="literal">false</span>);</span><br><span class="line">      <span class="keyword">if</span> (sMainThreadHandler == <span class="literal">null</span>) &#123;</span><br><span class="line">          sMainThreadHandler = thread.getHandler();</span><br><span class="line">      &#125;</span><br><span class="line">      ......</span><br><span class="line">      Looper.loop();</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Main thread loop unexpectedly exited&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们注意到这段代码，先调用Looper的prepareMainLooper()方法，新建一个ActivityThread，然后再获取MainThreadHander，最后调用Looper.loop()方法，程序就一直在loop方法中循环。Looper，Handler之间有何关系？请看下文。</p><h3 id="程序的消息循环"><a href="#程序的消息循环" class="headerlink" title="程序的消息循环"></a>程序的消息循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">test</span>  &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述小程序就是一个任务，虚拟机启用一个线程执行完该任务后，程序就结束了。为了保证程序不立即退出，一般都会写一个循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">test</span>  &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (hasNextMessage()) &#123;</span><br><span class="line">              msg  = getMessage() ; </span><br><span class="line">              handleMessage(msg) ;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>系统不断从getMessage获取消息，再通过handleMessage来处理消息。这种基于消息的循环模型在许多的系统框架中都有实现。比如iOS系统中的RunLoop，再比如windows系统中的消息队列，windows系统会为每一个UI线程分配一个消息队列，发生输入事件后，windows将事件转换为一个”消息”发送给系统消息队列，操作系统有一个专门的线程从系统消息队列中取出消息，分发给各个UI线程的输入消息队列中。Android中的应用系统框架也不例外，也有一套自己的消息循环机制，这套机制是靠Looper、Handler、MessageQueue来共同完成的。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><img src="/2016/08/21/Understanding-Android-Handler/p1.jpg" alt="图1"></p><p>图片来自<a href="http://m.blog.csdn.net/article/details?id=51191380">zongpeiqing</a>博客。Looper负责消息循环（例子中的while语句），Handler负责发送和处理消息，MessageQueue则负责管理消息（消息的增加和移除）。不管是sendMessage还是sendMessageDelay或是View.post方法，或是上面列出的没列出的发送消息的方法，最终都会包装成一条消息Message（这条消息由Handler发出），然后调用MessageQuque的enqueueMessage方法把消息放到消息队列MessageQueue中。而Looper则会不停地查看MessageQueue中是否有新消息msg，有新消息就会调用新消息msg.target.handleMessage()去处理消息，否则会一直阻塞。msg.target实际上是Handler对象。因此，Handler发送的消息，最终也是由Handler来处理。</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="Q1-Handler是怎么在不同线程之间切换的？"><a href="#Q1-Handler是怎么在不同线程之间切换的？" class="headerlink" title="Q1: Handler是怎么在不同线程之间切换的？"></a>Q1: Handler是怎么在不同线程之间切换的？</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Looper</span> &#123;</span><br><span class="line">......</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Looper</span> <span class="variable">me</span> <span class="operator">=</span> myLooper();</span><br><span class="line">        <span class="keyword">if</span> (me == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;No Looper; Looper.prepare() wasn&#x27;t called on this thread.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">MessageQueue</span> <span class="variable">queue</span> <span class="operator">=</span> me.mQueue;</span><br><span class="line">        ........</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> queue.next(); <span class="comment">// might block</span></span><br><span class="line">            <span class="keyword">if</span> (msg == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// No message indicates that the message queue is quitting.</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ......</span><br><span class="line">            msg.target.dispatchMessage(msg);</span><br><span class="line">            ......</span><br><span class="line">            msg.recycleUnchecked();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Set this flag to true to detect anonymous, local or member classes</span></span><br><span class="line"><span class="comment">     * that extend this Handler class and that are not static. These kind</span></span><br><span class="line"><span class="comment">     * of classes can potentially create leaks.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">FIND_POTENTIAL_LEAKS</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> <span class="string">&quot;Handler&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Callback interface you can use when instantiating a Handler to avoid</span></span><br><span class="line"><span class="comment">     * having to implement your own subclass of Handler.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg A &#123;<span class="doctag">@link</span> android.os.Message Message&#125; object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> True if no further handling is desired</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Callback</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Subclasses must implement this to receive messages.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Handle system messages here.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispatchMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (msg.callback != <span class="literal">null</span>) &#123;</span><br><span class="line">            handleCallback(msg);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (mCallback != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            handleMessage(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>首先在线程1新建一个handler，在线程2 新建一条消息msg，然后在线程2调用hander.sendMessage(msg)，因为在handler的处理逻辑handleMessage()方法是放在线程1的，因此在线程2中调用了hander.sendMessage(msg)，MessagQueue调用enqueueMessage(Message msg, long when)方法插入了这条消息（注意：该方法是线程安全的，所以不同线程可以往队列插入消息而不出错），Looper发现有新消息，然后取出新消息，调用msg.target.dispatchMessage(msg)，上面已经说到,target其实是hander，这样便成功地切换到线程1的handleMessage逻辑上来了。最常见的例子就是在Activity中声明一个Handler，然后异步线程去请求网络，再通过异步线程Handler发消息更新UI。可以参考这里。</p><h4 id="Q2-上面的模型中，能否直接使用Handler来循环消息？"><a href="#Q2-上面的模型中，能否直接使用Handler来循环消息？" class="headerlink" title="Q2: 上面的模型中，能否直接使用Handler来循环消息？"></a>Q2: 上面的模型中，能否直接使用Handler来循环消息？</h4><p>这个问题仁者见仁，智者见智，这只是一种实现消息循环的方法之一，而不是唯一方法。不是说一定要用Looper。</p><h4 id="Q3-需要注意的点"><a href="#Q3-需要注意的点" class="headerlink" title="Q3: 需要注意的点?"></a>Q3: 需要注意的点?</h4><p>使用Looper前一定要调用Looper.prepare生成线程内(TheadLocal存储)的Looper实例，然后才能调用Looper.loop()实现消息循环。下面是一个非主线程中Looper和Handler演示例子，此时整个线程是不会自动停止的，会一直阻塞，直到调用了Looper.quit()方法才会停止。（下面代码仅仅是为了演示，没有做任何事）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;example-1&quot;</span>) &#123;</span><br><span class="line">            <span class="type">Handler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Handler</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">                    <span class="comment">// 自己的处理逻辑</span></span><br><span class="line">                    <span class="keyword">if</span> (条件满足) &#123;</span><br><span class="line">                    Looper.quit() ; <span class="comment">//退出消息循环，结束线程</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; ;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                Looper.prepare();</span><br><span class="line">                <span class="comment">// do something....</span></span><br><span class="line">                <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> Message.obtain();</span><br><span class="line">                msg.what = ...</span><br><span class="line">                msg.obj = ...</span><br><span class="line">                .......</span><br><span class="line">                handler.sendMessage(msg);</span><br><span class="line">                Looper.loop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start() ;</span><br></pre></td></tr></table></figure><h4 id="Q4-为何ActivityThread中的Looper-loop-没有阻塞主线程？"><a href="#Q4-为何ActivityThread中的Looper-loop-没有阻塞主线程？" class="headerlink" title="Q4 为何ActivityThread中的Looper.loop()没有阻塞主线程？"></a>Q4 为何ActivityThread中的Looper.loop()没有阻塞主线程？</h4><p>TODO</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://item.jd.com/11760209.html">《Android开发艺术探索》</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Handler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android-Adapter-View复用机制</title>
      <link href="/2016/08/14/Reuse-View-in-Adapter/"/>
      <url>/2016/08/14/Reuse-View-in-Adapter/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>相信Android开发者对ListView不会陌生，使用ListView需要设置相应的Adapter才能展示数据。Adapter到底是什么东西？让我们来一探究竟。</p><span id="more"></span><h3 id="Adapter"><a href="#Adapter" class="headerlink" title="Adapter"></a>Adapter</h3><p><img src="/2016/08/14/Reuse-View-in-Adapter/p1.png" alt="图1"></p><p>通过图1我们可以看出Adapter是View和数据之间的桥梁，并为每一个数据项生成相应的View。Adapter是个接口，定义了子类需要实现的方法，最常见的<br>方法有：</p><ul><li>getCount()，总共有多少数据项</li><li>getItem()，获取对应position 中的item</li><li>getView()，返回需要展示在屏幕中的View<br>一般在自定义Adapter中，只需要实现上述三个方法即可。</li></ul><h3 id="Adapter优化前"><a href="#Adapter优化前" class="headerlink" title="Adapter优化前"></a>Adapter优化前</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ImageAdapter</span> <span class="keyword">extends</span> <span class="title class_">BaseAdapter</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> Context mContext ;</span><br><span class="line">        <span class="keyword">private</span> String[] mList ;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ImageAdapter</span><span class="params">(Context context, String[] list)</span> &#123;</span><br><span class="line">            mList = list ;</span><br><span class="line">            mContext = context ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mList.length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">getItem</span><span class="params">(<span class="type">int</span> position)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mList[position];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getItemId</span><span class="params">(<span class="type">int</span> position)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> position;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> View <span class="title function_">getView</span><span class="params">(<span class="type">int</span> position, View convertView, ViewGroup parent)</span> &#123;</span><br><span class="line">               <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> LayoutInflater.from(mContext).inflate(R.layout.gridview_item, parent, <span class="literal">false</span>) ;</span><br><span class="line">               <span class="type">TextView</span> <span class="variable">tv</span> <span class="operator">=</span> view.findViewById(R.id.text) ;</span><br><span class="line">               tv.setText(mList[position]);</span><br><span class="line">            <span class="keyword">return</span> view;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>上述大概就是一个最简单的Adapter的实现了吧。通过在getView函数中inflate一个新布局，给相应position设置data，然后将view返回给父控件。咋一看没啥问题，运行也不会有错。但是会有严重的性能问题。想象一下，如果有mList中有100万条数据，我们有必要每次都重新inflate一个新layout，生成一个新view吗？显然是没有必要的，我们的手机屏幕就那么小，可见的View其实也就那几个。那些看不见的View其实是没必要保存的。</p><h3 id="View复用原理"><a href="#View复用原理" class="headerlink" title="View复用原理"></a>View复用原理</h3><p> <img src="/2016/08/14/Reuse-View-in-Adapter/p2.jpg" alt="图2"> </p><p>图片来源于此<a href="http://android.amberfog.com/?p=296">博客</a>。上图清晰展现了View的复用原理。手机屏幕一共能够展示七个item，继续往上滑动，item 1从我们视线消失，此时ListView 会调用Adaper中的getView函数来生成第八个item。此时getView函数中参数convertView就是item 1，我们只需把convertView（item 1）上的数据项全部设置成item 8的数据项即可，这样就不用再重新inflate一个新View出来了。不管是有mList有多大，内存中保存的View的个数永远只是可见的几个。这对程序性能有很大提升。</p><h3 id="Adapter优化后"><a href="#Adapter优化后" class="headerlink" title="Adapter优化后"></a>Adapter优化后</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ImageAdapter</span> <span class="keyword">extends</span> <span class="title class_">BaseAdapter</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> Context mContext ;</span><br><span class="line">        <span class="keyword">private</span> String[] mList ;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ImageAdapter</span><span class="params">(Context context, String[] list)</span> &#123;</span><br><span class="line">            mList = list ;</span><br><span class="line">            mContext = context ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mList.length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">getItem</span><span class="params">(<span class="type">int</span> position)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mList[position];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getItemId</span><span class="params">(<span class="type">int</span> position)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> position;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> View <span class="title function_">getView</span><span class="params">(<span class="type">int</span> position, View convertView, ViewGroup parent)</span> &#123;</span><br><span class="line">            <span class="type">ViewHolder</span> <span class="variable">viewHolder</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">            <span class="keyword">if</span> (convertView == <span class="literal">null</span>) &#123;</span><br><span class="line">                viewHolder = <span class="keyword">new</span> <span class="title class_">ViewHolder</span>();</span><br><span class="line">                convertView = LayoutInflater.from(mContext).inflate(R.layout.gridview_item, parent, <span class="literal">false</span>) ;</span><br><span class="line">                viewHolder.textview = (TextView) convertView.findViewById(R.id.text);</span><br><span class="line">                convertView.setTag(viewHolder);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                viewHolder = (ViewHolder) convertView.getTag();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 绑定对应position数据</span></span><br><span class="line">            bindViewData(position, viewHolder) ;</span><br><span class="line">            <span class="keyword">return</span> convertView;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">bindViewData</span><span class="params">(<span class="type">int</span> position, ViewHolder viewHolder)</span> &#123;</span><br><span class="line">        viewHolder.textview.setText(mList[position]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ViewHolder</span> &#123;</span><br><span class="line">                <span class="keyword">public</span> TextView textview ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>以图2为例，每个item都是由View（视图）和Data（数据）组成的。前7个item的convertView都是为空的，因此inflate出了7个新View，当第8个item变成可见时此时convertView 为item 1，再通过bindViewData函数把第八个mList中的数据设置给item 1对应的View，然后直接返回convertView。此时我们看到的item 8其实是由这两个东西组成的：</p><ul><li>View —— item 1 的View</li><li>Data —— mList 中的第八项<br>因为item 8和View 和item 1的View结构是一样的（使用同样layout），所以不会造成错误。</li></ul><h3 id="View复用导致的问题"><a href="#View复用导致的问题" class="headerlink" title="View复用导致的问题"></a>View复用导致的问题</h3><h4 id="问题1：item的状态错乱"><a href="#问题1：item的状态错乱" class="headerlink" title="问题1：item的状态错乱"></a>问题1：item的状态错乱</h4><p><img src="/2016/08/14/Reuse-View-in-Adapter/p3.png" alt="图3"></p><p>如图3所示，6跟帖这个View不是所有item都有的，还是拿图2来举例。假设item 1是图3的第一项，item8是图3的第二项。item 1中跟帖这个View是显示的，因为item 8使用的是item 1的View，所以item 8中跟帖的View的状态也是显示的。但是在item 8中跟帖这个View是不应该显示的。这就是复用View导致item状态错乱的问题。解决方法之一就是在bindViewData函数中给layout中的View先全部还原成默认状态即可。</p><h4 id="问题2：多线程导致图片加载位置错乱"><a href="#问题2：多线程导致图片加载位置错乱" class="headerlink" title="问题2：多线程导致图片加载位置错乱"></a>问题2：多线程导致图片加载位置错乱</h4><p>图片加载往往涉及到网络操作，因此ListView中加载图片时一般都会开启新线程去加载图片。如果不使用View复用方法，直接使用优化前的Adapter，是不会有任何问题的。但如果使用的View复用，就不一定了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">       <span class="keyword">public</span> View <span class="title function_">getView</span><span class="params">(<span class="type">int</span> position, View convertView, ViewGroup parent)</span> &#123;</span><br><span class="line">           <span class="type">ViewHolder</span> <span class="variable">viewHolder</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">           <span class="keyword">if</span> (convertView == <span class="literal">null</span>) &#123;</span><br><span class="line">               viewHolder = <span class="keyword">new</span> <span class="title class_">ViewHolder</span>();</span><br><span class="line">               convertView = LayoutInflater.from(mContext).inflate(R.layout.gridview_item, parent, <span class="literal">false</span>) ;</span><br><span class="line">               viewHolder.imageView = (ImageView) convertView.findViewById(R.id.square_image_view);</span><br><span class="line">               convertView.setTag(viewHolder);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               viewHolder = (ViewHolder) convertView.getTag();</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> mList[position] ;</span><br><span class="line">           <span class="type">ImageView</span> <span class="variable">imageView</span> <span class="operator">=</span> viewHolder.imageView ;</span><br><span class="line">           ImageLoader.loadBitmap(imageView, url);</span><br><span class="line">           </span><br><span class="line">           <span class="keyword">return</span> convertView;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>还是拿图2为例。如上述代码所示，我们使用了复用View方法，并且异步加载图片。由于网络比较慢，item 1到item 7的图片还没加载出来，我们滑动到了item 8（复用了item 1的ImageView），突然网络变好了，item 8 的图片加载完成，我们给Item 8设置了图片。过了一会，item 1的图片也下载完成了，我们又给item 1设置了图片，由于item 1和item 8共用同一个ImageView，因此item 8的图片立马变成了item 1的图片。此时item 8上显示的竟然是item 1对应的图片！解决办法之一就是给ImageView setTag。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ImageView</span> <span class="variable">imageView</span> <span class="operator">=</span> viewHolder.imageView ;</span><br><span class="line"><span class="type">String</span> <span class="variable">tag</span> <span class="operator">=</span> (String) imageView.getTag();</span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> mList[position];</span><br><span class="line"><span class="keyword">if</span> ( !url.equals(tag) ) &#123;</span><br><span class="line">      <span class="comment">//default drawable</span></span><br><span class="line">       imageView.setImageDrawable(<span class="literal">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="comment">// set tag to image view</span></span><br><span class="line"> imageView.setTag(url);</span><br><span class="line"> <span class="comment">// load bitmap</span></span><br><span class="line"> ImageLoader.loadBitmap(imageView, url);</span><br></pre></td></tr></table></figure><h3 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h3><p><a href="http://blog.csdn.net/a394268045/article/details/50718321">关于 ScrapView 和 ActiveView</a></p><p><a href="http://lucasr.org/2012/04/05/performance-tips-for-androids-listview/">Performance Tips for Android’s ListView</a></p><p><a href="http://www.rogcg.com/blog/2013/03/12/recycling-views-listview">Handling ListView Recycle on Android</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Adapter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo安装教程</title>
      <link href="/2016/07/09/install-hexo-step-by-step/"/>
      <url>/2016/07/09/install-hexo-step-by-step/</url>
      
        <content type="html"><![CDATA[<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ol><li><p>搭建hexo环境</p></li><li><p>安装hexo</p><span id="more"></span></li></ol><h3 id="搭建hexo环境"><a href="#搭建hexo环境" class="headerlink" title="搭建hexo环境"></a>搭建hexo环境</h3><ul><li><a href="https://github.com/git-for-windows/git/releases/download/v2.9.0.windows.1/Git-2.9.0-64-bit.exe">下载安装git bash</a></li><li><a href="https://nodejs.org/dist/v4.4.7/node-v4.4.7-x64.msi">下载安装Node.js</a></li></ul><p>安装完后，在D盘或其他盘新建个文件夹（命名随意，这里命名为hexo），不出意外，右键就可以看到下图</p><p><img src="/2016/07/09/install-hexo-step-by-step/p1.png" alt="图1"></p><p>选择<strong>Git Bash Here</strong>，则会弹出一个命令框，如下图所示。至此hexo环境搭建完成。</p><p><img src="/2016/07/09/install-hexo-step-by-step/p2.png" alt="图2"></p><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>安装hexo十分简单，在上图弹出的黑色框中输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>等上面命令执行完毕，接着输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p><img src="/2016/07/09/install-hexo-step-by-step/p3.png" alt="图3"></p><p>最后输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="/2016/07/09/install-hexo-step-by-step/p4.png" alt="图4"></p><p>此时在浏览器中输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:4000/</span><br></pre></td></tr></table></figure><p>便可以看到下图，至此，hexo安装完毕。</p><p><img src="/2016/07/09/install-hexo-step-by-step/p5.png" alt="图5"></p><h3 id="使用next主题"><a href="#使用next主题" class="headerlink" title="使用next主题"></a>使用next主题</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><h3 id="使用主题"><a href="#使用主题" class="headerlink" title="使用主题"></a>使用主题</h3><p>把hexo&#x2F;config.yml中的theme属性改成next，如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure><h3 id="语言改成中文"><a href="#语言改成中文" class="headerlink" title="语言改成中文"></a>语言改成中文</h3><ol><li>在hexo&#x2F;theme&#x2F;language&#x2F;下，找到 zh-Hans.yml 重命名 zh-CN.yml</li><li>把hexo 文件夹下_config.yml 修改 language: zh-CN</li><li>在命令行hexo clean、 hexo s</li></ol><h3 id="更改字体大小"><a href="#更改字体大小" class="headerlink" title="更改字体大小"></a>更改字体大小</h3><p>往Hexo\themes\next\source\css_variables目录下的custom.style(没有则新建)添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$font-size-base = 18px; // 默认是 16px 大小</span><br><span class="line">$font-family-headings = Georgia, sans // 标题，修改成你期望的字体族</span><br><span class="line">$font-family-base = &quot;Microsoft YaHei&quot;, Verdana, sans-serif // 修改成你期望的字体族</span><br></pre></td></tr></table></figure><h3 id="使用mist-Schema"><a href="#使用mist-Schema" class="headerlink" title="使用mist Schema"></a>使用mist Schema</h3><p>找到hexo&#x2F;theme&#x2F;next&#x2F;config.yml，使用mist属性，如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Scheme Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br></pre></td></tr></table></figure><h3 id="使用头像"><a href="#使用头像" class="headerlink" title="使用头像"></a>使用头像</h3><p>在Hexo\themes\next\source\images目录（没有images目录则新建）下放一张图片，如avatar.jpg，然后在D:\Hexo\themes\next\config.yml中找到avatar属性，并设置为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># user avatar </span><br><span class="line">avatar: /images/avatar.jpg</span><br></pre></td></tr></table></figure><h3 id="设置多说评论"><a href="#设置多说评论" class="headerlink" title="设置多说评论"></a>设置多说评论</h3><p>申请多说key<br>在hexo&#x2F;_config.yml 新增</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Duoshuo ShortName</span><br><span class="line">duoshuo_shortname: 此处填写申请到的key</span><br></pre></td></tr></table></figure><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h3><p>在hexo&#x2F;theme&#x2F;next&#x2F;_config.yml末尾添加，并且把微信和支付宝二维码放到hexo\themes\next\source\images下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Donate 文章末尾显示打赏按钮</span><br><span class="line">reward_comment: </span><br><span class="line">wechatpay: /images/wechat_pay.png</span><br><span class="line">alipay: /images/alipay.jpg</span><br></pre></td></tr></table></figure><h3 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">  leancloud_visitors:</span><br><span class="line">  enable: true</span><br><span class="line">  app_id: 自己申请的leancloud ID</span><br><span class="line">  app_key: 自己申请的leancloud key</span><br><span class="line"># Show PV/UV of the website/page with busuanzi.</span><br><span class="line"># Get more information on http://ibruce.info/2015/04/04/busuanzi/</span><br><span class="line">busuanzi_count:</span><br><span class="line">  # count values only if the other configs are false</span><br><span class="line">  enable: true</span><br><span class="line">  # custom uv span for the whole site</span><br><span class="line">  site_uv: true</span><br><span class="line">  site_uv_header: &lt;i class=&quot;fa fa-user&quot;&gt;本站访客数&lt;/i&gt;</span><br><span class="line">  site_uv_footer: 人次</span><br><span class="line">  # custom pv span for the whole site</span><br><span class="line">  site_pv: true</span><br><span class="line">  site_pv_header: &lt;i class=&quot;fa fa-eye&quot;&gt;本站总访问量&lt;/i&gt;</span><br><span class="line">  site_pv_footer: 次</span><br><span class="line">  # custom pv span for one page only</span><br><span class="line">  page_pv: false</span><br><span class="line">  page_pv_header: &lt;i class=&quot;fa fa-file-o&quot;&gt;本文总阅读量&lt;/i&gt;</span><br><span class="line">  page_pv_footer: 次</span><br></pre></td></tr></table></figure><h3 id="设置侧边栏社交链接"><a href="#设置侧边栏社交链接" class="headerlink" title="设置侧边栏社交链接"></a>设置侧边栏社交链接</h3><p>编辑站点的 _config.yml(hexo&#x2F;_config.yml)，新增字段 social，然后添加社交站点名称与地址即可。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Social links</span><br><span class="line">social:</span><br><span class="line">  github: https://github.com/your-user-name</span><br><span class="line">  twitter: https://twitter.com/your-user-name</span><br><span class="line">  weibo: http://weibo.com/your-user-name</span><br><span class="line">  douban: http://douban.com/people/your-user-name</span><br><span class="line">  zhihu: http://www.zhihu.com/people/your-user-name</span><br><span class="line">  # 等等</span><br></pre></td></tr></table></figure><h3 id="创建关于我页面"><a href="#创建关于我页面" class="headerlink" title="创建关于我页面"></a>创建关于我页面</h3><p>新建一个 about 页面： <strong>hexo new page “about”</strong>，菜单显示 about 链接，在主题的 _configy.yml<br>设置中将 menu 中 about 前面的注释去掉即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">home: /</span><br><span class="line">archives: /archives</span><br><span class="line">tags: /tags</span><br><span class="line">about: /about</span><br></pre></td></tr></table></figure><h3 id="设置read-more"><a href="#设置read-more" class="headerlink" title="设置read more"></a>设置read more</h3><p>在每篇文章需要断句的地方加上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure><p>即可。</p><h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><p>具体看这里：<a href="http://theme-next.iissnan.com/getting-started.html">http://theme-next.iissnan.com/getting-started.html</a></p><h3 id="无痛使用图片"><a href="#无痛使用图片" class="headerlink" title="无痛使用图片"></a>无痛使用图片</h3><p>参考这里，<a href="http://www.tuicool.com/articles/umEBVfI">http://www.tuicool.com/articles/umEBVfI</a></p><ol><li>把hexo&#x2F;下的 _config.yml 中的post_asset_folder设置为true，如 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure></li><li>在命令行中执行<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure></li><li>hexo n “hello-world” 会生成一篇文章，同时会生成同名文件夹hello-world，将需要的图片，比如p1.png，直接放到hello-world文件夹下，直接在文章中引用即可<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图1](p1.png)</span><br></pre></td></tr></table></figure></li></ol><h3 id="添加搜索"><a href="#添加搜索" class="headerlink" title="添加搜索"></a>添加搜索</h3><h4 id="1-安装插件"><a href="#1-安装插件" class="headerlink" title="1. 安装插件"></a>1. 安装插件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><h4 id="2-修改站点配置：hexo-x2F-config-yml"><a href="#2-修改站点配置：hexo-x2F-config-yml" class="headerlink" title="2. 修改站点配置：hexo&#x2F;_config.yml"></a>2. 修改站点配置：hexo&#x2F;_config.yml</h4><p>在hexo&#x2F;_config.yml添加如下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Search </span><br><span class="line">search:</span><br><span class="line">  path: ./public/search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure><h4 id="3-修改主题配置"><a href="#3-修改主题配置" class="headerlink" title="3. 修改主题配置"></a>3. 修改主题配置</h4><p>在hexo&#x2F;themes&#x2F;next&#x2F;_config.xml下找到local_search并将其设置成true</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  trigger: auto</span><br><span class="line">  top_n_per_article: 1</span><br></pre></td></tr></table></figure><p>重新hexo clean, hexo g, hexo s即可看到效果。</p><h3 id="添加评论-valine"><a href="#添加评论-valine" class="headerlink" title="添加评论 valine"></a>添加评论 valine</h3><p>在hexo&#x2F;themes&#x2F;next&#x2F;_config.xml找到valine，把enable改成true，填上leanCloud对应的 appid 和appkey 即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">valine:</span><br><span class="line">  enable: true</span><br><span class="line">  appid:  # Your leancloud application appid</span><br><span class="line">  appkey: # Your leancloud application appkey</span><br><span class="line">  notify: false # Mail notifier</span><br><span class="line">  verify: false # Verification code</span><br><span class="line">  placeholder: Just go go # Comment box placeholder</span><br><span class="line">  avatar: mm # Gravatar style</span><br><span class="line">  guest_info: nick,mail # Custom comment header, nick,mail,link</span><br><span class="line">  pageSize: 10 # Pagination size</span><br><span class="line">  language: # Language, available values: en, zh-cn</span><br><span class="line">  visitor: true # Article reading statistic</span><br><span class="line">  comment_count: true # If false, comment count will only be displayed in post page, not in home page</span><br><span class="line">  recordIP: false # Whether to record the commenter IP</span><br><span class="line">  serverURLs: # When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span><br><span class="line">  #post_meta_order: 0</span><br></pre></td></tr></table></figure><h3 id="配置gitalk"><a href="#配置gitalk" class="headerlink" title="配置gitalk"></a>配置gitalk</h3><p>和valine一样，填上对应参数即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Gitalk</span><br><span class="line"># For more information: https://gitalk.github.io, https://github.com/gitalk/gitalk</span><br><span class="line">gitalk:</span><br><span class="line">  enable: true</span><br><span class="line">  github_id: nancyyihao # GitHub repo owner</span><br><span class="line">  repo: nancyyihao.github.io # Repository name to store issues</span><br><span class="line">  client_id: # GitHub Application Client ID</span><br><span class="line">  client_secret: # GitHub Application Client Secret</span><br><span class="line">  admin_user: nancyyihao # GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span><br><span class="line">  distraction_free_mode: true # Facebook-like distraction free mode</span><br><span class="line">  # Gitalk&#x27;s display language depends on user&#x27;s browser or system environment</span><br><span class="line">  # If you want everyone visiting your site to see a uniform language, you can set a force language value</span><br><span class="line">  # Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span><br><span class="line">  language:</span><br></pre></td></tr></table></figure><h3 id="关闭某篇文章评论"><a href="#关闭某篇文章评论" class="headerlink" title="关闭某篇文章评论"></a>关闭某篇文章评论</h3><p>添加<strong>comments: false</strong>即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: about</span><br><span class="line">date: 2017-10-04 22:01:42</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="添加标签页"><a href="#添加标签页" class="headerlink" title="添加标签页"></a>添加标签页</h3><ol><li>用命令行新建一个页面<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;tages&quot;</span><br></pre></td></tr></table></figure></li><li>打开 &#x2F;source&#x2F;tages&#x2F;index.md，设置其类型 type 值为“tages”<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: tags</span><br><span class="line">date: 2019-07-26 00:33:58</span><br><span class="line">type: &quot;tags&quot;</span><br></pre></td></tr></table></figure></li><li>打开 &#x2F;themes&#x2F;主题&#x2F;_config.yml，把tages标签那项取消注释即可<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  主页: /</span><br><span class="line">  #随笔: /tags/随笔/</span><br><span class="line">  #分类: /categories</span><br><span class="line">  #归档: /archives</span><br><span class="line">  标签: /tags</span><br></pre></td></tr></table></figure></li><li>标签对应关系</li></ol><table><thead><tr><th>page</th><th>type</th><th>内容</th></tr></thead><tbody><tr><td>tages</td><td>tages</td><td>标签</td></tr><tr><td>categories</td><td>categories</td><td>分类</td></tr><tr><td>archives</td><td>archives</td><td>归档</td></tr><tr><td>about</td><td>about</td><td>关于我(自我介绍)</td></tr></tbody></table><h3 id="设置github-pages"><a href="#设置github-pages" class="headerlink" title="设置github pages"></a>设置github pages</h3><p>具体看这里，<a href="http://beiyuu.com/github-pages">http://beiyuu.com/github-pages</a>.</p><h4 id="生成新ssh-key"><a href="#生成新ssh-key" class="headerlink" title="生成新ssh key"></a>生成新ssh key</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;admin@youremail.com&quot;</span><br></pre></td></tr></table></figure><h4 id="添加SSH-Key到GitHub"><a href="#添加SSH-Key到GitHub" class="headerlink" title="添加SSH Key到GitHub"></a>添加SSH Key到GitHub</h4><p>用文本编辑工具打开id_rsa.pub文件，如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。把key 添加到github的ssh key 中。</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果是下面的情况，则说明添加成功</p><p>Hi username! You’ve successfully authenticated, but GitHub does not provide shell access.</p><h3 id="修改站配置文件"><a href="#修改站配置文件" class="headerlink" title="修改站配置文件"></a>修改站配置文件</h3><p>在hexo&#x2F;_config.xml中把repo改成ssh的形式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: git@github.com:nancyyihao/nancyyihao.github.io.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure><h3 id="部署到github-page"><a href="#部署到github-page" class="headerlink" title="部署到github page"></a>部署到github page</h3><p>安装git部署插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>上传了整个目录<br>解决方法：删除掉.git（隐藏文件夹，需要设置打开）和.deploy_git并重新hexo deploy</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<h3 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h3><p>90后一枚<br>毕业于北京邮电大学，CS专业</p><p>中学时期开始学习编程，曾获得NOIP一等奖<br>大学期间玩过不少东西，刷机、操作系统、单片机、解释器（pascal转C）、php、java web，python都玩过，然一事无成。原来所做的东西仅仅浮于表面，深度不够。痛定思痛，专注Android开发</p><h3 id="经历"><a href="#经历" class="headerlink" title="经历"></a>经历</h3><p>15年初开始接触Android<br>15年7月开始在京东金融实习，为期半年，主要负责京东钱包Android端迭代工作<br>16年7月入职猪场至今，负责网易新闻Android端日常迭代工作</p><h3 id="目前状态"><a href="#目前状态" class="headerlink" title="目前状态"></a>目前状态</h3><p>主要工作是正常的需求迭代<br>更关注代码封装性和可扩展性<br>同时会做些性能优化的工作（内存泄漏、卡顿优化等）</p><h3 id="联系我"><a href="#联系我" class="headerlink" title="联系我"></a>联系我</h3><p>e-mail : <a href="mailto:&#x6a;&#x61;&#x73;&#x6f;&#x6e;&#x6b;&#x65;&#110;&#x74;&#x32;&#55;&#64;&#49;&#x36;&#x33;&#46;&#99;&#x6f;&#x6d;">&#x6a;&#x61;&#x73;&#x6f;&#x6e;&#x6b;&#x65;&#110;&#x74;&#x32;&#55;&#64;&#49;&#x36;&#x33;&#46;&#99;&#x6f;&#x6d;</a></p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
